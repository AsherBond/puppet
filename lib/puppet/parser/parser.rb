#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/expression'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..id42dd7b0511', 'grammar.ra', 841

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..id42dd7b0511

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 65, :_reduce_1,
 1, 65, :_reduce_none,
 1, 66, :_reduce_none,
 2, 66, :_reduce_4,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 4, 76, :_reduce_18,
 5, 76, :_reduce_19,
 3, 76, :_reduce_20,
 2, 76, :_reduce_21,
 1, 82, :_reduce_none,
 1, 82, :_reduce_none,
 3, 82, :_reduce_24,
 3, 82, :_reduce_25,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_34,
 5, 69, :_reduce_35,
 5, 69, :_reduce_36,
 5, 69, :_reduce_37,
 5, 80, :_reduce_38,
 2, 70, :_reduce_39,
 1, 100, :_reduce_40,
 2, 100, :_reduce_41,
 6, 71, :_reduce_42,
 2, 71, :_reduce_43,
 3, 101, :_reduce_44,
 3, 101, :_reduce_45,
 1, 102, :_reduce_none,
 1, 102, :_reduce_none,
 3, 102, :_reduce_48,
 1, 103, :_reduce_none,
 3, 103, :_reduce_50,
 1, 104, :_reduce_51,
 1, 104, :_reduce_52,
 3, 105, :_reduce_53,
 3, 105, :_reduce_54,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 4, 108, :_reduce_57,
 1, 94, :_reduce_none,
 3, 94, :_reduce_59,
 0, 95, :_reduce_none,
 1, 95, :_reduce_none,
 1, 110, :_reduce_62,
 1, 85, :_reduce_63,
 1, 87, :_reduce_64,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 3, 72, :_reduce_72,
 3, 72, :_reduce_73,
 3, 81, :_reduce_74,
 0, 96, :_reduce_75,
 1, 96, :_reduce_76,
 3, 96, :_reduce_77,
 3, 114, :_reduce_78,
 3, 116, :_reduce_79,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 0, 99, :_reduce_82,
 1, 99, :_reduce_83,
 3, 99, :_reduce_84,
 1, 118, :_reduce_none,
 3, 118, :_reduce_86,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 4, 89, :_reduce_105,
 3, 89, :_reduce_106,
 1, 91, :_reduce_107,
 2, 91, :_reduce_108,
 2, 121, :_reduce_109,
 1, 122, :_reduce_110,
 2, 122, :_reduce_111,
 1, 88, :_reduce_112,
 4, 84, :_reduce_113,
 4, 84, :_reduce_114,
 6, 74, :_reduce_115,
 5, 74, :_reduce_116,
 0, 123, :_reduce_none,
 4, 123, :_reduce_118,
 3, 123, :_reduce_119,
 1, 112, :_reduce_none,
 3, 112, :_reduce_121,
 3, 112, :_reduce_122,
 3, 112, :_reduce_123,
 3, 112, :_reduce_124,
 3, 112, :_reduce_125,
 3, 112, :_reduce_126,
 3, 112, :_reduce_127,
 3, 112, :_reduce_128,
 2, 112, :_reduce_129,
 3, 112, :_reduce_130,
 3, 112, :_reduce_131,
 3, 112, :_reduce_132,
 3, 112, :_reduce_133,
 3, 112, :_reduce_134,
 3, 112, :_reduce_135,
 2, 112, :_reduce_136,
 3, 112, :_reduce_137,
 3, 112, :_reduce_138,
 3, 112, :_reduce_139,
 5, 73, :_reduce_140,
 1, 125, :_reduce_none,
 2, 125, :_reduce_142,
 5, 126, :_reduce_143,
 4, 126, :_reduce_144,
 1, 127, :_reduce_none,
 3, 127, :_reduce_146,
 3, 90, :_reduce_147,
 1, 129, :_reduce_none,
 4, 129, :_reduce_149,
 1, 131, :_reduce_none,
 3, 131, :_reduce_151,
 3, 130, :_reduce_152,
 1, 128, :_reduce_none,
 1, 128, :_reduce_none,
 1, 128, :_reduce_none,
 1, 128, :_reduce_none,
 1, 128, :_reduce_none,
 1, 128, :_reduce_none,
 1, 128, :_reduce_none,
 1, 128, :_reduce_160,
 1, 128, :_reduce_none,
 1, 132, :_reduce_162,
 3, 132, :_reduce_163,
 2, 75, :_reduce_164,
 6, 77, :_reduce_165,
 5, 77, :_reduce_166,
 7, 78, :_reduce_167,
 6, 78, :_reduce_168,
 6, 79, :_reduce_169,
 5, 79, :_reduce_170,
 1, 98, :_reduce_171,
 1, 93, :_reduce_172,
 1, 93, :_reduce_173,
 1, 93, :_reduce_174,
 1, 135, :_reduce_none,
 3, 135, :_reduce_176,
 1, 137, :_reduce_177,
 1, 138, :_reduce_178,
 1, 138, :_reduce_179,
 1, 138, :_reduce_180,
 1, 138, :_reduce_none,
 0, 67, :_reduce_182,
 0, 139, :_reduce_183,
 1, 133, :_reduce_none,
 3, 133, :_reduce_185,
 3, 133, :_reduce_186,
 1, 140, :_reduce_none,
 3, 140, :_reduce_188,
 3, 141, :_reduce_189,
 1, 141, :_reduce_190,
 3, 141, :_reduce_191,
 1, 141, :_reduce_192,
 1, 136, :_reduce_none,
 2, 136, :_reduce_194,
 1, 134, :_reduce_none,
 2, 134, :_reduce_196,
 1, 142, :_reduce_none,
 1, 142, :_reduce_none,
 1, 86, :_reduce_199,
 3, 111, :_reduce_200,
 4, 111, :_reduce_201,
 2, 111, :_reduce_202,
 1, 119, :_reduce_none,
 1, 119, :_reduce_none,
 0, 97, :_reduce_none,
 1, 97, :_reduce_206,
 1, 124, :_reduce_207,
 3, 120, :_reduce_208,
 4, 120, :_reduce_209,
 2, 120, :_reduce_210,
 1, 143, :_reduce_none,
 3, 143, :_reduce_212,
 3, 144, :_reduce_213,
 1, 145, :_reduce_214,
 1, 145, :_reduce_215,
 4, 113, :_reduce_216,
 1, 92, :_reduce_none,
 4, 92, :_reduce_218 ]

racc_reduce_n = 219

racc_shift_n = 364

racc_action_table = [
    60,    65,    60,    65,    95,   120,    95,   215,    97,   186,
    71,   113,   107,   186,   108,    46,   284,  -157,   324,    46,
   185,    60,    65,   149,   185,   190,   325,   109,   153,   190,
   121,    46,   287,    59,   280,    59,   314,    72,   132,    72,
    75,    80,   279,    80,   277,   278,   130,   169,    68,   221,
    77,   105,    77,    51,    59,   160,    53,    51,    72,    75,
    53,    52,    80,    52,    60,    65,    66,    68,   215,    51,
   238,    77,    53,   326,    60,    65,    52,   166,   170,   288,
    52,   153,    52,   172,   156,   157,   158,   159,   161,   289,
   166,   170,    52,    60,    65,    60,    65,   185,   277,   278,
   267,    72,   236,   266,   290,    80,   178,   185,   222,    43,
   130,    72,   236,   181,    77,    80,   243,   291,    41,    42,
   130,   223,   201,   215,    77,    52,    59,   202,   185,   169,
    72,    75,    72,   236,    80,    52,    80,   160,    66,    68,
   292,   130,   178,    77,   180,    77,    60,    65,   143,   320,
    95,    34,    97,   232,    52,    36,    52,   230,   231,  -158,
    60,    65,    11,    16,    71,   172,   156,   157,   158,   159,
   161,   201,   166,   170,   186,   186,   202,    34,   298,    59,
   180,    36,    62,    72,    75,   185,   185,    80,    11,  -159,
   190,   190,    68,    59,   157,   158,    77,    72,    75,   166,
   170,    80,   166,   170,  -154,    66,    68,    52,    60,    65,
    77,    34,    95,    34,    97,    36,   196,    36,   294,    60,
    65,    52,    11,   302,    11,   230,   347,    60,    65,   196,
    88,    95,   282,    97,    60,    65,   230,   231,    95,   143,
    97,    59,   157,   158,   305,    72,    75,   166,   170,    80,
    60,    65,   265,   107,    68,    93,   230,   264,    77,  -156,
    59,    83,   308,  -153,    72,    75,  -155,    59,    80,    52,
   311,    72,    75,    68,   275,    80,   153,    77,   277,   278,
    68,    60,    65,   152,    77,    95,   268,    97,    52,   172,
   156,   157,   158,   159,   161,    52,   166,   170,  -153,    52,
    60,    65,  -156,    88,    95,  -154,    97,    60,    65,   182,
    52,    95,   149,    97,    59,  -171,  -155,   146,    72,    75,
    43,  -157,    80,   183,  -158,    60,    65,    68,    93,    88,
   317,    77,   194,    59,    83,   318,   196,    72,    75,   143,
    59,    80,    52,   199,    72,    75,    68,   200,    80,   206,
    77,   209,   216,    68,    93,   108,   219,    77,   185,   337,
    83,    52,    72,   236,   113,   110,    80,   212,    52,  -155,
    55,   130,    60,    65,    54,    77,    95,   216,    97,    45,
   172,   156,   157,   158,   214,   317,    52,   166,   170,   351,
  -153,    60,    65,   353,    88,    95,  -158,    97,    60,    65,
  -155,  -153,    95,  -156,    97,    59,  -154,   354,   216,    72,
    75,  -206,  -156,    80,   357,   219,    60,    65,    68,    93,
    88,    37,    77,   218,    59,    83,  -154,   nil,    72,    75,
   nil,    59,    80,    52,   nil,    72,    75,    68,   nil,    80,
   nil,    77,   nil,   nil,    68,    93,   nil,   nil,    77,   185,
   nil,    83,    52,    72,   236,   nil,   nil,    80,   nil,    52,
   nil,   nil,   130,    60,    65,   nil,    77,    95,   nil,    97,
   nil,   172,   156,   157,   158,   159,   161,    52,   166,   170,
   nil,    60,    65,   nil,   nil,    88,   nil,   nil,   323,   nil,
   172,   156,   157,   158,   nil,   nil,    59,   166,   170,   nil,
    72,    75,   nil,   nil,    80,   nil,   nil,   nil,   nil,    68,
    93,    60,    65,    77,   185,    95,    83,    97,    72,   236,
   nil,   nil,    80,   nil,    52,   nil,   nil,   130,   nil,   nil,
   nil,    77,   nil,    88,   nil,   nil,   nil,    60,    65,   nil,
   nil,    95,    52,    97,    59,   nil,   nil,   nil,    72,    75,
   nil,   nil,    80,   nil,   nil,   nil,   nil,    68,    93,    60,
    65,    77,   nil,    95,    83,    97,   nil,   nil,   nil,   nil,
    59,   nil,    52,   nil,    72,    75,   nil,   nil,    80,   nil,
   nil,    88,   nil,    68,   nil,    60,    65,    77,   nil,    95,
   nil,    97,    59,   nil,   nil,   nil,    72,    75,    52,   nil,
    80,   nil,   nil,   nil,   nil,    68,    93,    88,   nil,    77,
   nil,   nil,    83,   nil,   nil,    60,    65,   nil,    59,    95,
    52,    97,    72,    75,   nil,   nil,    80,   nil,   nil,   nil,
   nil,    68,    93,   nil,   nil,    77,   nil,    88,    83,   nil,
    60,    65,   nil,   nil,   nil,   nil,    52,   nil,    59,   nil,
   nil,   nil,    72,    75,   nil,   nil,    80,   nil,   nil,   nil,
   nil,    68,    93,   144,   nil,    77,    60,    65,    83,   nil,
    95,   nil,    97,    59,   nil,   nil,    52,    72,    75,   nil,
   nil,    80,   nil,   nil,   nil,    66,    68,   nil,    88,   nil,
    77,   nil,    60,    65,   nil,   nil,    95,   nil,    97,    59,
   nil,    52,   nil,    72,    75,   nil,   nil,    80,   nil,   nil,
   nil,   nil,    68,    93,    88,   nil,    77,    60,    65,    83,
   nil,    95,   nil,    97,   nil,    59,   nil,    52,   nil,    72,
    75,   nil,   nil,    80,   nil,   nil,   nil,   nil,    68,    93,
   nil,   nil,    77,    60,    65,    83,   nil,    95,   nil,    97,
    59,   nil,   nil,    52,    72,    75,   nil,   nil,    80,   nil,
   nil,   nil,   nil,    68,   nil,    88,   nil,    77,   nil,    60,
    65,   nil,   nil,    95,   nil,    97,    59,   nil,    52,   nil,
    72,    75,   nil,   nil,    80,   nil,   nil,    60,    65,    68,
    93,    88,   nil,    77,    60,    65,    83,   nil,    95,   nil,
    97,   nil,    59,   nil,    52,   nil,    72,    75,    60,    65,
    80,   nil,    95,   nil,    97,    68,    93,   nil,   nil,    77,
   185,   nil,    83,   nil,    72,   236,   nil,    59,    80,   nil,
    52,    72,    75,   130,   nil,    80,   nil,    77,    60,    65,
    68,    59,   nil,   nil,    77,    72,    75,   nil,    52,    80,
   nil,   nil,   nil,   nil,    68,    52,    60,    65,    77,   nil,
    95,   307,    97,   nil,   nil,   nil,   nil,   nil,   nil,    52,
   nil,    59,   nil,   nil,   nil,    72,    75,   nil,    88,    80,
   nil,    60,    65,    66,    68,    95,   nil,    97,    77,    59,
   nil,   nil,   nil,    72,    75,   nil,   nil,    80,   nil,    52,
   nil,   nil,    68,    93,   nil,   nil,    77,    60,    65,    83,
   nil,    95,   nil,    97,    59,   nil,   nil,    52,    72,    75,
   nil,   nil,    80,   nil,   nil,   nil,   nil,    68,    60,    65,
   nil,    77,    95,   nil,    97,   nil,   nil,   nil,   nil,   nil,
    59,   nil,    52,   nil,    72,    75,   nil,   nil,    80,   nil,
    88,   nil,   nil,    68,    60,    65,   nil,    77,    95,   nil,
   nil,    59,   nil,   nil,   nil,    72,    75,   nil,    52,    80,
   nil,   nil,   nil,   nil,    68,    93,    60,    65,    77,   nil,
    95,    83,    97,   nil,   nil,   nil,   nil,    59,   nil,    52,
   nil,    72,   236,   nil,   nil,    80,   nil,   nil,    88,   nil,
   130,   nil,    60,    65,    77,   nil,    95,   nil,    97,    59,
   nil,   nil,   nil,    72,    75,    52,   nil,    80,   nil,   nil,
   nil,   nil,    68,    93,    88,   nil,    77,   nil,   nil,    83,
   nil,   nil,    60,    65,   nil,    59,    95,    52,    97,    72,
    75,   nil,   nil,    80,   nil,   nil,   nil,   nil,    68,    93,
   nil,   nil,    77,   nil,    88,    83,   nil,   nil,    60,    65,
   nil,   nil,    95,    52,    97,    59,   nil,   nil,   nil,    72,
    75,   nil,   nil,    80,   nil,   nil,    60,    65,    68,    93,
    88,   nil,    77,   nil,   nil,    83,   nil,   nil,   nil,   nil,
   nil,    59,   nil,    52,   nil,    72,    75,   nil,   nil,    80,
   nil,   nil,   nil,   nil,    68,    93,    60,    65,    77,   185,
    95,    83,    97,    72,   236,   171,   nil,    80,   nil,    52,
   nil,   nil,   130,   nil,   164,   169,    77,   nil,    88,   nil,
   nil,   nil,   nil,   160,   162,   165,   168,    52,   nil,    59,
   nil,   nil,   nil,    72,    75,    60,    65,    80,   nil,    95,
   174,    97,    68,    93,   nil,   nil,    77,   163,   167,    83,
   nil,   172,   156,   157,   158,   159,   161,    52,   166,   170,
    60,    65,   nil,   nil,    95,   nil,    97,   nil,    59,   nil,
   nil,   nil,    72,    75,   nil,   nil,    80,   nil,   nil,   nil,
   nil,    68,    88,   nil,   nil,    77,    60,    65,   nil,   nil,
    95,   nil,    97,    59,   nil,   nil,    52,    72,    75,   nil,
   nil,    80,   nil,   nil,   nil,   nil,    68,    93,    88,   nil,
    77,   nil,   nil,    83,   nil,   nil,   nil,   nil,   nil,    59,
   nil,    52,   nil,    72,    75,   nil,   nil,    80,   226,   227,
   nil,   nil,    68,    93,   nil,   nil,    77,   nil,   nil,    83,
   nil,   164,   169,   nil,   nil,   nil,   nil,    52,   nil,   nil,
   160,   162,   165,   168,   164,   169,   nil,   nil,   nil,   nil,
   nil,   nil,   245,   160,   162,   165,   168,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   163,   167,   nil,   nil,   172,   156,
   157,   158,   159,   161,   nil,   166,   170,   163,   167,   nil,
   nil,   172,   156,   157,   158,   159,   161,   nil,   166,   170,
   164,   169,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   160,
   162,   165,   168,   164,   169,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   160,   162,   165,   168,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   163,   167,   nil,   nil,   172,   156,   157,
   158,   159,   161,   nil,   166,   170,   163,   167,   nil,   nil,
   172,   156,   157,   158,   159,   161,   nil,   166,   170,   164,
   169,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   160,   162,
   165,   168,   164,   169,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   160,   162,   165,   168,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   167,   nil,   nil,   172,   156,   157,   158,
   159,   161,   nil,   166,   170,   nil,   nil,   nil,   nil,   172,
   156,   157,   158,   159,   161,   nil,   166,   170,   164,   169,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   160,   162,   165,
   168,   169,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   160,
   169,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   160,   nil,
   nil,   163,   167,   nil,   nil,   172,   156,   157,   158,   159,
   161,   nil,   166,   170,   262,   nil,   nil,   172,   156,   157,
   158,   159,   161,   nil,   166,   170,   172,   156,   157,   158,
   159,   161,   nil,   166,   170,    26,   338,    30,     1,   nil,
     8,    12,   nil,    19,   nil,    24,   nil,    28,   nil,     2,
   nil,   nil,    11,    16,   nil,   315,   nil,    26,   nil,    30,
     1,   nil,     8,    12,   nil,    19,   nil,    24,   nil,    28,
   nil,     2,   nil,   nil,    11,    16,    26,   343,    30,     1,
   nil,     8,    12,   nil,    19,   nil,    24,   nil,    28,   nil,
     2,   nil,   nil,    11,    16,   nil,   344,   nil,    26,   nil,
    30,     1,   nil,     8,    12,   nil,    19,   nil,    24,   nil,
    28,   nil,     2,   nil,   nil,    11,    16,    26,   297,    30,
     1,   nil,     8,    12,   nil,    19,   nil,    24,   nil,    28,
   nil,     2,   nil,   nil,    11,    16,   nil,   355,   nil,    26,
   nil,    30,     1,   nil,     8,    12,   nil,    19,   nil,    24,
   nil,    28,   nil,     2,   nil,   nil,    11,    16,    26,   359,
    30,     1,   nil,     8,    12,   nil,    19,   nil,    24,   nil,
    28,   nil,     2,   nil,   nil,    11,    16,   nil,   361,   nil,
    26,   nil,    30,     1,   nil,     8,    12,   nil,    19,   nil,
    24,   nil,    28,   nil,     2,   nil,   nil,    11,    16,    26,
   286,    30,     1,   nil,     8,    12,   nil,    19,   nil,    24,
   nil,    28,   nil,     2,   nil,   nil,    11,    16,   nil,   362,
   nil,    26,   nil,    30,     1,   nil,     8,    12,   nil,    19,
   nil,    24,   nil,    28,   nil,     2,   nil,   nil,    11,    16,
    26,   363,    30,     1,   nil,     8,    12,   nil,    19,   nil,
    24,   nil,    28,   nil,     2,   nil,   nil,    11,    16,   nil,
   nil,   nil,    26,   nil,    30,     1,   nil,     8,    12,   nil,
    19,   nil,    24,   nil,    28,   nil,     2,   nil,   nil,    11,
    16,    26,   nil,    30,     1,   nil,     8,    12,   nil,    19,
   nil,    24,   nil,    28,   nil,     2,   nil,   nil,    11,    16,
    26,   nil,    30,     1,   nil,     8,    12,   nil,    19,   nil,
    24,   nil,    28,   nil,     2,   nil,   nil,    11,    16 ]

racc_action_check = [
    54,    54,   146,   146,    54,    48,   146,   143,   146,   105,
    75,    44,    31,   276,    31,    19,   198,    86,   271,   121,
   105,   149,   149,   244,   276,   105,   271,    31,    75,   276,
    48,   120,   201,    54,   191,   146,   244,    54,    54,   146,
   146,    54,   191,   146,   198,   198,    54,   255,   146,   143,
    54,    31,   146,    19,   149,   255,    19,   121,   149,   149,
   121,    54,   149,   146,   152,   152,   149,   149,   132,   120,
   152,   149,   120,   274,   348,   348,    19,   248,   248,   202,
   121,   132,   149,   255,   255,   255,   255,   255,   255,   203,
   255,   255,   120,   153,   153,   324,   324,   152,   274,   274,
   176,   152,   152,   176,   204,   152,    97,   348,   145,     8,
   152,   348,   348,    97,   152,   348,   153,   204,     8,     8,
   348,   145,   113,   196,   348,   152,   153,   113,   324,   258,
   153,   153,   324,   324,   153,   348,   324,   258,   153,   153,
   208,   324,   266,   153,    97,   324,   311,   311,   194,   266,
   311,     5,   311,   151,   153,     5,   324,   151,   151,    85,
    24,    24,     5,     5,    24,   258,   258,   258,   258,   258,
   258,   290,   258,   258,   186,   109,   290,    12,   213,   311,
   266,    12,    24,   311,   311,   186,   109,   311,    12,    84,
   186,   109,   311,    24,   246,   246,   311,    24,    24,   246,
   246,    24,   247,   247,    82,    24,    24,   311,    26,    26,
    24,   209,    26,     1,    26,   209,   216,     1,   209,    30,
    30,    24,   209,   217,     1,   313,   313,    28,    28,   218,
    26,    28,   195,    28,   288,   288,   195,   195,   288,   219,
   288,    26,   263,   263,   220,    26,    26,   263,   263,    26,
   183,   183,   175,    81,    26,    26,   175,   175,    26,    79,
    28,    26,   224,    78,    28,    28,    91,   288,    28,    26,
   235,   288,   288,    28,   187,   288,   236,    28,   187,   187,
   288,   156,   156,    74,   288,   156,   179,   156,    28,   250,
   250,   250,   250,   250,   250,   288,   250,   250,    98,   170,
   287,   287,    99,   156,   287,   101,   287,   157,   157,   102,
   166,   157,    70,   157,   156,    68,    67,    63,   156,   156,
    59,    58,   156,   103,    57,   280,   280,   156,   156,   157,
   262,   156,   106,   287,   156,   264,   108,   287,   287,    55,
   157,   287,   156,   110,   157,   157,   287,   112,   157,   116,
   287,   117,   197,   157,   157,    40,   281,   157,   280,   283,
   157,   287,   280,   280,    35,    33,   280,   122,   157,   127,
    23,   280,    41,    41,    20,   280,    41,   303,    41,    13,
   251,   251,   251,   251,   131,   315,   280,   251,   251,   317,
   133,    43,    43,   325,    41,    43,   328,    43,    42,    42,
   330,   331,    42,   333,    42,    41,   334,   336,   134,    41,
    41,   347,   135,    41,   349,   139,   279,   279,    41,    41,
    42,     2,    41,   138,    43,    41,   137,   nil,    43,    43,
   nil,    42,    43,    41,   nil,    42,    42,    43,   nil,    42,
   nil,    43,   nil,   nil,    42,    42,   nil,   nil,    42,   279,
   nil,    42,    43,   279,   279,   nil,   nil,   279,   nil,    42,
   nil,   nil,   279,    45,    45,   nil,   279,    45,   nil,    45,
   nil,   259,   259,   259,   259,   259,   259,   279,   259,   259,
   nil,   269,   269,   nil,   nil,    45,   nil,   nil,   269,   nil,
   249,   249,   249,   249,   nil,   nil,    45,   249,   249,   nil,
    45,    45,   nil,   nil,    45,   nil,   nil,   nil,   nil,    45,
    45,   158,   158,    45,   269,   158,    45,   158,   269,   269,
   nil,   nil,   269,   nil,    45,   nil,   nil,   269,   nil,   nil,
   nil,   269,   nil,   158,   nil,   nil,   nil,   268,   268,   nil,
   nil,   268,   269,   268,   158,   nil,   nil,   nil,   158,   158,
   nil,   nil,   158,   nil,   nil,   nil,   nil,   158,   158,   159,
   159,   158,   nil,   159,   158,   159,   nil,   nil,   nil,   nil,
   268,   nil,   158,   nil,   268,   268,   nil,   nil,   268,   nil,
   nil,   159,   nil,   268,   nil,   160,   160,   268,   nil,   160,
   nil,   160,   159,   nil,   nil,   nil,   159,   159,   268,   nil,
   159,   nil,   nil,   nil,   nil,   159,   159,   160,   nil,   159,
   nil,   nil,   159,   nil,   nil,   161,   161,   nil,   160,   161,
   159,   161,   160,   160,   nil,   nil,   160,   nil,   nil,   nil,
   nil,   160,   160,   nil,   nil,   160,   nil,   161,   160,   nil,
    62,    62,   nil,   nil,   nil,   nil,   160,   nil,   161,   nil,
   nil,   nil,   161,   161,   nil,   nil,   161,   nil,   nil,   nil,
   nil,   161,   161,    62,   nil,   161,   162,   162,   161,   nil,
   162,   nil,   162,    62,   nil,   nil,   161,    62,    62,   nil,
   nil,    62,   nil,   nil,   nil,    62,    62,   nil,   162,   nil,
    62,   nil,    65,    65,   nil,   nil,    65,   nil,    65,   162,
   nil,    62,   nil,   162,   162,   nil,   nil,   162,   nil,   nil,
   nil,   nil,   162,   162,    65,   nil,   162,   107,   107,   162,
   nil,   107,   nil,   107,   nil,    65,   nil,   162,   nil,    65,
    65,   nil,   nil,    65,   nil,   nil,   nil,   nil,    65,    65,
   nil,   nil,    65,   163,   163,    65,   nil,   163,   nil,   163,
   107,   nil,   nil,    65,   107,   107,   nil,   nil,   107,   nil,
   nil,   nil,   nil,   107,   nil,   163,   nil,   107,   nil,   169,
   169,   nil,   nil,   169,   nil,   169,   163,   nil,   107,   nil,
   163,   163,   nil,   nil,   163,   nil,   nil,   238,   238,   163,
   163,   169,   nil,   163,    71,    71,   163,   nil,    71,   nil,
    71,   nil,   169,   nil,   163,   nil,   169,   169,   233,   233,
   169,   nil,   233,   nil,   233,   169,   169,   nil,   nil,   169,
   238,   nil,   169,   nil,   238,   238,   nil,    71,   238,   nil,
   169,    71,    71,   238,   nil,    71,   nil,   238,   222,   222,
    71,   233,   nil,   nil,    71,   233,   233,   nil,   238,   233,
   nil,   nil,   nil,   nil,   233,    71,   226,   226,   233,   nil,
   226,   222,   226,   nil,   nil,   nil,   nil,   nil,   nil,   233,
   nil,   222,   nil,   nil,   nil,   222,   222,   nil,   226,   222,
   nil,   221,   221,   222,   222,   221,   nil,   221,   222,   226,
   nil,   nil,   nil,   226,   226,   nil,   nil,   226,   nil,   222,
   nil,   nil,   226,   226,   nil,   nil,   226,   215,   215,   226,
   nil,   215,   nil,   215,   221,   nil,   nil,   226,   221,   221,
   nil,   nil,   221,   nil,   nil,   nil,   nil,   221,    83,    83,
   nil,   221,    83,   nil,    83,   nil,   nil,   nil,   nil,   nil,
   215,   nil,   221,   nil,   215,   215,   nil,   nil,   215,   nil,
    83,   nil,   nil,   215,   214,   214,   nil,   215,   214,   nil,
   nil,    83,   nil,   nil,   nil,    83,    83,   nil,   215,    83,
   nil,   nil,   nil,   nil,    83,    83,   165,   165,    83,   nil,
   165,    83,   165,   nil,   nil,   nil,   nil,   214,   nil,    83,
   nil,   214,   214,   nil,   nil,   214,   nil,   nil,   165,   nil,
   214,   nil,   167,   167,   214,   nil,   167,   nil,   167,   165,
   nil,   nil,   nil,   165,   165,   214,   nil,   165,   nil,   nil,
   nil,   nil,   165,   165,   167,   nil,   165,   nil,   nil,   165,
   nil,   nil,    88,    88,   nil,   167,    88,   165,    88,   167,
   167,   nil,   nil,   167,   nil,   nil,   nil,   nil,   167,   167,
   nil,   nil,   167,   nil,    88,   167,   nil,   nil,   168,   168,
   nil,   nil,   168,   167,   168,    88,   nil,   nil,   nil,    88,
    88,   nil,   nil,    88,   nil,   nil,   182,   182,    88,    88,
   168,   nil,    88,   nil,   nil,    88,   nil,   nil,   nil,   nil,
   nil,   168,   nil,    88,   nil,   168,   168,   nil,   nil,   168,
   nil,   nil,   nil,   nil,   168,   168,    93,    93,   168,   182,
    93,   168,    93,   182,   182,    89,   nil,   182,   nil,   168,
   nil,   nil,   182,   nil,    89,    89,   182,   nil,    93,   nil,
   nil,   nil,   nil,    89,    89,    89,    89,   182,   nil,    93,
   nil,   nil,   nil,    93,    93,    95,    95,    93,   nil,    95,
    95,    95,    93,    93,   nil,   nil,    93,    89,    89,    93,
   nil,    89,    89,    89,    89,    89,    89,    93,    89,    89,
   172,   172,   nil,   nil,   172,   nil,   172,   nil,    95,   nil,
   nil,   nil,    95,    95,   nil,   nil,    95,   nil,   nil,   nil,
   nil,    95,   172,   nil,   nil,    95,   164,   164,   nil,   nil,
   164,   nil,   164,   172,   nil,   nil,    95,   172,   172,   nil,
   nil,   172,   nil,   nil,   nil,   nil,   172,   172,   164,   nil,
   172,   nil,   nil,   172,   nil,   nil,   nil,   nil,   nil,   164,
   nil,   172,   nil,   164,   164,   nil,   nil,   164,   148,   148,
   nil,   nil,   164,   164,   nil,   nil,   164,   nil,   nil,   164,
   nil,   148,   148,   nil,   nil,   nil,   nil,   164,   nil,   nil,
   148,   148,   148,   148,   155,   155,   nil,   nil,   nil,   nil,
   nil,   nil,   155,   155,   155,   155,   155,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   148,   148,   nil,   nil,   148,   148,
   148,   148,   148,   148,   nil,   148,   148,   155,   155,   nil,
   nil,   155,   155,   155,   155,   155,   155,   nil,   155,   155,
   114,   114,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   114,
   114,   114,   114,   118,   118,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   118,   118,   118,   118,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   114,   114,   nil,   nil,   114,   114,   114,
   114,   114,   114,   nil,   114,   114,   118,   118,   nil,   nil,
   118,   118,   118,   118,   118,   118,   nil,   118,   118,   253,
   253,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   253,   253,
   253,   253,   257,   257,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   257,   257,   257,   257,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   253,   nil,   nil,   253,   253,   253,   253,
   253,   253,   nil,   253,   253,   nil,   nil,   nil,   nil,   257,
   257,   257,   257,   257,   257,   nil,   257,   257,   115,   115,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   115,   115,   115,
   115,   254,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   254,
   252,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   252,   nil,
   nil,   115,   115,   nil,   nil,   115,   115,   115,   115,   115,
   115,   nil,   115,   115,   171,   nil,   nil,   254,   254,   254,
   254,   254,   254,   nil,   254,   254,   252,   252,   252,   252,
   252,   252,   nil,   252,   252,   171,   285,   171,   171,   nil,
   171,   171,   nil,   171,   nil,   171,   nil,   171,   nil,   171,
   nil,   nil,   171,   171,   nil,   261,   nil,   285,   nil,   285,
   285,   nil,   285,   285,   nil,   285,   nil,   285,   nil,   285,
   nil,   285,   nil,   nil,   285,   285,   261,   292,   261,   261,
   nil,   261,   261,   nil,   261,   nil,   261,   nil,   261,   nil,
   261,   nil,   nil,   261,   261,   nil,   296,   nil,   292,   nil,
   292,   292,   nil,   292,   292,   nil,   292,   nil,   292,   nil,
   292,   nil,   292,   nil,   nil,   292,   292,   296,   212,   296,
   296,   nil,   296,   296,   nil,   296,   nil,   296,   nil,   296,
   nil,   296,   nil,   nil,   296,   296,   nil,   342,   nil,   212,
   nil,   212,   212,   nil,   212,   212,   nil,   212,   nil,   212,
   nil,   212,   nil,   212,   nil,   nil,   212,   212,   342,   351,
   342,   342,   nil,   342,   342,   nil,   342,   nil,   342,   nil,
   342,   nil,   342,   nil,   nil,   342,   342,   nil,   353,   nil,
   351,   nil,   351,   351,   nil,   351,   351,   nil,   351,   nil,
   351,   nil,   351,   nil,   351,   nil,   nil,   351,   351,   353,
   200,   353,   353,   nil,   353,   353,   nil,   353,   nil,   353,
   nil,   353,   nil,   353,   nil,   nil,   353,   353,   nil,   358,
   nil,   200,   nil,   200,   200,   nil,   200,   200,   nil,   200,
   nil,   200,   nil,   200,   nil,   200,   nil,   nil,   200,   200,
   358,   360,   358,   358,   nil,   358,   358,   nil,   358,   nil,
   358,   nil,   358,   nil,   358,   nil,   nil,   358,   358,   nil,
   nil,   nil,   360,   nil,   360,   360,   nil,   360,   360,   nil,
   360,   nil,   360,   nil,   360,   nil,   360,   nil,   nil,   360,
   360,     4,   nil,     4,     4,   nil,     4,     4,   nil,     4,
   nil,     4,   nil,     4,   nil,     4,   nil,   nil,     4,     4,
     0,   nil,     0,     0,   nil,     0,     0,   nil,     0,   nil,
     0,   nil,     0,   nil,     0,   nil,   nil,     0,     0 ]

racc_action_pointer = [
  1730,   177,   377,   nil,  1711,   115,   nil,   nil,   103,   nil,
   nil,   nil,   141,   364,   nil,   nil,   nil,   nil,   nil,    13,
   366,   nil,   nil,   362,   158,   nil,   206,   nil,   225,   nil,
   217,     6,   nil,   365,   nil,   340,   nil,   nil,   nil,   nil,
   347,   370,   396,   389,   -13,   461,   nil,   nil,    -7,   nil,
   nil,   nil,   nil,   nil,    -2,   299,   nil,   301,   298,   314,
   nil,   nil,   638,   311,   nil,   690,   nil,   293,   309,   nil,
   300,   792,   nil,   nil,   260,     4,   nil,   nil,   240,   236,
   nil,   247,   181,   926,   166,   136,    -6,   nil,  1030,  1107,
   nil,   243,   nil,  1104,   nil,  1143,   nil,   104,   275,   279,
   nil,   282,   301,   311,   nil,   -15,   324,   715,   296,   151,
   343,   nil,   339,    87,  1293,  1411,   342,   314,  1306,   nil,
    29,    17,   359,   nil,   nil,   nil,   nil,   346,   nil,   nil,
   nil,   343,    57,   367,   396,   389,   nil,   403,   403,   403,
   nil,   nil,   nil,    -4,   nil,    96,     0,   nil,  1234,    19,
   nil,   146,    62,    91,   nil,  1247,   279,   305,   509,   557,
   583,   613,   664,   741,  1194,   974,   247,  1000,  1056,   767,
   236,  1465,  1168,   nil,   nil,   245,    91,   nil,   nil,   275,
   nil,   nil,  1074,   248,   nil,   nil,   150,   228,   nil,   nil,
   nil,    16,   nil,   nil,   108,   225,   112,   340,    -6,   nil,
  1651,    17,    64,    64,    92,   nil,   nil,   nil,   132,   175,
   nil,   nil,  1569,   169,   952,   905,   176,   214,   189,   199,
   235,   879,   836,   nil,   255,   nil,   854,   nil,   nil,   nil,
   nil,   nil,   nil,   806,   nil,   259,   252,   nil,   785,   nil,
   nil,   nil,   nil,   nil,    11,   nil,   138,   141,    16,   436,
   235,   326,  1432,  1352,  1423,    29,   nil,  1365,   111,   417,
   nil,  1506,   299,   186,   328,   nil,   140,   nil,   535,   479,
   nil,     6,   nil,   nil,    48,   nil,   -11,   nil,   nil,   414,
   323,   344,   nil,   350,   nil,  1487,   nil,   298,   232,   nil,
   136,   nil,  1528,   nil,   nil,   nil,  1547,   nil,   nil,   nil,
   nil,   nil,   nil,   365,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   144,   nil,   214,   nil,   354,   nil,   381,   nil,   nil,
   nil,   nil,   nil,   nil,    93,   385,   nil,   nil,   373,   nil,
   377,   378,   nil,   380,   383,   nil,   398,   nil,   nil,   nil,
   nil,   nil,  1588,   nil,   nil,   nil,   nil,   402,    72,   405,
   nil,  1610,   nil,  1629,   nil,   nil,   nil,   nil,  1670,   nil,
  1692,   nil,   nil,   nil ]

racc_action_default = [
  -182,  -219,   -40,   -13,    -1,  -219,   -14,    -2,  -219,   -15,
    -3,  -173,  -174,  -219,   -16,    -5,  -171,   -17,    -6,  -219,
  -219,    -7,    -8,  -219,  -172,    -9,  -219,   -10,  -219,   -11,
  -219,  -219,   -12,  -219,  -174,  -182,  -172,   -41,    -4,   -39,
  -219,  -219,  -219,  -219,  -182,  -219,  -179,  -181,  -182,  -175,
  -177,  -178,  -207,  -180,   -75,   -82,  -159,   -29,   -30,  -199,
  -107,   -31,  -219,  -217,  -161,  -219,   -34,   -32,   -64,   -33,
   -21,  -219,  -112,   -22,  -219,   -63,   -23,   -62,   -26,   -27,
  -160,  -219,   -28,  -219,  -104,   -96,  -103,   -99,  -219,  -219,
   -97,   -93,  -101,  -219,  -120,  -219,  -102,  -219,   -94,   -98,
  -100,   -95,  -219,  -164,  -162,  -182,   -43,  -219,   -75,  -182,
  -219,  -184,  -219,  -183,   -72,   -74,  -219,  -182,   -73,  -193,
  -219,  -219,  -219,  -158,  -157,   -70,   -68,   -65,   -76,   -71,
   -64,   -60,   -63,   -66,  -205,   -69,   -58,   -67,  -219,  -205,
   -80,   -81,   -83,  -219,   -20,  -219,  -219,  -108,  -219,  -219,
   -85,  -219,  -219,  -219,  -129,  -219,  -219,  -219,  -219,  -219,
  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,
  -219,  -219,  -219,  -136,  -202,  -219,  -219,  -211,  -215,  -219,
  -214,  -210,  -219,  -219,   -46,  -199,  -182,  -219,   -47,   -49,
   -63,  -219,   -56,   -55,   -82,  -219,  -219,  -205,  -219,   364,
  -219,  -192,  -190,  -219,  -219,  -187,  -216,  -195,  -219,  -219,
  -176,  -194,  -219,  -219,   -61,  -219,  -206,  -219,   -75,  -206,
  -219,  -219,  -219,   -18,  -219,  -109,  -219,  -110,   -24,   -25,
  -203,  -204,  -113,  -219,  -155,  -219,   -63,  -153,  -219,  -147,
  -156,  -148,  -154,  -106,  -219,  -139,  -124,  -126,  -125,  -127,
  -131,  -128,  -133,  -138,  -135,  -132,  -121,  -137,  -134,  -130,
  -122,  -219,  -117,  -123,  -204,  -200,  -219,  -208,  -219,  -219,
  -141,  -219,  -145,  -163,  -219,   -44,  -219,   -52,   -51,  -219,
  -219,  -205,  -114,  -219,   -45,  -219,  -166,  -219,  -219,  -185,
  -219,  -186,  -219,  -197,  -198,  -196,  -219,  -170,   -35,   -59,
   -78,   -77,   -36,  -205,   -84,   -38,   -79,   -19,  -218,  -111,
   -86,  -219,  -150,  -205,  -105,  -117,  -116,  -219,  -201,  -212,
  -209,  -213,  -142,  -140,  -219,  -219,   -50,   -48,   -90,   -91,
   -87,   -88,   -53,   -92,   -89,   -54,  -219,   -37,  -165,  -191,
  -189,  -188,  -219,  -168,  -169,   -57,  -152,  -204,  -219,  -219,
  -115,  -219,  -146,  -219,   -42,  -167,  -151,  -149,  -219,  -119,
  -219,  -144,  -118,  -143 ]

racc_goto_table = [
    31,    61,    35,    13,    31,    40,    23,    13,   235,   241,
    23,   205,   134,    44,     4,   217,    47,   177,    69,   139,
   220,    70,   147,    67,    38,   270,   140,     7,    49,   104,
    76,   126,   187,   136,   228,   125,   198,   316,   272,    61,
   151,   112,   332,   335,   106,   348,   269,   304,   129,   225,
   117,   239,    39,   127,   313,   103,    69,   131,   208,   145,
    48,    67,   111,   122,   175,   327,   197,   211,    76,   203,
   204,   111,   213,    58,   295,   119,   195,   176,   283,    33,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   350,   nil,   nil,   nil,   235,   312,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   124,   nil,   nil,   nil,   228,   nil,   nil,
   nil,    58,   322,   274,   nil,   nil,   nil,    47,    47,   nil,
   nil,   nil,   nil,   nil,   nil,   272,    61,   nil,   nil,   210,
    61,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    69,   207,   nil,   nil,    69,    67,   nil,
   244,   234,    67,   nil,   nil,   229,   nil,   nil,   281,    76,
   nil,   nil,   336,   256,   nil,   140,   nil,   260,   nil,   nil,
   nil,    31,   nil,   nil,    13,   nil,   303,    23,   nil,    56,
   352,   234,   273,   309,   345,   261,   319,   301,   341,   nil,
   140,   126,    57,   299,   349,   125,   nil,   nil,    58,    61,
    31,   124,    58,    13,   235,   356,    23,   nil,   129,    56,
   293,   nil,    31,   127,   285,    13,    69,    56,    23,   nil,
   nil,    67,   123,   nil,   nil,   nil,   296,   nil,   229,   nil,
    57,   124,   nil,   nil,   nil,   nil,   nil,   234,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    78,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   329,   329,   nil,    79,
   nil,    31,   nil,   124,    13,   nil,   nil,    23,   234,   nil,
   nil,    58,   nil,    82,   nil,   nil,   133,   nil,   330,   330,
   nil,    38,   nil,   nil,    78,    31,   nil,   124,    13,   135,
   nil,    23,    31,   nil,   nil,    13,    31,    79,    23,    13,
   nil,   nil,    23,   137,    56,    38,   342,    56,    56,   nil,
   nil,    82,   nil,   nil,   nil,   nil,    38,    57,   124,   nil,
   123,    57,   nil,   234,   nil,   nil,   nil,   192,   124,   124,
   nil,   192,   nil,   nil,   nil,   nil,   nil,    56,   nil,   nil,
   193,   nil,    31,   nil,   193,    13,   nil,   234,    23,   nil,
   123,    31,   nil,    31,    13,   nil,    13,    23,    31,    23,
    31,    13,    38,    13,    23,   358,    23,   360,   nil,    56,
   nil,    78,   nil,   124,   237,    78,   102,    56,    38,   nil,
    38,   nil,   123,   nil,    79,   nil,   nil,   240,    79,   nil,
    57,   116,   nil,    56,   nil,   nil,   nil,   124,    82,   nil,
   nil,   242,    82,   nil,   237,   nil,   123,   nil,   192,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   240,   nil,   150,
   nil,   193,   nil,   nil,    56,   nil,   nil,   nil,   nil,   nil,
   nil,   242,   nil,   nil,    56,    56,   133,   123,   nil,   nil,
   nil,   nil,   nil,   150,    78,   nil,   nil,   328,   328,   135,
   nil,   nil,   nil,   nil,   nil,   150,   nil,    79,   nil,   nil,
   237,   nil,   nil,   137,   nil,   nil,   nil,   nil,   nil,    89,
   nil,    82,   nil,   240,   nil,   nil,   nil,   nil,   nil,    56,
   nil,   nil,   nil,   nil,   114,   115,   nil,   242,   118,   nil,
   nil,   237,   123,   nil,   224,   nil,   nil,   nil,   192,   nil,
   nil,   331,   331,    56,   240,   nil,   nil,   nil,   nil,   nil,
   nil,   193,   nil,   nil,   333,   333,   123,   nil,   242,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   154,   nil,   334,   334,
   nil,   155,   nil,   nil,   nil,   nil,   173,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   237,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   240,
   nil,   nil,   nil,   300,   nil,   nil,   nil,   nil,   nil,   306,
   237,   nil,   nil,   242,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   310,   nil,   240,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   242,   nil,   246,
   247,   248,   249,   250,   251,   252,   253,   254,   255,   nil,
   257,   258,   259,   nil,   nil,   263,   321,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   339,   340,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   346 ]

racc_goto_check = [
    34,    26,    29,    49,    34,    34,    20,    49,    64,    66,
    20,    77,    32,    29,     2,    33,    60,    80,    28,    35,
    33,    18,    57,    27,     4,    62,    50,     3,    73,    27,
    20,    26,    38,    44,    19,    47,    38,    59,    64,    26,
    54,    69,    43,    43,    37,    55,    61,    53,    28,    58,
    69,    65,     5,    27,    67,    68,    28,    30,    70,    18,
    71,    27,     3,    72,    54,    39,    32,    74,    20,    75,
    76,     3,    31,    25,    78,     3,    54,    79,    33,     1,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    59,   nil,   nil,   nil,    64,    66,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,   nil,    19,   nil,   nil,
   nil,    25,    62,    38,   nil,   nil,   nil,    60,    60,   nil,
   nil,   nil,   nil,   nil,   nil,    64,    26,   nil,   nil,    73,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    28,     3,   nil,   nil,    28,    27,   nil,
    18,    27,    27,   nil,   nil,    20,   nil,   nil,    35,    20,
   nil,   nil,    33,    60,   nil,    50,   nil,    60,   nil,   nil,
   nil,    34,   nil,   nil,    49,   nil,    32,    20,   nil,    46,
    64,    27,    27,    57,    33,     2,    80,    50,    77,   nil,
    50,    26,    24,    44,    33,    47,   nil,   nil,    25,    26,
    34,    25,    25,    49,    64,    66,    20,   nil,    28,    46,
    29,   nil,    34,    27,     2,    49,    28,    46,    20,   nil,
   nil,    27,    24,   nil,   nil,   nil,     2,   nil,    20,   nil,
    24,    25,   nil,   nil,   nil,   nil,   nil,    27,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26,    26,   nil,    22,
   nil,    34,   nil,    25,    49,   nil,   nil,    20,    27,   nil,
   nil,    25,   nil,    23,   nil,   nil,    21,   nil,    27,    27,
   nil,     4,   nil,   nil,    21,    34,   nil,    25,    49,    22,
   nil,    20,    34,   nil,   nil,    49,    34,    22,    20,    49,
   nil,   nil,    20,    23,    46,     4,     2,    46,    46,   nil,
   nil,    23,   nil,   nil,   nil,   nil,     4,    24,    25,   nil,
    24,    24,   nil,    27,   nil,   nil,   nil,    21,    25,    25,
   nil,    21,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,
    22,   nil,    34,   nil,    22,    49,   nil,    27,    20,   nil,
    24,    34,   nil,    34,    49,   nil,    49,    20,    34,    20,
    34,    49,     4,    49,    20,     2,    20,     2,   nil,    46,
   nil,    21,   nil,    25,    21,    21,    51,    46,     4,   nil,
     4,   nil,    24,   nil,    22,   nil,   nil,    22,    22,   nil,
    24,    51,   nil,    46,   nil,   nil,   nil,    25,    23,   nil,
   nil,    23,    23,   nil,    21,   nil,    24,   nil,    21,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,    51,
   nil,    22,   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,
   nil,    23,   nil,   nil,    46,    46,    21,    24,   nil,   nil,
   nil,   nil,   nil,    51,    21,   nil,   nil,    24,    24,    22,
   nil,   nil,   nil,   nil,   nil,    51,   nil,    22,   nil,   nil,
    21,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,    48,
   nil,    23,   nil,    22,   nil,   nil,   nil,   nil,   nil,    46,
   nil,   nil,   nil,   nil,    48,    48,   nil,    23,    48,   nil,
   nil,    21,    24,   nil,    51,   nil,   nil,   nil,    21,   nil,
   nil,    21,    21,    46,    22,   nil,   nil,   nil,   nil,   nil,
   nil,    22,   nil,   nil,    22,    22,    24,   nil,    23,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    48,   nil,    23,    23,
   nil,    48,   nil,   nil,   nil,   nil,    48,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,    51,   nil,   nil,   nil,   nil,   nil,    51,
    21,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    51,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,    48,
    48,    48,    48,    48,    48,    48,    48,    48,    48,   nil,
    48,    48,    48,   nil,   nil,    48,    51,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    51,    51,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51 ]

racc_goto_pointer = [
   nil,    79,    14,    27,    20,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    -3,  -115,
     6,   222,   235,   249,   168,    49,   -23,    -1,    -6,     1,
     3,   -59,   -42,  -119,     0,   -36,   nil,    13,   -73,  -211,
   nil,   nil,   nil,  -237,   -21,   nil,   155,   -19,   443,     3,
   -29,   348,   nil,  -172,   -31,  -268,   nil,   -43,   -99,  -225,
    -3,  -136,  -157,   nil,  -144,  -101,  -143,  -184,    25,     6,
   -59,    41,    15,     9,   -54,   -44,   -43,  -102,  -135,   -20,
   -80,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   184,    10,    15,    18,    21,    22,    25,
    27,    29,    32,     3,     6,     9,    14,    17,   nil,    73,
    96,    98,    99,   101,    85,    86,    90,    91,    92,    20,
   nil,   nil,   nil,   nil,    81,   nil,     5,   nil,   nil,   188,
   276,   189,   191,   nil,   nil,   138,    84,    87,   148,    63,
   128,    94,   141,   142,   nil,   233,   100,   nil,   nil,   nil,
    64,   nil,   nil,   271,    74,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,
   nil,   179 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :STRING => 2,
 :DQPRE => 3,
 :DQMID => 4,
 :DQPOST => 5,
 :LBRACK => 6,
 :RBRACK => 7,
 :LBRACE => 8,
 :RBRACE => 9,
 :SYMBOL => 10,
 :FARROW => 11,
 :COMMA => 12,
 :TRUE => 13,
 :FALSE => 14,
 :EQUALS => 15,
 :APPENDS => 16,
 :LESSEQUAL => 17,
 :NOTEQUAL => 18,
 :DOT => 19,
 :COLON => 20,
 :LLCOLLECT => 21,
 :RRCOLLECT => 22,
 :QMARK => 23,
 :LPAREN => 24,
 :RPAREN => 25,
 :ISEQUAL => 26,
 :GREATEREQUAL => 27,
 :GREATERTHAN => 28,
 :LESSTHAN => 29,
 :IF => 30,
 :ELSE => 31,
 :IMPORT => 32,
 :DEFINE => 33,
 :ELSIF => 34,
 :VARIABLE => 35,
 :CLASS => 36,
 :INHERITS => 37,
 :NODE => 38,
 :BOOLEAN => 39,
 :NAME => 40,
 :SEMIC => 41,
 :CASE => 42,
 :DEFAULT => 43,
 :AT => 44,
 :LCOLLECT => 45,
 :RCOLLECT => 46,
 :CLASSNAME => 47,
 :CLASSREF => 48,
 :NOT => 49,
 :OR => 50,
 :AND => 51,
 :UNDEF => 52,
 :PARROW => 53,
 :PLUS => 54,
 :MINUS => 55,
 :TIMES => 56,
 :DIV => 57,
 :LSHIFT => 58,
 :RSHIFT => 59,
 :UMINUS => 60,
 :MATCH => 61,
 :NOMATCH => 62,
 :REGEX => 63 }

racc_use_result_var = true

racc_nt_base = 64

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'STRING',
'DQPRE',
'DQMID',
'DQPOST',
'LBRACK',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'APPENDS',
'LESSEQUAL',
'NOTEQUAL',
'DOT',
'COLON',
'LLCOLLECT',
'RRCOLLECT',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'AT',
'LCOLLECT',
'RCOLLECT',
'CLASSNAME',
'CLASSREF',
'NOT',
'OR',
'AND',
'UNDEF',
'PARROW',
'PLUS',
'MINUS',
'TIMES',
'DIV',
'LSHIFT',
'RSHIFT',
'UMINUS',
'MATCH',
'NOMATCH',
'REGEX',
'$start',
'program',
'statements',
'nil',
'statement',
'resource',
'virtualresource',
'collection',
'assignment',
'casestatement',
'ifstatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'resourceoverride',
'append',
'funcvalues',
'namestring',
'resourceref',
'name',
'variable',
'type',
'boolean',
'funcrvalue',
'selector',
'quotedtext',
'hasharrayaccesses',
'classname',
'resourceinstances',
'endsemi',
'params',
'endcomma',
'classref',
'anyparams',
'at',
'collectrhand',
'collstatements',
'collstatement',
'colljoin',
'collexpr',
'colllval',
'simplervalue',
'resourceinst',
'resourcename',
'undef',
'array',
'expression',
'hasharrayaccess',
'param',
'rvalue',
'addparam',
'anyparam',
'rvalues',
'comma',
'hash',
'dqrval',
'dqtail',
'else',
'regex',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'qtexts',
'argumentlist',
'classparent',
'hostnames',
'nodeparent',
'nodename',
'hostname',
'nothing',
'arguments',
'argument',
'classnameordefault',
'hashpairs',
'hashpair',
'key']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 45
  def _reduce_1( val, _values, result )
  if val[0]
    # Make sure we always return an array.
    if val[0].is_a?(Expression::ArrayConstructor)
      if val[0].children.empty?
        result = nil
      else
        result = val[0]
      end
    else
      result = aryfy(val[0])
    end
  else
    result = nil
  end
   result
  end
.,.,

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'grammar.ra', 61
  def _reduce_4( val, _values, result )
    if val[0] and val[1]
    if val[0].instance_of?(Expression::ArrayConstructor)
      val[0].push(val[1])
      result = val[0]
    else
      result = ast Expression::ArrayConstructor, :children => [val[0],val[1]]
    end
  elsif obj = (val[0] || val[1])
    result = obj
  else result = nil
  end
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

 # reduce 15 omitted

 # reduce 16 omitted

 # reduce 17 omitted

module_eval <<'.,.,', 'grammar.ra', 85
  def _reduce_18( val, _values, result )
  args = aryfy(val[2])
  result = ast Expression::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => args,
    :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 93
  def _reduce_19( val, _values, result )
  args = aryfy(val[2])
  result = ast Expression::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => args,
    :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 99
  def _reduce_20( val, _values, result )
  result = ast Expression::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => Expression::ArrayConstructor.new({}),
    :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 107
  def _reduce_21( val, _values, result )
    args = aryfy(val[1])
    result = ast Expression::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => args,
    :ftype => :statement
   result
  end
.,.,

 # reduce 22 omitted

 # reduce 23 omitted

module_eval <<'.,.,', 'grammar.ra', 115
  def _reduce_24( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 124
  def _reduce_25( val, _values, result )
    unless val[0].is_a?(Expression::ArrayConstructor)
    val[0] = aryfy(val[0])
  end

  val[0].push(val[2])

  result = val[0]
   result
  end
.,.,

 # reduce 26 omitted

 # reduce 27 omitted

 # reduce 28 omitted

 # reduce 29 omitted

 # reduce 30 omitted

 # reduce 31 omitted

 # reduce 32 omitted

 # reduce 33 omitted

module_eval <<'.,.,', 'grammar.ra', 138
  def _reduce_34( val, _values, result )
    result = ast Expression::Name, :value => val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 159
  def _reduce_35( val, _values, result )
  @lexer.commentpop
  array = val[2]
  array = [array] if array.instance_of?(Expression::ResourceInstance)
  result = ast Expression::ArrayConstructor

  # this iterates across each specified resourceinstance
  array.each { |instance|
    raise Puppet::Dev, "Got something that isn't an instance" unless instance.instance_of?(Expression::ResourceInstance)
    # now, i need to somehow differentiate between those things with
    # arrays in their names, and normal things

      result.push ast(
        Expression::Resource,
      :type => val[0],
      :title => instance[0],

      :parameters => instance[1])
  }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 162
  def _reduce_36( val, _values, result )
  # This is a deprecated syntax.
  error "All resource specifications require names"
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 165
  def _reduce_37( val, _values, result )
  # a defaults setting for a type
  result = ast(Expression::ResourceDefaults, :type => val[0], :parameters => val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 171
  def _reduce_38( val, _values, result )
  @lexer.commentpop
  result = ast Expression::ResourceOverride, :object => val[0], :parameters => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 196
  def _reduce_39( val, _values, result )
  type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs]) and ! Puppet[:parseonly]
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? Expression::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resources as exported and pass them through.
  if val[1].instance_of?(Expression::ArrayConstructor)
    val[1].each do |obj|
      obj.send(method, true)
    end
  else
    val[1].send(method, true)
  end

  result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 197
  def _reduce_40( val, _values, result )
 result = :virtual
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 198
  def _reduce_41( val, _values, result )
 result = :exported
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 220
  def _reduce_42( val, _values, result )
  Puppet.warning addcontext("Collection names must now be capitalized") if val[0] =~ /^[a-z]/
  type = val[0].downcase
  args = {:type => type}

  if val[1].is_a?(Expression::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast Expression::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 239
  def _reduce_43( val, _values, result )
    if val[0] =~ /^[a-z]/
    Puppet.warning addcontext("Collection names must now be capitalized")
  end
  type = val[0].downcase
  args = {:type => type }

  if val[1].is_a?(Expression::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast Expression::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 249
  def _reduce_44( val, _values, result )
  if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 257
  def _reduce_45( val, _values, result )
    if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end
   result
  end
.,.,

 # reduce 46 omitted

 # reduce 47 omitted

module_eval <<'.,.,', 'grammar.ra', 265
  def _reduce_48( val, _values, result )
    result = ast Expression::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
   result
  end
.,.,

 # reduce 49 omitted

module_eval <<'.,.,', 'grammar.ra', 271
  def _reduce_50( val, _values, result )
    result = val[1]
    result.parens = true
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 272
  def _reduce_51( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 273
  def _reduce_52( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 280
  def _reduce_53( val, _values, result )
  result = ast Expression::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast Expression::CollExpr
  #result.push *val
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 285
  def _reduce_54( val, _values, result )
    result = ast Expression::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast Expression::CollExpr
    #result.push *val
   result
  end
.,.,

 # reduce 55 omitted

 # reduce 56 omitted

module_eval <<'.,.,', 'grammar.ra', 292
  def _reduce_57( val, _values, result )
  result = ast Expression::ResourceInstance, :children => [val[0],val[2]]
   result
  end
.,.,

 # reduce 58 omitted

module_eval <<'.,.,', 'grammar.ra', 302
  def _reduce_59( val, _values, result )
    if val[0].instance_of?(Expression::ResourceInstance)
    result = ast Expression::ArrayConstructor, :children => [val[0],val[2]]
  else
    val[0].push val[2]
    result = val[0]
  end
   result
  end
.,.,

 # reduce 60 omitted

 # reduce 61 omitted

module_eval <<'.,.,', 'grammar.ra', 309
  def _reduce_62( val, _values, result )
  result = ast Expression::Undef, :value => :undef
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 313
  def _reduce_63( val, _values, result )
  result = ast Expression::Name, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 317
  def _reduce_64( val, _values, result )
  result = ast Expression::Type, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 65 omitted

 # reduce 66 omitted

 # reduce 67 omitted

 # reduce 68 omitted

 # reduce 69 omitted

 # reduce 70 omitted

 # reduce 71 omitted

module_eval <<'.,.,', 'grammar.ra', 332
  def _reduce_72( val, _values, result )
  raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast Expression::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast Expression::VarDef, :name => variable, :value => val[2], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 335
  def _reduce_73( val, _values, result )
    result = ast Expression::VarDef, :name => val[0], :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 340
  def _reduce_74( val, _values, result )
  variable = ast Expression::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast Expression::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 345
  def _reduce_75( val, _values, result )
  result = ast Expression::ArrayConstructor
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 345
  def _reduce_76( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 354
  def _reduce_77( val, _values, result )
    if val[0].instance_of?(Expression::ArrayConstructor)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast Expression::ArrayConstructor, :children => [val[0],val[2]]
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 358
  def _reduce_78( val, _values, result )
  result = ast Expression::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 363
  def _reduce_79( val, _values, result )
  result = ast Expression::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true
   result
  end
.,.,

 # reduce 80 omitted

 # reduce 81 omitted

module_eval <<'.,.,', 'grammar.ra', 371
  def _reduce_82( val, _values, result )
  result = ast Expression::ArrayConstructor
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 371
  def _reduce_83( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 380
  def _reduce_84( val, _values, result )
    if val[0].instance_of?(Expression::ArrayConstructor)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast Expression::ArrayConstructor, :children => [val[0],val[2]]
  end
   result
  end
.,.,

 # reduce 85 omitted

module_eval <<'.,.,', 'grammar.ra', 389
  def _reduce_86( val, _values, result )
    if val[0].instance_of?(Expression::ArrayConstructor)
    result = val[0].push(val[2])
  else
    result = ast Expression::ArrayConstructor, :children => [val[0],val[2]]
  end
   result
  end
.,.,

 # reduce 87 omitted

 # reduce 88 omitted

 # reduce 89 omitted

 # reduce 90 omitted

 # reduce 91 omitted

 # reduce 92 omitted

 # reduce 93 omitted

 # reduce 94 omitted

 # reduce 95 omitted

 # reduce 96 omitted

 # reduce 97 omitted

 # reduce 98 omitted

 # reduce 99 omitted

 # reduce 100 omitted

 # reduce 101 omitted

 # reduce 102 omitted

 # reduce 103 omitted

 # reduce 104 omitted

module_eval <<'.,.,', 'grammar.ra', 418
  def _reduce_105( val, _values, result )
  args = aryfy(val[2])
  result = ast Expression::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => args,
    :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 423
  def _reduce_106( val, _values, result )
  result = ast Expression::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => Expression::ArrayConstructor.new({}),
    :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 424
  def _reduce_107( val, _values, result )
 result = ast Expression::String, :value => val[0][:value],                  :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 425
  def _reduce_108( val, _values, result )
 result = ast Expression::Concat, :value => [ast(Expression::String,val[0])]+val[1], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 427
  def _reduce_109( val, _values, result )
 result = [val[0]] + val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 429
  def _reduce_110( val, _values, result )
 result = [ast(Expression::String,val[0])]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 430
  def _reduce_111( val, _values, result )
 result = [ast(Expression::String,val[0])] + val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 435
  def _reduce_112( val, _values, result )
  result = ast Expression::Boolean, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 440
  def _reduce_113( val, _values, result )
  Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast Expression::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 442
  def _reduce_114( val, _values, result )
  result = ast Expression::ResourceReference, :type => val[0], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 454
  def _reduce_115( val, _values, result )
  @lexer.commentpop
  args = {
    :test => val[1],
    :statements => val[3]
  }

  args[:else] = val[5] if val[5]

  result = ast Expression::IfStatement, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 465
  def _reduce_116( val, _values, result )
    @lexer.commentpop
    args = {
      :test => val[1],
      :statements => ast(Expression::Nop)
  }

  args[:else] = val[4] if val[4]

  result = ast Expression::IfStatement, args
   result
  end
.,.,

 # reduce 117 omitted

module_eval <<'.,.,', 'grammar.ra', 471
  def _reduce_118( val, _values, result )
    @lexer.commentpop
    result = ast Expression::Else, :statements => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 475
  def _reduce_119( val, _values, result )
    @lexer.commentpop
    result = ast Expression::Else, :statements => ast(Expression::Nop)
   result
  end
.,.,

 # reduce 120 omitted

module_eval <<'.,.,', 'grammar.ra', 492
  def _reduce_121( val, _values, result )
    result = ast Expression::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 495
  def _reduce_122( val, _values, result )
    result = ast Expression::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 498
  def _reduce_123( val, _values, result )
    result = ast Expression::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 501
  def _reduce_124( val, _values, result )
    result = ast Expression::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 504
  def _reduce_125( val, _values, result )
    result = ast Expression::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 507
  def _reduce_126( val, _values, result )
    result = ast Expression::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 510
  def _reduce_127( val, _values, result )
    result = ast Expression::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 513
  def _reduce_128( val, _values, result )
    result = ast Expression::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 516
  def _reduce_129( val, _values, result )
    result = ast Expression::Minus, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 519
  def _reduce_130( val, _values, result )
    result = ast Expression::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 522
  def _reduce_131( val, _values, result )
    result = ast Expression::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 525
  def _reduce_132( val, _values, result )
    result = ast Expression::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 528
  def _reduce_133( val, _values, result )
    result = ast Expression::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 531
  def _reduce_134( val, _values, result )
    result = ast Expression::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 534
  def _reduce_135( val, _values, result )
    result = ast Expression::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 537
  def _reduce_136( val, _values, result )
    result = ast Expression::Not, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 540
  def _reduce_137( val, _values, result )
    result = ast Expression::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 543
  def _reduce_138( val, _values, result )
    result = ast Expression::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 546
  def _reduce_139( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 553
  def _reduce_140( val, _values, result )
  @lexer.commentpop
  options = val[3]
  options = ast Expression::ArrayConstructor, :children => [val[3]] unless options.instance_of?(Expression::ArrayConstructor)
  result = ast Expression::CaseStatement, :test => val[1], :options => options
   result
  end
.,.,

 # reduce 141 omitted

module_eval <<'.,.,', 'grammar.ra', 563
  def _reduce_142( val, _values, result )
    if val[0].instance_of?(Expression::ArrayConstructor)
    val[0].push val[1]
    result = val[0]
  else
    result = ast Expression::ArrayConstructor, :children => [val[0], val[1]]
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 568
  def _reduce_143( val, _values, result )
  @lexer.commentpop
  result = ast Expression::CaseOpt, :value => val[0], :statements => val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 577
  def _reduce_144( val, _values, result )
  @lexer.commentpop

    result = ast(
    Expression::CaseOpt,
    :value => val[0],

    :statements => ast(Expression::ArrayConstructor)
  )
   result
  end
.,.,

 # reduce 145 omitted

module_eval <<'.,.,', 'grammar.ra', 587
  def _reduce_146( val, _values, result )
    if val[0].instance_of?(Expression::ArrayConstructor)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast Expression::ArrayConstructor, :children => [val[0],val[2]]
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 591
  def _reduce_147( val, _values, result )
  result = ast Expression::Selector, :param => val[0], :values => val[2]
   result
  end
.,.,

 # reduce 148 omitted

module_eval <<'.,.,', 'grammar.ra', 597
  def _reduce_149( val, _values, result )
    @lexer.commentpop
    result = val[1]
   result
  end
.,.,

 # reduce 150 omitted

module_eval <<'.,.,', 'grammar.ra', 607
  def _reduce_151( val, _values, result )
    if val[0].instance_of?(Expression::ArrayConstructor)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast Expression::ArrayConstructor, :children => [val[0],val[2]]
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 611
  def _reduce_152( val, _values, result )
  result = ast Expression::ResourceParam, :param => val[0], :value => val[2]
   result
  end
.,.,

 # reduce 153 omitted

 # reduce 154 omitted

 # reduce 155 omitted

 # reduce 156 omitted

 # reduce 157 omitted

 # reduce 158 omitted

 # reduce 159 omitted

module_eval <<'.,.,', 'grammar.ra', 622
  def _reduce_160( val, _values, result )
    result = ast Expression::Default, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 161 omitted

module_eval <<'.,.,', 'grammar.ra', 625
  def _reduce_162( val, _values, result )
 result = [val[0].value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 629
  def _reduce_163( val, _values, result )
    results = val[0] << val[2].value
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 637
  def _reduce_164( val, _values, result )
  val[1].each do |file|
    import(file)
  end

  result = Expression::ArrayConstructor.new(:children => [])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 648
  def _reduce_165( val, _values, result )
  @lexer.commentpop
  newdefine classname(val[1]), :arguments => val[2], :code => val[4], :line => val[0][:line]
  @lexer.indefine = false
  result = nil

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 653
  def _reduce_166( val, _values, result )
  @lexer.commentpop
  newdefine classname(val[1]), :arguments => val[2], :line => val[0][:line]
  @lexer.indefine = false
  result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 662
  def _reduce_167( val, _values, result )
  @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  newclass classname(val[1]), :arguments => val[2], :parent => val[3], :code => val[5], :line => val[0][:line]
  result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 668
  def _reduce_168( val, _values, result )
  @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  newclass classname(val[1]), :arguments => val[2], :parent => val[3], :line => val[0][:line]
  result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 674
  def _reduce_169( val, _values, result )
  @lexer.commentpop
  newnode val[1], :parent => val[2], :code => val[4], :line => val[0][:line]
  result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 678
  def _reduce_170( val, _values, result )
  @lexer.commentpop
  newnode val[1], :parent => val[2], :line => val[0][:line]
  result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 679
  def _reduce_171( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 681
  def _reduce_172( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 682
  def _reduce_173( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 683
  def _reduce_174( val, _values, result )
 result = "class"
   result
  end
.,.,

 # reduce 175 omitted

module_eval <<'.,.,', 'grammar.ra', 693
  def _reduce_176( val, _values, result )
    result = val[0]
    result = [result] unless result.is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 697
  def _reduce_177( val, _values, result )
  result = ast Expression::HostName, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 698
  def _reduce_178( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 699
  def _reduce_179( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 700
  def _reduce_180( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

 # reduce 181 omitted

module_eval <<'.,.,', 'grammar.ra', 706
  def _reduce_182( val, _values, result )
  result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 710
  def _reduce_183( val, _values, result )
  result = ast Expression::ArrayConstructor, :children => []
   result
  end
.,.,

 # reduce 184 omitted

module_eval <<'.,.,', 'grammar.ra', 715
  def _reduce_185( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 719
  def _reduce_186( val, _values, result )
    result = val[1]
    result = [result] unless result[0].is_a?(Array)
   result
  end
.,.,

 # reduce 187 omitted

module_eval <<'.,.,', 'grammar.ra', 726
  def _reduce_188( val, _values, result )
    result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 731
  def _reduce_189( val, _values, result )
  Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 735
  def _reduce_190( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 737
  def _reduce_191( val, _values, result )
  result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 739
  def _reduce_192( val, _values, result )
  result = [val[0][:value]]
   result
  end
.,.,

 # reduce 193 omitted

module_eval <<'.,.,', 'grammar.ra', 744
  def _reduce_194( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 195 omitted

module_eval <<'.,.,', 'grammar.ra', 749
  def _reduce_196( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 197 omitted

 # reduce 198 omitted

module_eval <<'.,.,', 'grammar.ra', 755
  def _reduce_199( val, _values, result )
  result = ast Expression::Variable, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 763
  def _reduce_200( val, _values, result )
  if val[1].instance_of?(Expression::ArrayConstructor)
    result = val[1]
  else
    result = ast Expression::ArrayConstructor, :children => [val[1]]
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 770
  def _reduce_201( val, _values, result )
    if val[1].instance_of?(Expression::ArrayConstructor)
    result = val[1]
  else
    result = ast Expression::ArrayConstructor, :children => [val[1]]
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 772
  def _reduce_202( val, _values, result )
  result = ast Expression::ArrayConstructor
   result
  end
.,.,

 # reduce 203 omitted

 # reduce 204 omitted

 # reduce 205 omitted

module_eval <<'.,.,', 'grammar.ra', 777
  def _reduce_206( val, _values, result )
 result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 782
  def _reduce_207( val, _values, result )
  result = ast Expression::Regex, :value => val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 790
  def _reduce_208( val, _values, result )
  if val[1].instance_of?(Expression::HashConstructor)
    result = val[1]
  else
    result = ast Expression::HashConstructor, { :value => val[1] }
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 797
  def _reduce_209( val, _values, result )
    if val[1].instance_of?(Expression::HashConstructor)
    result = val[1]
  else
    result = ast Expression::HashConstructor, { :value => val[1] }
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 799
  def _reduce_210( val, _values, result )
  result = ast Expression::HashConstructor
   result
  end
.,.,

 # reduce 211 omitted

module_eval <<'.,.,', 'grammar.ra', 809
  def _reduce_212( val, _values, result )
    if val[0].instance_of?(Expression::HashConstructor)
    result = val[0].merge(val[2])
  else
    result = ast Expression::HashConstructor, :value => val[0]
    result.merge(val[2])
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 813
  def _reduce_213( val, _values, result )
  result = ast Expression::HashConstructor, { :value => { val[0] => val[2] } }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 814
  def _reduce_214( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 815
  def _reduce_215( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 820
  def _reduce_216( val, _values, result )
  result = ast Expression::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]
   result
  end
.,.,

 # reduce 217 omitted

module_eval <<'.,.,', 'grammar.ra', 825
  def _reduce_218( val, _values, result )
    result = ast Expression::HashOrArrayAccess, :variable => val[0], :key => val[2]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
