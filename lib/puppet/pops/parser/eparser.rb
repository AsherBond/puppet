#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 775)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'63,65,-134,284,57,247,59,-224,85,-132,-233,322,133,274,259,258,132,63',
'65,274,233,233,108,15,112,233,107,307,362,43,249,50,143,52,47,133,51',
'75,71,132,45,74,48,49,-134,285,72,14,111,-224,73,-132,-233,12,13,143',
'267,368,140,254,230,76,63,65,253,144,57,44,59,404,86,70,66,133,68,69',
'67,132,76,53,54,56,55,63,65,15,58,273,144,66,129,43,274,50,337,52,47',
'133,51,75,71,132,45,74,48,49,133,240,72,14,132,305,73,372,252,12,13',
'256,133,251,257,283,132,76,63,65,269,270,57,44,59,340,281,70,66,133',
'68,69,357,132,356,53,54,56,55,342,80,15,58,81,83,82,84,43,357,50,356',
'52,47,344,51,75,71,78,45,74,48,49,297,298,72,14,299,283,73,250,349,12',
'13,350,351,233,244,354,121,76,63,65,358,360,57,44,59,402,244,70,66,229',
'68,69,281,283,281,53,54,56,55,324,369,15,58,305,305,220,196,43,80,50',
'163,52,47,379,51,75,71,306,45,74,48,49,160,381,72,14,158,283,73,281',
'134,12,13,384,121,122,321,121,388,76,63,65,360,390,57,44,59,400,391',
'70,66,392,68,69,393,394,118,53,54,56,55,396,397,15,58,398,325,80,77',
'43,405,50,406,52,47,407,51,75,71,408,45,74,48,49,,,72,14,,,73,,,12,13',
',,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,',
'43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65',
',,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114',
',51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,',
'70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45',
'74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,',
',,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14',
',,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55',
',,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,',
',,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43',
',50,,52,47,,51,75,71,,45,74,48,49,,,72,14,,,73,,,12,13,,,,,,,76,63,65',
',,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114',
',51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,',
'70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45',
'74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,',
',,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14',
',,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55',
',,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,',
',,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43',
',50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,',
',57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,128,',
'51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70',
'66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74',
',,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53',
'54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73',
',,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15',
'58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,',
'76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,198,215',
'209,216,52,210,218,211,207,205,,200,213,,,85,,72,14,219,214,212,63,65',
'12,13,,,,108,,112,76,107,,63,65,217,199,57,147,59,70,66,,68,69,,,,53',
'54,56,55,,111,,58,15,,143,,,140,43,,50,,52,114,,51,75,71,,45,74,86,',
',,72,14,76,,73,63,65,12,13,,,,144,66,,76,,,63,65,,44,57,149,59,70,66',
',68,69,,,,53,54,56,55,,,,58,15,,143,,,140,43,,50,,52,114,,51,75,71,',
'45,74,,,,,72,14,76,,73,,,12,13,,,,144,66,,76,63,65,,,57,44,59,152,,70',
'66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74',
',,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53',
'54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73',
',,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15',
'58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,',
'76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50',
',52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57',
'44,162,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51',
'75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66',
',68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,',
',,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53',
'54,56,55,,,15,58,,,,,43,,50,,52,47,,51,75,71,,45,74,48,49,,,72,14,,',
'73,,,12,13,,,,,,,76,63,65,,,57,44,59,152,,70,66,,68,69,,,,53,54,56,55',
',,15,58,,,,,43,,50,,52,47,,51,75,71,,45,74,48,49,,,72,14,,,73,,,12,13',
',,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,',
'43,,50,,52,47,,51,75,71,,45,74,48,49,,,72,14,,,73,,,12,13,,,,,,,76,63',
'65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,47',
',51,75,71,,45,74,48,49,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59',
',,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,47,,51,75,71,,45',
'74,48,49,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68',
'69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,47,,51,75,71,,45,74,48,49,',
',72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54',
'56,55,,,15,58,,,,,43,,50,,52,47,,51,75,71,,45,74,48,49,,,72,14,,,73',
',,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15',
'58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,',
'76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50',
',52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57',
'44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75',
'71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,',
'68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,',
',72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54',
'56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12',
'13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,',
',,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63',
'65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114',
',51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,',
'70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45',
'74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,',
',,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14',
',,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55',
',,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,',
',,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43',
',50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,',
',57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,',
'51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70',
'66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74',
',,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53',
'54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73',
',,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15',
'58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,',
'76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50',
',52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57',
'44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75',
'71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,',
'68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,',
',72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54',
'56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12',
'13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,',
',,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63',
'65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114',
',51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,',
'70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45',
'74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,',
',,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14',
',,73,,,12,13,,,,,,,76,63,65,,,57,44,59,378,195,70,66,,68,69,,,,53,54',
'56,55,,,15,58,,,,,43,,50,,52,47,,51,75,71,,45,74,48,49,,,72,14,,,73',
',,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15',
'58,,,,,198,215,209,216,52,210,218,211,207,205,,200,213,,,85,,72,14,219',
'214,212,63,65,12,13,,,,108,,112,76,107,,63,65,217,199,57,,59,70,66,',
'68,69,,,,53,54,56,55,,111,,58,15,,143,,,140,43,,50,,52,47,,51,75,71',
',45,74,48,49,,,72,14,76,,73,,,12,13,,,,144,66,,76,63,65,,,57,44,59,',
',70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45',
'74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,',
',,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14',
',,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55',
',,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,',
',,,,,76,63,65,,,57,44,59,311,,70,66,,68,69,,,,53,54,56,55,,,15,58,,',
',,43,,50,,52,47,,51,75,71,,45,74,48,49,,,72,14,,,73,,,12,13,,,,,,,76',
'63,65,,,57,44,59,309,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50',
',52,47,,51,75,71,,45,74,48,49,85,,72,14,,,73,,,12,13,,,,108,,112,76',
'107,,63,65,,44,57,330,59,70,66,,68,69,85,,,53,54,56,55,,111,,58,15,',
',108,,112,43,107,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,111,12',
'13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,',
',,,43,,50,,52,114,,51,75,71,,45,74,,,85,,72,14,,,73,,,12,13,,,,108,',
'112,76,107,,63,65,,44,57,,59,70,66,,68,69,,,,53,54,56,55,,111,,58,15',
'227,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,',
',76,63,65,,,57,44,59,363,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43',
',50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,',
',57,44,59,303,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,47',
',51,75,71,,45,74,48,49,,,72,14,,,73,,,12,13,,,,,,,76,,,63,65,,44,57',
',59,70,66,,68,69,,,,53,54,56,55,,,,58,15,235,,,,,43,,50,,52,114,,51',
'75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66',
',68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,47,,51,75,71,,45,74,48',
'49,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,',
'53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,',
'73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,',
',15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,',
',,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43',
',50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,,,63,65',
',44,57,331,59,70,66,,68,69,,,,53,54,56,55,,,,58,15,,,,,,43,,50,,52,114',
',51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,',
'70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45',
'74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,',
',,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14',
',,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55',
',,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,',
',,,,,76,63,65,,,57,44,59,333,,70,66,,68,69,,,,53,54,56,55,,,15,58,,',
',,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63',
'65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114',
',51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,,,,,,44,,,,70,66,,68',
'69,,,85,53,54,56,55,,,,58,104,105,106,101,96,108,,112,,107,,,97,99,98',
'100,,,,,,,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,,87,88,85,,239',
',,86,,,,104,105,106,101,96,108,,112,,107,,,97,99,98,100,,,93,,,,,,,',
',,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104,105,106',
'101,96,108,,112,,107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102',
',,89,90,92,91,94,95,85,87,88,,,255,,,86,104,105,106,101,96,108,,112',
',107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94',
'95,,87,88,85,,238,,,86,,,,104,105,106,101,96,108,,112,,107,,,97,99,98',
'100,,,93,,,,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,',
',,86,104,105,106,101,96,108,,112,,107,,,97,99,98,100,,,,,,93,,,,,,,',
',,111,,,,103,102,,,89,90,92,91,94,95,,87,88,85,,237,,,86,,,,104,105',
'106,101,96,108,,112,,107,,,97,99,98,100,,,93,,,,,,,,,,,,,111,,,,103',
'102,,,89,90,92,91,94,95,,87,88,,85,,109,,86,255,,,,104,105,106,101,96',
'108,,112,,107,,,97,99,98,100,,93,,,,,,,,,,,,,,111,,,,103,102,,,89,90',
'92,91,94,95,,87,88,85,,236,,,86,,,,104,105,106,101,96,108,,112,,107',
',,97,99,98,100,,,93,,,,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85',
'87,88,,,,,,86,104,105,106,101,96,108,,112,,107,,225,97,99,98,100,,,',
',,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104',
'105,106,101,96,108,,112,,107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,',
'103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104,105,106,101,96,108',
',112,,107,269,270,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89',
'90,92,91,94,95,85,87,88,,,,,,86,104,105,106,101,96,108,,112,,107,,,97',
'99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87',
'88,,,,,,86,104,105,106,101,96,108,,112,,107,,,97,99,98,100,,,,,,93,',
',,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104,105',
'106,101,96,108,,112,,107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103',
'102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104,105,106,101,96,108,,112',
',107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94',
'95,85,87,88,,,,,,86,104,105,106,101,96,108,,112,85,107,,85,97,99,98',
'100,85,,,,,93,108,,112,108,107,112,,107,108,111,112,,107,103,102,,,89',
'90,92,91,94,95,,87,88,111,,,111,,86,,,111,,92,91,,92,91,87,88,,87,88',
',,86,87,88,86,,93,,,86,,,,,,,,,85,,,,,93,,,93,104,105,106,101,96,108',
'279,112,,107,,,97,99,98,100,,,,,,,,,,,,,,,,111,,,,103,102,,,89,90,92',
'91,94,95,,87,88,85,,109,,,86,,,,104,105,106,101,96,108,,112,,107,,,97',
'99,98,100,,,93,,,,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87',
'88,,,275,,,86,104,105,106,101,96,108,,112,85,107,,,97,99,98,100,,,,',
',93,108,,112,,107,,,,,111,,,,103,102,,,89,90,92,91,94,95,,87,88,111',
',,85,,86,,,89,90,92,91,,,,87,88,108,,112,85,107,86,,,,,93,,,,,,,108',
',112,,107,,,,,111,93,,,,,,,89,90,92,91,,,,87,88,111,,,85,,86,,,89,90',
'92,91,94,95,,87,88,108,,112,85,107,86,,,,,93,,,,,,96,108,,112,,107,',
',97,,111,93,,,,,,,89,90,92,91,94,95,,87,88,111,,,,,86,,85,89,90,92,91',
'94,95,,87,88,,,,96,108,86,112,85,107,,93,97,,,,,,,,,96,108,,112,,107',
',93,97,,111,,,,,,,,89,90,92,91,94,95,,87,88,111,,,,,86,,,89,90,92,91',
'94,95,,87,88,,,85,,,86,,,,,93,104,105,106,101,96,108,,112,,107,,,97',
'99,98,100,93,,,,,,,,,,,,,,,111,,,,103,102,,85,89,90,92,91,94,95,,87',
'88,,,101,96,108,86,112,,107,,85,97,99,98,100,,,,,,,,101,96,108,,112',
'93,107,,111,97,99,98,100,,,,89,90,92,91,94,95,,87,88,,,,111,,86,,,102',
',,89,90,92,91,94,95,,87,88,85,,,,,86,,93,,104,105,106,101,96,108,,112',
',107,,,97,99,98,100,,,93,,,,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94',
'95,85,87,88,,,,,,86,104,105,106,101,96,108,,112,,107,,85,97,99,98,100',
',,,,,93,,,96,108,,112,,107,,111,97,,85,103,102,,,89,90,92,91,94,95,',
'87,88,108,,112,111,107,86,85,,,,,89,90,92,91,94,95,,87,88,108,,112,',
'107,86,111,93,,,,,,,,,,,,,,87,88,,,,111,93,86,,,,,,,,,,,,,87,88,,293',
'215,292,216,86,290,218,294,288,287,,289,291,,,,,,,219,214,295,293,215',
'292,216,,290,218,294,288,287,,289,291,,,217,296,,,219,214,295,293,215',
'292,216,,290,218,294,288,287,,289,291,,,217,296,,,219,214,295,,,,,,',
',,,,,,,,,217,296' ]
        racc_action_table = arr = ::Array.new(6905, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,207,208,0,136,0,213,173,205,212,244,210,234,156,156,210,247,247',
'312,244,160,173,0,173,121,173,234,312,0,136,0,250,0,0,209,0,0,0,209',
'0,0,0,0,207,208,0,0,173,213,0,205,212,0,0,247,160,318,247,148,121,0',
'391,391,148,250,391,0,391,391,173,0,0,50,0,0,0,50,247,0,0,0,0,158,158',
'391,0,170,247,247,47,391,170,391,272,391,391,114,391,391,391,114,391',
'391,391,391,321,128,391,391,321,266,391,321,146,391,391,151,47,146,151',
'202,47,391,5,5,337,337,5,391,5,276,201,391,391,128,391,391,309,128,309',
'391,391,391,391,280,164,5,391,8,8,8,8,5,354,5,354,5,5,282,5,5,5,5,5',
'5,5,5,222,224,5,5,226,286,5,138,300,5,5,302,304,305,135,308,227,5,390',
'390,310,311,390,5,390,390,130,5,5,120,5,5,315,316,317,5,5,5,5,245,319',
'390,5,231,323,110,108,390,79,390,77,390,390,336,390,390,390,233,390',
'390,390,390,67,339,390,390,66,341,390,241,48,390,390,348,349,42,242',
'41,357,390,388,388,358,360,388,390,388,388,361,390,390,365,390,390,366',
'367,40,390,390,390,390,373,374,388,390,377,246,6,1,388,395,388,399,388',
'388,401,388,388,388,403,388,388,388,388,,,388,388,,,388,,,388,388,,',
',,,,388,195,195,,,195,388,195,,,388,388,,388,388,,,,388,388,388,388',
',,195,388,,,,,195,,195,,195,195,,195,195,195,,195,195,,,,,195,195,,',
'195,,,195,195,,,,,,,195,12,12,,,12,195,12,,,195,195,,195,195,,,,195',
'195,195,195,,,12,195,,,,,12,,12,,12,12,,12,12,12,,12,12,,,,,12,12,,',
'12,,,12,12,,,,,,,12,13,13,,,13,12,13,,,12,12,,12,12,,,,12,12,12,12,',
',13,12,,,,,13,,13,,13,13,,13,13,13,,13,13,,,,,13,13,,,13,,,13,13,,,',
',,,13,14,14,,,14,13,14,,,13,13,,13,13,,,,13,13,13,13,,,14,13,,,,,14',
',14,,14,14,,14,14,14,,14,14,,,,,14,14,,,14,,,14,14,,,,,,,14,15,15,,',
'15,14,15,,,14,14,,14,14,,,,14,14,14,14,,,15,14,,,,,15,,15,,15,15,,15',
'15,15,,15,15,,,,,15,15,,,15,,,15,15,,,,,,,15,369,369,,,369,15,369,,',
'15,15,,15,15,,,,15,15,15,15,,,369,15,,,,,369,,369,,369,369,,369,369',
'369,,369,369,369,369,,,369,369,,,369,,,369,369,,,,,,,369,356,356,,,356',
'369,356,,,369,369,,369,369,,,,369,369,369,369,,,356,369,,,,,356,,356',
',356,356,,356,356,356,,356,356,,,,,356,356,,,356,,,356,356,,,,,,,356',
'198,198,,,198,356,198,,,356,356,,356,356,,,,356,356,356,356,,,198,356',
',,,,198,,198,,198,198,,198,198,198,,198,198,,,,,198,198,,,198,,,198',
'198,,,,,,,198,43,43,,,43,198,43,,,198,198,,198,198,,,,198,198,198,198',
',,43,198,,,,,43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,43,',
',,,,,43,44,44,,,44,43,44,,,43,43,,43,43,,,,43,43,43,43,,,44,43,,,,,44',
',44,,44,44,,44,44,44,,44,44,,,,,44,44,,,44,,,44,44,,,,,,,44,45,45,,',
'45,44,45,,,44,44,,44,44,,,,44,44,44,44,,,45,44,,,,,45,,45,,45,45,,45',
'45,45,,45,45,,,,,45,45,,,45,,,45,45,,,,,,,45,46,46,,,46,45,46,,,45,45',
',45,45,,,,45,45,45,45,,,46,45,,,,,46,,46,,46,46,,46,46,46,,46,46,,,',
',46,46,,,46,,,46,46,,,,,,,46,240,240,,,240,46,240,,,46,46,,46,46,,,',
'46,46,46,46,,,240,46,,,,,240,,240,,240,240,,240,240,240,,240,240,,,',
',240,240,,,240,,,240,240,,,,,,,240,199,199,,,199,240,199,,,240,240,',
'240,240,,,,240,240,240,240,,,199,240,,,,,199,,199,,199,199,,199,199',
'199,,199,199,,,,,199,199,,,199,,,199,199,,,,,,,199,200,200,,,200,199',
'200,,,199,199,,199,199,,,,199,199,199,199,,,200,199,,,,,200,,200,,200',
'200,,200,200,200,,200,200,,,,,200,200,,,200,,,200,200,,,,,,,200,239',
'239,,,239,200,239,,,200,200,,200,200,,,,200,200,200,200,,,239,200,,',
',,239,239,239,239,239,239,239,239,239,239,,239,239,,,172,,239,239,239',
'239,239,51,51,239,239,,,,172,,172,239,172,,57,57,239,239,57,57,57,239',
'239,,239,239,,,,239,239,239,239,,172,,239,57,,51,,,51,57,,57,,57,57',
',57,57,57,,57,57,172,,,,57,57,51,,57,249,249,57,57,,,,51,51,,57,,,58',
'58,,57,58,58,58,57,57,,57,57,,,,57,57,57,57,,,,57,58,,249,,,249,58,',
'58,,58,58,,58,58,58,,58,58,,,,,58,58,249,,58,,,58,58,,,,249,249,,58',
'59,59,,,59,58,59,59,,58,58,,58,58,,,,58,58,58,58,,,59,58,,,,,59,,59',
',59,59,,59,59,59,,59,59,,,,,59,59,,,59,,,59,59,,,,,,,59,64,64,,,64,59',
'64,,,59,59,,59,59,,,,59,59,59,59,,,64,59,,,,,64,,64,,64,64,,64,64,64',
',64,64,,,,,64,64,,,64,,,64,64,,,,,,,64,340,340,,,340,64,340,,,64,64',
',64,64,,,,64,64,64,64,,,340,64,,,,,340,,340,,340,340,,340,340,340,,340',
'340,,,,,340,340,,,340,,,340,340,,,,,,,340,275,275,,,275,340,275,,,340',
'340,,340,340,,,,340,340,340,340,,,275,340,,,,,275,,275,,275,275,,275',
'275,275,,275,275,,,,,275,275,,,275,,,275,275,,,,,,,275,69,69,,,69,275',
'69,,,275,275,,275,275,,,,275,275,275,275,,,69,275,,,,,69,,69,,69,69',
',69,69,69,,69,69,,,,,69,69,,,69,,,69,69,,,,,,,69,281,281,,,281,69,281',
',,69,69,,69,69,,,,69,69,69,69,,,281,69,,,,,281,,281,,281,281,,281,281',
'281,,281,281,,,,,281,281,,,281,,,281,281,,,,,,,281,78,78,,,78,281,78',
',,281,281,,281,281,,,,281,281,281,281,,,78,281,,,,,78,,78,,78,78,,78',
'78,78,,78,78,78,78,,,78,78,,,78,,,78,78,,,,,,,78,162,162,,,162,78,162',
'162,,78,78,,78,78,,,,78,78,78,78,,,162,78,,,,,162,,162,,162,162,,162',
'162,162,,162,162,162,162,,,162,162,,,162,,,162,162,,,,,,,162,80,80,',
',80,162,80,,,162,162,,162,162,,,,162,162,162,162,,,80,162,,,,,80,,80',
',80,80,,80,80,80,,80,80,80,80,,,80,80,,,80,,,80,80,,,,,,,80,81,81,,',
'81,80,81,,,80,80,,80,80,,,,80,80,80,80,,,81,80,,,,,81,,81,,81,81,,81',
'81,81,,81,81,81,81,,,81,81,,,81,,,81,81,,,,,,,81,82,82,,,82,81,82,,',
'81,81,,81,81,,,,81,81,81,81,,,82,81,,,,,82,,82,,82,82,,82,82,82,,82',
'82,82,82,,,82,82,,,82,,,82,82,,,,,,,82,83,83,,,83,82,83,,,82,82,,82',
'82,,,,82,82,82,82,,,83,82,,,,,83,,83,,83,83,,83,83,83,,83,83,83,83,',
',83,83,,,83,,,83,83,,,,,,,83,84,84,,,84,83,84,,,83,83,,83,83,,,,83,83',
'83,83,,,84,83,,,,,84,,84,,84,84,,84,84,84,,84,84,84,84,,,84,84,,,84',
',,84,84,,,,,,,84,85,85,,,85,84,85,,,84,84,,84,84,,,,84,84,84,84,,,85',
'84,,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85,,,85,85,,,,,,,85',
'86,86,,,86,85,86,,,85,85,,85,85,,,,85,85,85,85,,,86,85,,,,,86,,86,,86',
'86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,,,,86,87,87,,,87,86,87',
',,86,86,,86,86,,,,86,86,86,86,,,87,86,,,,,87,,87,,87,87,,87,87,87,,87',
'87,,,,,87,87,,,87,,,87,87,,,,,,,87,88,88,,,88,87,88,,,87,87,,87,87,',
',,87,87,87,87,,,88,87,,,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,',
',88,,,88,88,,,,,,,88,89,89,,,89,88,89,,,88,88,,88,88,,,,88,88,88,88',
',,89,88,,,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,',
',,,,89,90,90,,,90,89,90,,,89,89,,89,89,,,,89,89,89,89,,,90,89,,,,,90',
',90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,,,90,91,91,,',
'91,90,91,,,90,90,,90,90,,,,90,90,90,90,,,91,90,,,,,91,,91,,91,91,,91',
'91,91,,91,91,,,,,91,91,,,91,,,91,91,,,,,,,91,92,92,,,92,91,92,,,91,91',
',91,91,,,,91,91,91,91,,,92,91,,,,,92,,92,,92,92,,92,92,92,,92,92,,,',
',92,92,,,92,,,92,92,,,,,,,92,93,93,,,93,92,93,,,92,92,,92,92,,,,92,92',
'92,92,,,93,92,,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93',
'93,,,,,,,93,94,94,,,94,93,94,,,93,93,,93,93,,,,93,93,93,93,,,94,93,',
',,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,,,94,95',
'95,,,95,94,95,,,94,94,,94,94,,,,94,94,94,94,,,95,94,,,,,95,,95,,95,95',
',95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,,,95,96,96,,,96,95,96,,',
'95,95,,95,95,,,,95,95,95,95,,,96,95,,,,,96,,96,,96,96,,96,96,96,,96',
'96,,,,,96,96,,,96,,,96,96,,,,,,,96,97,97,,,97,96,97,,,96,96,,96,96,',
',,96,96,96,96,,,97,96,,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,',
',97,,,97,97,,,,,,,97,98,98,,,98,97,98,,,97,97,,97,97,,,,97,97,97,97',
',,98,97,,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,',
',,,,98,99,99,,,99,98,99,,,98,98,,98,98,,,,98,98,98,98,,,99,98,,,,,99',
',99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,,,99,100,100',
',,100,99,100,,,99,99,,99,99,,,,99,99,99,99,,,100,99,,,,,100,,100,,100',
'100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,,,,100,101',
'101,,,101,100,101,,,100,100,,100,100,,,,100,100,100,100,,,101,100,,',
',,101,,101,,101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,101',
',,,,,,101,102,102,,,102,101,102,,,101,101,,101,101,,,,101,101,101,101',
',,102,101,,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,,',
'102,,,102,102,,,,,,,102,103,103,,,103,102,103,,,102,102,,102,102,,,',
'102,102,102,102,,,103,102,,,,,103,,103,,103,103,,103,103,103,,103,103',
',,,,103,103,,,103,,,103,103,,,,,,,103,104,104,,,104,103,104,,,103,103',
',103,103,,,,103,103,103,103,,,104,103,,,,,104,,104,,104,104,,104,104',
'104,,104,104,,,,,104,104,,,104,,,104,104,,,,,,,104,105,105,,,105,104',
'105,,,104,104,,104,104,,,,104,104,104,104,,,105,104,,,,,105,,105,,105',
'105,,105,105,105,,105,105,,,,,105,105,,,105,,,105,105,,,,,,,105,106',
'106,,,106,105,106,,,105,105,,105,105,,,,105,105,105,105,,,106,105,,',
',,106,,106,,106,106,,106,106,106,,106,106,,,,,106,106,,,106,,,106,106',
',,,,,,106,107,107,,,107,106,107,,,106,106,,106,106,,,,106,106,106,106',
',,107,106,,,,,107,,107,,107,107,,107,107,107,,107,107,,,,,107,107,,',
'107,,,107,107,,,,,,,107,325,325,,,325,107,325,325,107,107,107,,107,107',
',,,107,107,107,107,,,325,107,,,,,325,,325,,325,325,,325,325,325,,325',
'325,325,325,,,325,325,,,325,,,325,325,,,,,,,325,109,109,,,109,325,109',
',,325,325,,325,325,,,,325,325,325,325,,,109,325,,,,,109,109,109,109',
'109,109,109,109,109,109,,109,109,,,116,,109,109,109,109,109,211,211',
'109,109,,,,116,,116,109,116,,324,324,109,109,324,,324,109,109,,109,109',
',,,109,109,109,109,,116,,109,324,,211,,,211,324,,324,,324,324,,324,324',
'324,,324,324,324,324,,,324,324,211,,324,,,324,324,,,,211,211,,324,111',
'111,,,111,324,111,,,324,324,,324,324,,,,324,324,324,324,,,111,324,,',
',,111,,111,,111,111,,111,111,111,,111,111,,,,,111,111,,,111,,,111,111',
',,,,,,111,112,112,,,112,111,112,,,111,111,,111,111,,,,111,111,111,111',
',,112,111,,,,,112,,112,,112,112,,112,112,112,,112,112,,,,,112,112,,',
'112,,,112,112,,,,,,,112,238,238,,,238,112,238,,,112,112,,112,112,,,',
'112,112,112,112,,,238,112,,,,,238,,238,,238,238,,238,238,238,,238,238',
',,,,238,238,,,238,,,238,238,,,,,,,238,237,237,,,237,238,237,237,,238',
'238,,238,238,,,,238,238,238,238,,,237,238,,,,,237,,237,,237,237,,237',
'237,237,,237,237,237,237,,,237,237,,,237,,,237,237,,,,,,,237,236,236',
',,236,237,236,236,,237,237,,237,237,,,,237,237,237,237,,,236,237,,,',
',236,,236,,236,236,,236,236,236,,236,236,236,236,171,,236,236,,,236',
',,236,236,,,,171,,171,236,171,,251,251,,236,251,251,251,236,236,,236',
'236,115,,,236,236,236,236,,171,,236,251,,,115,,115,251,115,251,,251',
'251,,251,251,251,,251,251,,,,,251,251,,,251,,115,251,251,,,,,,,251,274',
'274,,,274,251,274,,,251,251,,251,251,,,,251,251,251,251,,,274,251,,',
',,274,,274,,274,274,,274,274,274,,274,274,,,113,,274,274,,,274,,,274',
'274,,,,113,,113,274,113,,118,118,,274,118,,118,274,274,,274,274,,,,274',
'274,274,274,,113,,274,118,118,,,,,118,,118,,118,118,,118,118,118,,118',
'118,,,,,118,118,,,118,,,118,118,,,,,,,118,313,313,,,313,118,313,313',
',118,118,,118,118,,,,118,118,118,118,,,313,118,,,,,313,,313,,313,313',
',313,313,313,,313,313,,,,,313,313,,,313,,,313,313,,,,,,,313,229,229',
',,229,313,229,229,,313,313,,313,313,,,,313,313,313,313,,,229,313,,,',
',229,,229,,229,229,,229,229,229,,229,229,229,229,,,229,229,,,229,,,229',
'229,,,,,,,229,,,122,122,,229,122,,122,229,229,,229,229,,,,229,229,229',
'229,,,,229,122,122,,,,,122,,122,,122,122,,122,122,122,,122,122,,,,,122',
'122,,,122,,,122,122,,,,,,,122,159,159,,,159,122,159,,,122,122,,122,122',
',,,122,122,122,122,,,159,122,,,,,159,,159,,159,159,,159,159,159,,159',
'159,159,159,,,159,159,,,159,,,159,159,,,,,,,159,284,284,,,284,159,284',
',,159,159,,159,159,,,,159,159,159,159,,,284,159,,,,,284,,284,,284,284',
',284,284,284,,284,284,,,,,284,284,,,284,,,284,284,,,,,,,284,299,299',
',,299,284,299,,,284,284,,284,284,,,,284,284,284,284,,,299,284,,,,,299',
',299,,299,299,,299,299,299,,299,299,,,,,299,299,,,299,,,299,299,,,,',
',,299,262,262,,,262,299,262,,,299,299,,299,299,,,,299,299,299,299,,',
'262,299,,,,,262,,262,,262,262,,262,262,262,,262,262,,,,,262,262,,,262',
',,262,262,,,,,,,262,,,253,253,,262,253,253,253,262,262,,262,262,,,,262',
'262,262,262,,,,262,253,,,,,,253,,253,,253,253,,253,253,253,,253,253',
',,,,253,253,,,253,,,253,253,,,,,,,253,129,129,,,129,253,129,,,253,253',
',253,253,,,,253,253,253,253,,,129,253,,,,,129,,129,,129,129,,129,129',
'129,,129,129,,,,,129,129,,,129,,,129,129,,,,,,,129,255,255,,,255,129',
'255,,,129,129,,129,129,,,,129,129,129,129,,,255,129,,,,,255,,255,,255',
'255,,255,255,255,,255,255,,,,,255,255,,,255,,,255,255,,,,,,,255,306',
'306,,,306,255,306,,,255,255,,255,255,,,,255,255,255,255,,,306,255,,',
',,306,,306,,306,306,,306,306,306,,306,306,,,,,306,306,,,306,,,306,306',
',,,,,,306,257,257,,,257,306,257,257,,306,306,,306,306,,,,306,306,306',
'306,,,257,306,,,,,257,,257,,257,257,,257,257,257,,257,257,,,,,257,257',
',,257,,,257,257,,,,,,,257,285,285,,,285,257,285,,,257,257,,257,257,',
',,257,257,257,257,,,285,257,,,,,285,,285,,285,285,,285,285,285,,285',
'285,,,,,285,285,,,285,,,285,285,,,,,,,285,,,,,,285,,,,285,285,,285,285',
',,145,285,285,285,285,,,,285,145,145,145,145,145,145,,145,,145,,,145',
'145,145,145,,,,,,,,,,,,,,,,145,,,,145,145,,,145,145,145,145,145,145',
',145,145,127,,127,,,145,,,,127,127,127,127,127,127,,127,,127,,,127,127',
'127,127,,,145,,,,,,,,,,,,,127,,,,127,127,,,127,127,127,127,127,127,221',
'127,127,,,,,,127,221,221,221,221,221,221,,221,,221,,,221,221,221,221',
',,,,,127,,,,,,,,,,221,,,,221,221,,,221,221,221,221,221,221,150,221,221',
',,150,,,221,150,150,150,150,150,150,,150,,150,,,150,150,150,150,,,,',
',221,,,,,,,,,,150,,,,150,150,,,150,150,150,150,150,150,,150,150,126',
',126,,,150,,,,126,126,126,126,126,126,,126,,126,,,126,126,126,126,,',
'150,,,,,,,,,,,,,126,,,,126,126,,,126,126,126,126,126,126,154,126,126',
',,,,,126,154,154,154,154,154,154,,154,,154,,,154,154,154,154,,,,,,126',
',,,,,,,,,154,,,,154,154,,,154,154,154,154,154,154,,154,154,125,,125',
',,154,,,,125,125,125,125,125,125,,125,,125,,,125,125,125,125,,,154,',
',,,,,,,,,,,125,,,,125,125,,,125,125,125,125,125,125,,125,125,,271,,271',
',125,271,,,,271,271,271,271,271,271,,271,,271,,,271,271,271,271,,125',
',,,,,,,,,,,,,271,,,,271,271,,,271,271,271,271,271,271,,271,271,123,',
'123,,,271,,,,123,123,123,123,123,123,,123,,123,,,123,123,123,123,,,271',
',,,,,,,,,,,,123,,,,123,123,,,123,123,123,123,123,123,117,123,123,,,',
',,123,117,117,117,117,117,117,,117,,117,,117,117,117,117,117,,,,,,123',
',,,,,,,,,117,,,,117,117,,,117,117,117,117,117,117,161,117,117,,,,,,117',
'161,161,161,161,161,161,,161,,161,,,161,161,161,161,,,,,,117,,,,,,,',
',,161,,,,161,161,,,161,161,161,161,161,161,329,161,161,,,,,,161,329',
'329,329,329,329,329,,329,,329,161,161,329,329,329,329,,,,,,161,,,,,',
',,,,329,,,,329,329,,,329,329,329,329,329,329,332,329,329,,,,,,329,332',
'332,332,332,332,332,,332,,332,,,332,332,332,332,,,,,,329,,,,,,,,,,332',
',,,332,332,,,332,332,332,332,332,332,338,332,332,,,,,,332,338,338,338',
'338,338,338,,338,,338,,,338,338,338,338,,,,,,332,,,,,,,,,,338,,,,338',
'338,,,338,338,338,338,338,338,346,338,338,,,,,,338,346,346,346,346,346',
'346,,346,,346,,,346,346,346,346,,,,,,338,,,,,,,,,,346,,,,346,346,,,346',
'346,346,346,346,346,347,346,346,,,,,,346,347,347,347,347,347,347,,347',
',347,,,347,347,347,347,,,,,,346,,,,,,,,,,347,,,,347,347,,,347,347,347',
'347,347,347,353,347,347,,,,,,347,353,353,353,353,353,353,,353,174,353',
',175,353,353,353,353,176,,,,,347,174,,174,175,174,175,,175,176,353,176',
',176,353,353,,,353,353,353,353,353,353,,353,353,174,,,175,,353,,,176',
',174,174,,175,175,174,174,,175,175,,,174,176,176,175,,353,,,176,,,,',
',,,,197,,,,,174,,,175,197,197,197,197,197,197,197,197,,197,,,197,197',
'197,197,,,,,,,,,,,,,,,,197,,,,197,197,,,197,197,197,197,197,197,,197',
'197,11,,11,,,197,,,,11,11,11,11,11,11,,11,,11,,,11,11,11,11,,,197,,',
',,,,,,,,,,11,,,,11,11,,,11,11,11,11,11,11,192,11,11,,,192,,,11,192,192',
'192,192,192,192,,192,179,192,,,192,192,192,192,,,,,,11,179,,179,,179',
',,,,192,,,,192,192,,,192,192,192,192,192,192,,192,192,179,,,180,,192',
',,179,179,179,179,,,,179,179,180,,180,181,180,179,,,,,192,,,,,,,181',
',181,,181,,,,,180,179,,,,,,,180,180,180,180,,,,180,180,181,,,182,,180',
',,181,181,181,181,181,181,,181,181,182,,182,183,182,181,,,,,180,,,,',
',183,183,,183,,183,,,183,,182,181,,,,,,,182,182,182,182,182,182,,182',
'182,183,,,,,182,,184,183,183,183,183,183,183,,183,183,,,,184,184,183',
'184,185,184,,182,184,,,,,,,,,185,185,,185,,185,,183,185,,184,,,,,,,',
'184,184,184,184,184,184,,184,184,185,,,,,184,,,185,185,185,185,185,185',
',185,185,,,191,,,185,,,,,184,191,191,191,191,191,191,,191,,191,,,191',
'191,191,191,185,,,,,,,,,,,,,,,191,,,,191,191,,187,191,191,191,191,191',
'191,,191,191,,,187,187,187,191,187,,187,,188,187,187,187,187,,,,,,,',
'188,188,188,,188,191,188,,187,188,188,188,188,,,,187,187,187,187,187',
'187,,187,187,,,,188,,187,,,188,,,188,188,188,188,188,188,,188,188,189',
',,,,188,,187,,189,189,189,189,189,189,,189,,189,,,189,189,189,189,,',
'188,,,,,,,,,,,,,189,,,,189,189,,,189,189,189,189,189,189,190,189,189',
',,,,,189,190,190,190,190,190,190,,190,,190,,186,190,190,190,190,,,,',
',189,,,186,186,,186,,186,,190,186,,177,190,190,,,190,190,190,190,190',
'190,,190,190,177,,177,186,177,190,178,,,,,186,186,186,186,186,186,,186',
'186,178,,178,,178,186,177,190,,,,,,,,,,,,,,177,177,,,,178,186,177,,',
',,,,,,,,,,178,178,,278,278,278,278,178,278,278,278,278,278,,278,278',
',,,,,,278,278,278,283,283,283,283,,283,283,283,283,283,,283,283,,,278',
'278,,,283,283,283,220,220,220,220,,220,220,220,220,220,,220,220,,,283',
'283,,,220,220,220,,,,,,,,,,,,,,,,220,220' ]
        racc_action_check = arr = ::Array.new(6905, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   276,   nil,   nil,   nil,   122,   263,   nil,    85,   nil,
   nil,  6203,   370,   432,   494,   556,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   239,   175,   218,   804,   866,   928,   990,    82,   194,   nil,
    37,  1289,   nil,   nil,   nil,   nil,   nil,  1302,  1366,  1428,
   nil,   nil,   nil,   nil,  1490,   nil,   159,   160,   nil,  1676,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   218,  1800,   204,
  1924,  1986,  2048,  2110,  2172,  2234,  2296,  2358,  2420,  2482,
  2544,  2606,  2668,  2730,  2792,  2854,  2916,  2978,  3040,  3102,
  3164,  3226,  3288,  3350,  3412,  3474,  3536,  3598,   174,  3722,
   205,  3848,  3910,  4262,    61,  4168,  3762,  5672,  4286,   nil,
   189,   -10,  4474,  5618,   nil,  5503,  5392,  5227,    99,  4848,
   169,   nil,   nil,   nil,   nil,   157,    -7,   nil,   155,   nil,
   nil,   nil,   nil,   nil,   nil,  5170,   107,   nil,    52,   nil,
  5335,   108,   nil,   nil,  5446,   nil,    10,   nil,    81,  4536,
   -14,  5726,  1862,   nil,   134,   nil,   nil,   nil,   nil,   nil,
    80,  4136,  1278,     2,  6067,  6070,  6075,  6738,  6758,  6274,
  6317,  6334,  6377,  6394,  6441,  6458,  6715,  6564,  6584,  6641,
  6695,  6517,  6257,   nil,   nil,   308,   nil,  6146,   742,  1114,
  1176,    91,   109,   nil,   nil,    -2,   nil,    -9,    -8,    -1,
   -24,  3773,    -1,    -4,   nil,   nil,   nil,   nil,   nil,   nil,
  6835,  5281,   121,   nil,   146,   nil,   160,   114,   nil,  4410,
   nil,   199,   nil,   210,     1,   nil,  4096,  4034,  3972,  1238,
  1052,   196,   207,   nil,   -15,   199,   266,    15,   nil,  1353,
    -8,  4160,   nil,  4786,   nil,  4910,   nil,  5034,   nil,   nil,
   nil,   nil,  4722,   nil,   nil,   nil,    99,   nil,   nil,   nil,
   nil,  5561,    85,   nil,  4222,  1614,   119,   nil,  6791,   nil,
   136,  1738,   150,  6813,  4598,  5096,   161,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  4660,
   150,   nil,   170,   nil,   110,   146,  4972,   nil,   174,   106,
   179,   157,     7,  4348,   nil,   159,   189,   161,    48,   200,
   nil,    70,   nil,   200,  3786,  3660,   nil,   nil,   nil,  5780,
   nil,   nil,  5834,   nil,   nil,   nil,   151,    47,  5888,   222,
  1552,   223,   nil,   nil,   nil,   nil,  5942,  5996,   232,   172,
   nil,   nil,   nil,  6050,   122,   nil,   680,   238,   218,   nil,
   243,   248,   nil,   nil,   nil,   250,   253,   254,   nil,   618,
   nil,   nil,   nil,   243,   261,   nil,   nil,   264,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   246,   nil,
   184,    60,   nil,   nil,   nil,   269,   nil,   nil,   nil,   271,
   nil,   274,   nil,   278,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -235,  -236,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -109,  -236,  -236,  -236,  -236,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,
   -74,   -75,   -79,  -236,  -236,  -236,  -236,  -236,  -120,  -122,
  -236,  -236,  -169,  -170,  -171,  -172,  -173,  -236,  -236,  -236,
  -186,  -187,  -188,  -189,  -236,  -191,  -236,  -202,  -205,  -236,
  -210,  -211,  -212,  -213,  -214,  -215,  -216,  -236,  -236,    -7,
  -236,  -236,  -236,  -236,  -236,  -236,  -236,  -236,  -236,  -236,
  -236,  -236,  -236,  -236,  -236,  -236,  -236,  -236,  -236,  -236,
  -236,  -236,  -236,  -236,  -236,  -236,  -236,  -236,  -236,  -129,
  -124,  -235,  -235,   -28,  -236,   -29,   -36,  -236,  -236,   -76,
  -236,  -236,  -236,  -236,   -86,  -236,  -236,  -236,  -236,  -236,
  -235,  -139,  -160,  -161,  -121,  -235,  -235,  -148,  -150,  -151,
  -152,  -153,  -154,  -156,  -157,   -44,  -236,  -176,  -236,  -179,
  -236,  -236,  -182,  -183,  -195,  -190,  -236,  -198,  -236,  -236,
  -236,  -236,  -236,   409,    -6,    -9,   -12,   -13,   -14,   -15,
  -236,   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -25,   -26,
   -27,   -30,   -31,   -32,   -33,   -34,   -35,   -37,   -38,   -39,
   -40,   -41,  -236,   -42,  -104,  -236,   -80,  -236,  -228,  -234,
  -222,  -219,  -217,  -118,  -130,  -211,  -133,  -215,  -236,  -225,
  -223,  -231,  -213,  -214,  -221,  -226,  -227,  -229,  -230,  -232,
  -129,  -128,  -236,  -127,  -236,   -43,  -217,   -71,   -81,  -236,
   -84,  -217,  -165,  -168,  -236,   -78,  -236,  -236,  -236,  -129,
  -236,  -219,  -235,  -162,  -236,  -236,  -236,  -236,  -158,  -236,
  -236,  -236,  -174,  -236,  -177,  -236,  -180,  -236,  -192,  -193,
  -194,  -196,  -236,  -199,  -200,  -201,  -217,  -203,  -206,  -208,
  -209,  -109,  -236,   -17,  -236,  -236,  -217,  -106,  -129,  -117,
  -236,  -220,  -236,  -218,  -236,  -236,  -217,  -132,  -134,  -222,
  -223,  -224,  -225,  -228,  -231,  -233,  -234,  -125,  -126,  -218,
  -236,   -73,  -236,   -83,  -236,  -218,  -236,   -77,  -236,   -89,
  -236,   -95,  -236,  -236,   -99,  -219,  -217,  -219,  -236,  -236,
  -142,  -236,  -163,  -217,  -235,  -236,  -149,  -159,  -155,   -45,
  -175,  -178,  -185,  -181,  -184,  -197,  -236,  -236,  -108,  -236,
  -218,  -217,  -112,  -119,  -113,  -131,  -135,  -136,  -236,   -70,
   -82,   -85,  -166,  -167,   -89,   -88,  -236,  -236,   -95,   -94,
  -236,  -236,  -103,   -98,  -100,  -236,  -236,  -236,  -115,  -235,
  -143,  -144,  -145,  -236,  -236,  -140,  -141,  -236,  -147,  -204,
  -207,  -105,  -107,  -116,  -123,   -72,   -87,   -90,  -236,   -93,
  -236,  -236,  -110,  -111,  -114,  -236,  -164,  -137,  -146,  -236,
   -92,  -236,   -97,  -236,  -102,  -138,   -91,   -96,  -101 ]

racc_goto_table = [
     2,   135,     4,   119,   113,   115,   116,   117,   141,   155,
   268,   202,   139,   201,   280,   359,   231,   194,   374,   355,
   326,   242,   327,   222,   224,   314,   245,   228,   165,    79,
   343,   278,   193,   241,   345,   123,   125,   126,   127,   361,
   276,   313,   282,   319,   370,   246,   146,   148,   387,   145,
   145,   150,   328,   352,   318,   266,   154,   166,   167,   168,
   169,   161,   389,   395,   386,   334,   300,   263,   264,     3,
   261,   304,   262,   260,   170,   157,   159,   145,   171,   172,
   173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
   183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
   364,   197,   164,   221,   221,   277,   336,   226,     1,   nil,
   145,   234,   nil,   nil,   145,   nil,   339,   nil,   nil,   nil,
   nil,   197,   286,   nil,   nil,   nil,   348,   nil,   365,   nil,
   367,   nil,   243,   nil,   nil,   nil,   nil,   243,   248,   323,
   nil,   316,   nil,   315,   317,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   271,   nil,   366,   nil,   nil,   265,
   135,   nil,   272,   373,   nil,   nil,   nil,   nil,   141,   nil,
   nil,   nil,   139,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   341,   383,   nil,   nil,   nil,   nil,   380,   192,   nil,   301,
   123,   125,   126,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   141,   nil,   141,   335,   139,   nil,
   139,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   302,
   145,   197,   197,   nil,   nil,   nil,   308,   310,   nil,   nil,
   nil,   nil,   nil,   329,   320,   329,   nil,   332,   nil,   150,
   382,   nil,   nil,   nil,   154,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   329,   338,   nil,   nil,
   nil,   nil,   371,   197,   nil,   nil,   346,   347,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   329,   nil,   nil,   nil,   nil,   nil,   nil,   353,   nil,
   nil,   nil,   nil,   nil,   nil,   145,   nil,   nil,   nil,   nil,
   nil,   385,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   377,   376,   nil,   nil,   nil,
   nil,   nil,   192,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   123,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   376,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   399,   nil,
   401,   403 ]

racc_goto_check = [
     2,    65,     4,    40,    10,    10,    10,    10,    32,    83,
    90,    57,    38,    55,    56,    48,    45,    52,    67,    47,
    73,    66,    73,    61,    61,    50,    66,    44,     7,     6,
    58,    59,    13,    55,    62,    10,    10,    10,    10,    51,
    53,    49,    39,    69,    70,    72,    12,    12,    46,    10,
    10,    10,    75,    76,    56,    45,    10,     8,     8,     8,
     8,    10,    48,    67,    47,    78,    39,    79,    80,     3,
    84,    39,    85,    87,    12,    88,    89,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    50,    10,     6,    10,    10,    52,    39,    12,     1,   nil,
    10,    12,   nil,   nil,    10,   nil,    39,   nil,   nil,   nil,
   nil,    10,    57,   nil,   nil,   nil,    39,   nil,    56,   nil,
    56,   nil,     4,   nil,   nil,   nil,   nil,     4,     4,    45,
   nil,    57,   nil,    55,    55,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,    39,   nil,   nil,     2,
    65,   nil,     2,    39,   nil,   nil,   nil,   nil,    32,   nil,
   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    57,    39,   nil,   nil,   nil,   nil,    90,    10,   nil,    40,
    10,    10,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32,   nil,    32,    83,    38,   nil,
    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
    10,    10,    10,   nil,   nil,   nil,     2,     2,   nil,   nil,
   nil,   nil,   nil,    10,     4,    10,   nil,    10,   nil,    10,
    52,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,    10,   nil,   nil,
   nil,   nil,    65,    10,   nil,   nil,    10,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,     4,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
     2,     2 ]

racc_goto_pointer = [
   nil,   108,     0,    69,     2,   nil,    24,   -52,   -24,   nil,
    -8,   nil,   -11,   -75,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -43,   nil,   nil,   nil,   nil,   nil,   -39,  -160,
   -38,   nil,   nil,   nil,   -93,  -105,  -308,  -290,  -296,  -197,
  -213,  -273,   -90,  -155,   nil,   -96,  -187,   -98,  -251,  -166,
   nil,   -88,  -249,   nil,   nil,   -49,  -109,  -306,   nil,  -199,
  -277,   nil,   -91,  -227,   nil,  -198,  -252,   nil,  -192,   -91,
   -90,   nil,   nil,   -55,   -86,   -84,   nil,   -83,     9,     9,
  -151 ]

racc_goto_default = [
   nil,   nil,   375,   nil,   223,     5,     6,     7,     8,     9,
    11,    10,   312,   nil,    16,    40,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,   nil,
   nil,    41,    42,   120,   nil,   nil,   124,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   203,   nil,
   110,   nil,   204,   208,   206,   131,   nil,   nil,   130,   nil,
   nil,   136,   nil,   137,   138,   142,   232,   151,   153,    60,
    61,    62,    64,   nil,   nil,   nil,   156,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 94, :_reduce_1,
  1, 94, :_reduce_2,
  1, 94, :_reduce_none,
  1, 95, :_reduce_4,
  1, 98, :_reduce_5,
  3, 98, :_reduce_6,
  2, 98, :_reduce_7,
  1, 99, :_reduce_8,
  3, 99, :_reduce_9,
  1, 100, :_reduce_none,
  1, 101, :_reduce_11,
  3, 101, :_reduce_12,
  3, 101, :_reduce_13,
  3, 101, :_reduce_14,
  3, 101, :_reduce_15,
  1, 103, :_reduce_none,
  4, 103, :_reduce_17,
  3, 103, :_reduce_18,
  3, 103, :_reduce_19,
  3, 103, :_reduce_20,
  3, 103, :_reduce_21,
  3, 103, :_reduce_22,
  3, 103, :_reduce_23,
  3, 103, :_reduce_24,
  3, 103, :_reduce_25,
  3, 103, :_reduce_26,
  3, 103, :_reduce_27,
  2, 103, :_reduce_28,
  2, 103, :_reduce_29,
  3, 103, :_reduce_30,
  3, 103, :_reduce_31,
  3, 103, :_reduce_32,
  3, 103, :_reduce_33,
  3, 103, :_reduce_34,
  3, 103, :_reduce_35,
  2, 103, :_reduce_36,
  3, 103, :_reduce_37,
  3, 103, :_reduce_38,
  3, 103, :_reduce_39,
  3, 103, :_reduce_40,
  3, 103, :_reduce_41,
  3, 103, :_reduce_42,
  3, 103, :_reduce_43,
  1, 105, :_reduce_44,
  3, 105, :_reduce_45,
  1, 104, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 126, :_reduce_68,
  1, 126, :_reduce_69,
  5, 107, :_reduce_70,
  3, 107, :_reduce_71,
  6, 107, :_reduce_72,
  4, 107, :_reduce_73,
  1, 107, :_reduce_74,
  1, 111, :_reduce_75,
  2, 111, :_reduce_76,
  4, 134, :_reduce_77,
  3, 134, :_reduce_78,
  1, 134, :_reduce_79,
  3, 135, :_reduce_80,
  2, 133, :_reduce_81,
  3, 137, :_reduce_82,
  2, 137, :_reduce_83,
  2, 136, :_reduce_84,
  4, 136, :_reduce_85,
  2, 114, :_reduce_86,
  5, 139, :_reduce_87,
  4, 139, :_reduce_88,
  0, 140, :_reduce_none,
  2, 140, :_reduce_90,
  4, 140, :_reduce_91,
  3, 140, :_reduce_92,
  6, 115, :_reduce_93,
  5, 115, :_reduce_94,
  0, 141, :_reduce_none,
  4, 141, :_reduce_96,
  3, 141, :_reduce_97,
  5, 113, :_reduce_98,
  1, 142, :_reduce_99,
  2, 142, :_reduce_100,
  5, 143, :_reduce_101,
  4, 143, :_reduce_102,
  1, 144, :_reduce_103,
  1, 106, :_reduce_none,
  4, 106, :_reduce_105,
  1, 146, :_reduce_106,
  3, 146, :_reduce_107,
  3, 145, :_reduce_108,
  1, 102, :_reduce_109,
  6, 102, :_reduce_110,
  6, 102, :_reduce_111,
  5, 102, :_reduce_112,
  5, 102, :_reduce_113,
  6, 102, :_reduce_114,
  5, 102, :_reduce_115,
  4, 151, :_reduce_116,
  1, 152, :_reduce_117,
  1, 148, :_reduce_118,
  3, 148, :_reduce_119,
  1, 147, :_reduce_120,
  2, 147, :_reduce_121,
  1, 147, :_reduce_122,
  6, 112, :_reduce_123,
  2, 112, :_reduce_124,
  3, 153, :_reduce_125,
  3, 153, :_reduce_126,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  0, 150, :_reduce_129,
  1, 150, :_reduce_130,
  3, 150, :_reduce_131,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  3, 155, :_reduce_135,
  3, 155, :_reduce_136,
  6, 116, :_reduce_137,
  7, 117, :_reduce_138,
  1, 161, :_reduce_139,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 162, :_reduce_none,
  2, 162, :_reduce_143,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  6, 118, :_reduce_146,
  5, 118, :_reduce_147,
  1, 164, :_reduce_148,
  3, 164, :_reduce_149,
  1, 166, :_reduce_150,
  1, 166, :_reduce_151,
  1, 166, :_reduce_152,
  1, 166, :_reduce_none,
  1, 167, :_reduce_154,
  3, 167, :_reduce_155,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 165, :_reduce_none,
  2, 165, :_reduce_159,
  1, 158, :_reduce_160,
  1, 158, :_reduce_161,
  1, 159, :_reduce_162,
  2, 159, :_reduce_163,
  4, 159, :_reduce_164,
  1, 138, :_reduce_165,
  3, 138, :_reduce_166,
  3, 169, :_reduce_167,
  1, 169, :_reduce_168,
  1, 110, :_reduce_169,
  1, 120, :_reduce_170,
  1, 120, :_reduce_171,
  1, 120, :_reduce_172,
  1, 120, :_reduce_173,
  3, 121, :_reduce_174,
  4, 121, :_reduce_175,
  2, 121, :_reduce_176,
  3, 121, :_reduce_177,
  4, 121, :_reduce_178,
  2, 121, :_reduce_179,
  3, 124, :_reduce_180,
  4, 124, :_reduce_181,
  2, 124, :_reduce_182,
  1, 170, :_reduce_183,
  3, 170, :_reduce_184,
  3, 171, :_reduce_185,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 172, :_reduce_189,
  2, 173, :_reduce_190,
  1, 175, :_reduce_191,
  1, 177, :_reduce_192,
  1, 178, :_reduce_193,
  2, 176, :_reduce_194,
  1, 179, :_reduce_195,
  1, 180, :_reduce_196,
  2, 180, :_reduce_197,
  2, 174, :_reduce_198,
  2, 181, :_reduce_199,
  2, 181, :_reduce_200,
  3, 96, :_reduce_201,
  0, 182, :_reduce_202,
  2, 182, :_reduce_203,
  4, 182, :_reduce_204,
  1, 119, :_reduce_205,
  3, 119, :_reduce_206,
  5, 119, :_reduce_207,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 127, :_reduce_210,
  1, 130, :_reduce_211,
  1, 128, :_reduce_212,
  1, 129, :_reduce_213,
  1, 123, :_reduce_214,
  1, 122, :_reduce_215,
  1, 125, :_reduce_216,
  0, 132, :_reduce_none,
  1, 132, :_reduce_218,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  0, 97, :_reduce_235 ]

racc_reduce_n = 236

racc_shift_n = 409

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :DELETES => 17,
  :LESSEQUAL => 18,
  :NOTEQUAL => 19,
  :DOT => 20,
  :COLON => 21,
  :LLCOLLECT => 22,
  :RRCOLLECT => 23,
  :QMARK => 24,
  :LPAREN => 25,
  :RPAREN => 26,
  :ISEQUAL => 27,
  :GREATEREQUAL => 28,
  :GREATERTHAN => 29,
  :LESSTHAN => 30,
  :IF => 31,
  :ELSE => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :ATAT => 45,
  :LCOLLECT => 46,
  :RCOLLECT => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68,
  :UNLESS => 69,
  :PIPE => 70,
  :LAMBDA => 71,
  :SELBRACE => 72,
  :NUMBER => 73,
  :HEREDOC => 74,
  :SUBLOCATE => 75,
  :RENDER_STRING => 76,
  :RENDER_EXPR => 77,
  :EPP_START => 78,
  :EPP_END => 79,
  :EPP_END_TRIM => 80,
  :FUNCTION => 81,
  :PRIVATE => 82,
  :ATTR => 83,
  :TYPE => 84,
  :LOW => 85,
  :HIGH => 86,
  :CALL => 87,
  :LISTSTART => 88,
  :SPLAT => 89,
  :MODULO => 90,
  :TITLE_COLON => 91,
  :CASE_COLON => 92 }

racc_nt_base = 93

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 73)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_29(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_30(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_31(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_32(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_33(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_34(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_35(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_36(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_37(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_38(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_39(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_40(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_41(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_42(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_43(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 137)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_45(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'egrammar.ra', 171)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 184)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 193)
  def _reduce_73(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_75(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_76(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_78(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_79(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_80(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_81(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_82(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_83(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 236)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 246)
  def _reduce_86(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_88(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 265)
  def _reduce_90(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 269)
  def _reduce_91(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_92(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_94(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_96(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_97(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_98(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 314)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_100(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 320)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 324)
  def _reduce_102(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 328)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_105(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 344)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 362)
  def _reduce_109(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 365)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 380)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 388)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 401)
  def _reduce_113(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 422)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_115(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_116(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_117(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_120(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_121(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_122(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 461)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 480)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 498)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 502)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 512)
  def _reduce_137(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 526)
  def _reduce_138(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 536)
  def _reduce_139(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 545)
  def _reduce_143(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 562)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_148(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_149(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_151(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_152(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_154(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_155(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 598)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_160(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_161(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_162(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_164(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_165(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_166(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_167(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_168(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_169(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_170(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_171(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_172(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_173(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_174(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_175(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_176(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_177(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_178(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_179(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_180(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_181(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_182(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_183(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_184(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_185(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_189(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_190(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_191(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_192(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_193(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_194(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_195(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_196(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_197(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_198(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_199(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_200(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_201(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_202(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_203(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_204(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_205(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_206(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 712)
  def _reduce_207(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 208 omitted

# reduce 209 omitted

module_eval(<<'.,.,', 'egrammar.ra', 718)
  def _reduce_210(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 719)
  def _reduce_211(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_212(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_213(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_214(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 727)
  def _reduce_215(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 730)
  def _reduce_216(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 217 omitted

module_eval(<<'.,.,', 'egrammar.ra', 736)
  def _reduce_218(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

module_eval(<<'.,.,', 'egrammar.ra', 759)
  def _reduce_235(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
