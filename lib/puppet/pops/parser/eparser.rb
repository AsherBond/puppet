#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 737)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'57,59,-132,269,51,259,53,-130,79,-213,-222,126,259,126,79,125,307,125',
'356,292,223,346,102,14,106,223,101,234,102,41,106,48,101,50,45,234,49',
'69,65,237,43,68,46,47,-132,270,66,13,105,-130,67,-213,-222,12,105,220',
'57,59,249,248,51,70,53,387,239,223,246,42,79,247,80,64,60,122,62,63',
'61,126,242,14,52,125,102,241,106,41,101,48,290,50,45,126,49,69,65,125',
'43,68,46,47,257,126,66,13,240,125,67,244,105,12,57,59,243,258,51,126',
'53,70,259,125,341,313,340,42,79,324,230,64,60,310,62,63,341,14,340,326',
'52,219,102,41,106,48,101,50,45,328,49,69,65,72,43,68,46,47,126,309,66',
'13,125,306,67,57,59,12,105,266,57,59,268,291,51,70,53,385,86,85,333',
'42,79,81,82,64,60,334,62,63,80,335,223,14,52,210,102,338,106,41,101',
'48,290,50,45,87,49,69,65,342,43,68,46,47,344,74,66,13,186,266,67,268',
'105,12,266,352,57,59,353,114,51,70,53,383,290,74,153,42,151,149,363',
'64,60,284,62,63,364,57,59,14,52,57,59,283,268,41,127,48,282,50,45,367',
'49,69,65,114,43,68,46,47,115,268,66,13,114,371,67,344,373,12,57,59,374',
'375,51,135,53,70,133,135,376,377,133,42,111,379,380,64,60,381,62,63',
'266,14,74,71,52,388,70,41,389,48,70,50,108,390,49,69,65,60,43,68,391',
'60,,,66,13,,,67,,,12,57,59,,,51,,53,70,75,77,76,78,,42,,,,64,60,,62',
'63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57',
'59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
',62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,45,',
'49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,',
',64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,',
',67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48',
',50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,',
'42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66',
'13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41',
',48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,',
',,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,',
',,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52',
',,41,,48,,50,121,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,',
'52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,79,,,64,60,,62,63,,14,,,52,,102,41,106,48,101,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,105,,57,59,,,51,70,53,288,86,85',
',42,,81,82,64,60,,62,63,80,,,14,52,57,59,,,41,,48,,50,45,87,49,69,65',
',43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,138,53,70,,135,,,133,42,,',
',64,60,,62,63,,14,,,52,,,41,,48,70,50,108,,49,69,65,,43,68,,60,,,66',
'13,57,59,67,,,12,57,59,,,51,140,53,70,,,,,,42,,,,64,60,,62,63,,14,,',
'52,,,41,,48,135,50,108,133,49,69,65,,43,68,,,,,66,13,,,67,,,12,,70,57',
'59,,,51,70,53,143,,,60,42,,,,64,60,,62,63,,,,14,52,,,,,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,79,,',
'64,60,,62,63,,14,,,52,,102,41,106,48,101,50,108,,49,69,65,,43,68,,,',
',66,13,,,67,,,12,105,,57,59,,,51,70,53,294,,,,42,,81,82,64,60,,62,63',
'80,,,14,52,,,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,45,',
'49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,79',
',,64,60,,62,63,,14,,,52,,102,41,106,48,101,50,108,,49,69,65,,43,68,',
',,,66,13,,,67,,,12,105,,57,59,,,51,70,53,362,,,,42,,,,64,60,,62,63,80',
',,14,52,,,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57',
'59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,45,,49',
'69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,,62,63,,14,,,52,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,',
'67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48',
',50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,',
',,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,45,,49,69,65,,43,68,46,47',
',,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52',
',,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,45,,49,69,65,,43',
'68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63',
',14,,,52,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57',
'59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
',62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67',
',,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50',
'108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,',
',,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13',
',,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48',
',50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,',
'42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66',
'13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41',
',48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,',
',,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,',
',,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52',
',,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,',
'52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,',
'43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63',
',14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59',
',,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69',
'65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62',
'63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57',
'59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
',62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67',
',,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50',
'108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,',
',,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13',
',,67,,,12,,,57,59,,,51,70,53,347,,,,42,,,185,64,60,,62,63,,,,14,52,',
',,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,188,205,199,206,50,200,208,201',
'197,195,,190,203,,,,,66,13,209,204,202,,,12,57,59,,,51,,53,70,,,,,207',
'189,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66',
'13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41',
',48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,',
',,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,',
',,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52',
',,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,79,,,64,60,,62,63,,14',
',,52,,102,41,106,48,101,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'105,,57,59,,,51,70,53,296,,,,42,,81,82,64,60,,62,63,80,,,14,52,,,,,41',
',48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70',
',,,,,42,,,,64,60,,62,63,,14,217,,52,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,',
'52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,',
'43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63',
',14,225,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57',
'59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,316,53,70,,,,,,42,,,,64',
'60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67',
',,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50',
'108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,315,53,70,,,,,,42',
',,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13',
',,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48',
',50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,',
'42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66',
'13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,79,,,64,60,,62,63,,14,,,52,,102',
'41,106,48,101,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,105,,57,59',
',,51,70,53,318,,,,42,,81,82,64,60,,62,63,80,,,14,52,,,,,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67',
',,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,188,205,199',
'206,50,200,208,201,197,195,,190,203,,,,,66,13,209,204,202,,,12,,,,,',
',,70,,,,,207,189,,,,64,60,79,62,63,,,,,52,,98,99,100,95,90,102,,106',
',101,,,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,',
'81,82,79,,229,,,80,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94',
',,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,228,,,80',
',,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105',
',,,97,96,,,83,84,86,85,88,89,,81,82,,79,,,,80,245,,,,98,99,100,95,90',
'102,,106,,101,87,,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86',
'85,88,89,,81,82,79,,227,,,80,,,,98,99,100,95,90,102,,106,,101,,87,91',
'93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,',
',,,80,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,,,,,',
',,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,226,,,80,,,,98,99,100',
'95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83',
'84,86,85,88,89,,81,82,,79,,,,80,,,,,98,99,100,95,90,102,,106,,101,87',
'215,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81',
'82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,',
',,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99',
'100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96',
',,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101',
',87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81',
'82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,',
',,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99',
'100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96',
',,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101',
',87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81',
'82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,',
',,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99',
'100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96',
',,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102,264,106',
',101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89',
',81,82,79,,103,,,80,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94',
',,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,,79,,,,80,260',
',,,98,99,100,95,90,102,,106,79,101,87,,91,93,92,94,,,,,,,102,,106,,101',
',,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,105,,,79,,80,,,83,84,86',
'85,,,,81,82,102,,106,87,101,80,,,,79,,,,,,,,,,,87,,,102,,106,105,101',
',79,,,,,83,84,86,85,,,,81,82,102,,106,,101,80,105,,,,,,,,83,84,86,85',
'88,89,87,81,82,,,,105,,80,,,79,,,83,84,86,85,88,89,,81,82,87,90,102',
',106,80,101,,79,91,,,,,,,,,,,87,90,102,,106,,101,,105,91,,,,,,,83,84',
'86,85,88,89,,81,82,,,,105,,80,,,79,,,83,84,86,85,88,89,,81,82,87,90',
'102,,106,80,101,,79,91,,,,,,,,,,,87,90,102,,106,,101,,105,91,,,,,,,83',
'84,86,85,88,89,,81,82,,,,105,,80,,,,,79,83,84,86,85,88,89,,81,82,87',
',95,90,102,80,106,,101,,79,91,93,92,94,,,,,,87,,95,90,102,,106,,101',
',105,91,93,92,94,,,,83,84,86,85,88,89,,81,82,,,,105,,80,,,96,,,83,84',
'86,85,88,89,,81,82,87,79,,,,80,,,,,98,99,100,95,90,102,,106,,101,87',
',91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82',
'79,,,,,80,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,',
',,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99,100',
'95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83',
'84,86,85,88,89,,81,82,,,,,,80,278,205,277,206,,275,208,279,273,272,',
'274,276,,87,,,,,209,204,280,278,205,277,206,,275,208,279,273,272,,274',
'276,,,207,281,,,209,204,280,278,205,277,206,,275,208,279,273,272,,274',
'276,,,207,281,,,209,204,280,,,,,,,,,,,,,,,,207,281' ]
        racc_action_table = arr = ::Array.new(6060, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,197,198,0,224,0,195,163,203,202,306,297,200,161,306,234,200,306',
'224,114,297,163,0,163,234,163,128,161,0,161,0,161,0,0,123,0,0,0,129',
'0,0,0,0,197,198,0,0,163,195,0,203,202,0,161,114,374,374,147,147,374',
'0,374,374,129,151,142,0,107,142,163,0,0,45,0,0,0,108,137,374,0,108,107',
'137,107,374,107,374,256,374,374,199,374,374,374,199,374,374,374,374',
'151,45,374,374,131,45,374,139,107,374,5,5,139,160,5,48,5,374,160,48',
'338,240,338,374,164,261,121,374,374,236,374,374,294,5,294,265,374,113',
'164,5,164,5,164,5,5,267,5,5,5,5,5,5,5,5,121,235,5,5,121,232,5,149,149',
'5,164,231,373,373,271,223,373,5,373,373,164,164,285,5,109,164,164,5',
'5,287,5,5,164,289,290,373,5,104,109,293,109,373,109,373,221,373,373',
'164,373,373,373,295,373,373,373,373,296,154,373,373,102,300,373,301',
'109,373,302,303,371,371,304,217,371,373,371,371,308,73,71,373,61,60',
'321,373,373,216,373,373,323,49,49,371,373,239,239,214,325,371,46,371',
'212,371,371,332,371,371,371,333,371,371,371,371,40,192,371,371,39,341',
'371,342,344,371,185,185,345,349,185,49,185,371,49,239,350,351,239,371',
'38,357,358,371,371,361,371,371,191,185,6,1,371,378,49,185,382,185,239',
'185,185,384,185,185,185,49,185,185,386,239,,,185,185,,,185,,,185,12',
'12,,,12,,12,185,8,8,8,8,,185,,,,185,185,,185,185,,12,,,185,,,12,,12',
',12,12,,12,12,12,,12,12,,,,,12,12,,,12,,,12,13,13,,,13,,13,12,,,,,,12',
',,,12,12,,12,12,,13,,,12,,,13,,13,,13,13,,13,13,13,,13,13,,,,,13,13',
',,13,,,13,14,14,,,14,,14,13,,,,,,13,,,,13,13,,13,13,,14,,,13,,,14,,14',
',14,14,,14,14,14,,14,14,,,,,14,14,,,14,,,14,353,353,,,353,,353,14,,',
',,,14,,,,14,14,,14,14,,353,,,14,,,353,,353,,353,353,,353,353,353,,353',
'353,353,353,,,353,353,,,353,,,353,340,340,,,340,,340,353,,,,,,353,,',
',353,353,,353,353,,340,,,353,,,340,,340,,340,340,,340,340,340,,340,340',
',,,,340,340,,,340,,,340,188,188,,,188,,188,340,,,,,,340,,,,340,340,',
'340,340,,188,,,340,,,188,,188,,188,188,,188,188,188,,188,188,,,,,188',
'188,,,188,,,188,41,41,,,41,,41,188,,,,,,188,,,,188,188,,188,188,,41',
',,188,,,41,,41,,41,41,,41,41,41,,41,41,,,,,41,41,,,41,,,41,42,42,,,42',
',42,41,,,,,,41,,,,41,41,,41,41,,42,,,41,,,42,,42,,42,42,,42,42,42,,42',
'42,,,,,42,42,,,42,,,42,43,43,,,43,,43,42,,,,,,42,,,,42,42,,42,42,,43',
',,42,,,43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,44,44,,,44',
',44,43,,,,,,43,,,,43,43,,43,43,,44,,,43,,,44,,44,,44,44,,44,44,44,,44',
'44,,,,,44,44,,,44,,,44,189,189,,,189,,189,44,,,,,,44,,,,44,44,,44,44',
',189,,,44,,,189,,189,,189,189,,189,189,189,,189,189,,,,,189,189,,,189',
',,189,190,190,,,190,,190,189,,,,,,189,,,,189,189,,189,189,,190,,,189',
',,190,,190,,190,190,,190,190,190,,190,190,,,,,190,190,,,190,,,190,324',
'324,,,324,,324,190,,,,,,190,165,,,190,190,,190,190,,324,,,190,,165,324',
'165,324,165,324,324,,324,324,324,,324,324,,,,,324,324,,,324,,,324,165',
',219,219,,,219,324,219,219,165,165,,324,,165,165,324,324,,324,324,165',
',,219,324,237,237,,,219,,219,,219,219,165,219,219,219,,219,219,219,219',
',,219,219,,,219,,,219,51,51,,,51,51,51,219,,237,,,237,219,,,,219,219',
',219,219,,51,,,219,,,51,,51,237,51,51,,51,51,51,,51,51,,237,,,51,51',
'201,201,51,,,51,52,52,,,52,52,52,51,,,,,,51,,,,51,51,,51,51,,52,,,51',
',,52,,52,201,52,52,201,52,52,52,,52,52,,,,,52,52,,,52,,,52,,201,53,53',
',,53,52,53,53,,,201,52,,,,52,52,,52,52,,,,53,52,,,,,53,,53,,53,53,,53',
'53,53,,53,53,,,,,53,53,,,53,,,53,58,58,,,58,,58,53,,,,,,53,168,,,53',
'53,,53,53,,58,,,53,,168,58,168,58,168,58,58,,58,58,58,,58,58,,,,,58',
'58,,,58,,,58,168,,226,226,,,226,58,226,226,,,,58,,168,168,58,58,,58',
'58,168,,,226,58,,,,,226,,226,,226,226,,226,226,226,,226,226,226,226',
',,226,226,,,226,,,226,150,150,,,150,,150,226,,,,,,226,,,,226,226,,226',
'226,,150,,,226,,,150,,150,,150,150,,150,150,150,,150,150,150,150,,,150',
'150,,,150,,,150,63,63,,,63,,63,150,,,,,,150,162,,,150,150,,150,150,',
'63,,,150,,162,63,162,63,162,63,63,,63,63,63,,63,63,,,,,63,63,,,63,,',
'63,162,,310,310,,,310,63,310,310,,,,63,,,,63,63,,63,63,162,,,310,63',
',,,,310,,310,,310,310,,310,310,310,,310,310,310,310,,,310,310,,,310',
',,310,72,72,,,72,,72,310,,,,,,310,,,,310,310,,310,310,,72,,,310,,,72',
',72,,72,72,,72,72,72,,72,72,72,72,,,72,72,,,72,,,72,309,309,,,309,,309',
'72,,,,,,72,,,,72,72,,72,72,,309,,,72,,,309,,309,,309,309,,309,309,309',
',309,309,309,309,,,309,309,,,309,,,309,74,74,,,74,,74,309,,,,,,309,',
',,309,309,,309,309,,74,,,309,,,74,,74,,74,74,,74,74,74,,74,74,74,74',
',,74,74,,,74,,,74,75,75,,,75,,75,74,,,,,,74,,,,74,74,,74,74,,75,,,74',
',,75,,75,,75,75,,75,75,75,,75,75,75,75,,,75,75,,,75,,,75,76,76,,,76',
',76,75,,,,,,75,,,,75,75,,75,75,,76,,,75,,,76,,76,,76,76,,76,76,76,,76',
'76,76,76,,,76,76,,,76,,,76,77,77,,,77,,77,76,,,,,,76,,,,76,76,,76,76',
',77,,,76,,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,78',
'78,,,78,,78,77,,,,,,77,,,,77,77,,77,77,,78,,,77,,,78,,78,,78,78,,78',
'78,78,,78,78,78,78,,,78,78,,,78,,,78,79,79,,,79,,79,78,,,,,,78,,,,78',
'78,,78,78,,79,,,78,,,79,,79,,79,79,,79,79,79,,79,79,,,,,79,79,,,79,',
',79,80,80,,,80,,80,79,,,,,,79,,,,79,79,,79,79,,80,,,79,,,80,,80,,80',
'80,,80,80,80,,80,80,,,,,80,80,,,80,,,80,81,81,,,81,,81,80,,,,,,80,,',
',80,80,,80,80,,81,,,80,,,81,,81,,81,81,,81,81,81,,81,81,,,,,81,81,,',
'81,,,81,82,82,,,82,,82,81,,,,,,81,,,,81,81,,81,81,,82,,,81,,,82,,82',
',82,82,,82,82,82,,82,82,,,,,82,82,,,82,,,82,83,83,,,83,,83,82,,,,,,82',
',,,82,82,,82,82,,83,,,82,,,83,,83,,83,83,,83,83,83,,83,83,,,,,83,83',
',,83,,,83,84,84,,,84,,84,83,,,,,,83,,,,83,83,,83,83,,84,,,83,,,84,,84',
',84,84,,84,84,84,,84,84,,,,,84,84,,,84,,,84,85,85,,,85,,85,84,,,,,,84',
',,,84,84,,84,84,,85,,,84,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85',
',,85,,,85,86,86,,,86,,86,85,,,,,,85,,,,85,85,,85,85,,86,,,85,,,86,,86',
',86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,87,87,,,87,,87,86,,,,,,86',
',,,86,86,,86,86,,87,,,86,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87',
',,87,,,87,88,88,,,88,,88,87,,,,,,87,,,,87,87,,87,87,,88,,,87,,,88,,88',
',88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,89,89,,,89,,89,88,,,,,,88',
',,,88,88,,88,88,,89,,,88,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89',
',,89,,,89,90,90,,,90,,90,89,,,,,,89,,,,89,89,,89,89,,90,,,89,,,90,,90',
',90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,91,91,,,91,,91,90,,,,,,90',
',,,90,90,,90,90,,91,,,90,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91',
',,91,,,91,92,92,,,92,,92,91,,,,,,91,,,,91,91,,91,91,,92,,,91,,,92,,92',
',92,92,,92,92,92,,92,92,,,,,92,92,,,92,,,92,93,93,,,93,,93,92,,,,,,92',
',,,92,92,,92,92,,93,,,92,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93',
',,93,,,93,94,94,,,94,,94,93,,,,,,93,,,,93,93,,93,93,,94,,,93,,,94,,94',
',94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,95,95,,,95,,95,94,,,,,,94',
',,,94,94,,94,94,,95,,,94,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95',
',,95,,,95,96,96,,,96,,96,95,,,,,,95,,,,95,95,,95,95,,96,,,95,,,96,,96',
',96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,97,97,,,97,,97,96,,,,,,96',
',,,96,96,,96,96,,97,,,96,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97',
',,97,,,97,98,98,,,98,,98,97,,,,,,97,,,,97,97,,97,97,,98,,,97,,,98,,98',
',98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,99,99,,,99,,99,98,,,,,,98',
',,,98,98,,98,98,,99,,,98,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99',
',,99,,,99,100,100,,,100,,100,99,,,,,,99,,,,99,99,,99,99,,100,,,99,,',
'100,,100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,101',
'101,,,101,,101,100,,,,,,100,,,,100,100,,100,100,,101,,,100,,,101,,101',
',101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,,,298,298,,,298',
'101,298,298,,,,101,,,101,101,101,,101,101,,,,298,101,,,,,298,,298,,298',
'298,,298,298,298,,298,298,,,,,298,298,,,298,,,298,103,103,,,103,,103',
'298,,,,,,298,,,,298,298,,298,298,,103,,,298,,,103,103,103,103,103,103',
'103,103,103,103,,103,103,,,,,103,103,103,103,103,,,103,291,291,,,291',
',291,103,,,,,103,103,,,,103,103,,103,103,,291,,,103,,,291,,291,,291',
'291,,291,291,291,,291,291,,,,,291,291,,,291,,,291,105,105,,,105,,105',
'291,,,,,,291,,,,291,291,,291,291,,105,,,291,,,105,,105,,105,105,,105',
'105,105,,105,105,,,,,105,105,,,105,,,105,106,106,,,106,,106,105,,,,',
',105,,,,105,105,,105,105,,106,,,105,,,106,,106,,106,106,,106,106,106',
',106,106,,,,,106,106,,,106,,,106,284,284,,,284,,284,106,,,,,,106,,,',
'106,106,,106,106,,284,,,106,,,284,,284,,284,284,,284,284,284,,284,284',
',,,,284,284,,,284,,,284,270,270,,,270,,270,284,,,,,,284,,,,284,284,',
'284,284,,270,,,284,,,270,,270,,270,270,,270,270,270,,270,270,,,,,270',
'270,,,270,,,270,269,269,,,269,,269,270,,,,,,270,167,,,270,270,,270,270',
',269,,,270,,167,269,167,269,167,269,269,,269,269,269,,269,269,,,,,269',
'269,,,269,,,269,167,,227,227,,,227,269,227,227,,,,269,,167,167,269,269',
',269,269,167,,,227,269,,,,,227,,227,,227,227,,227,227,227,,227,227,227',
'227,,,227,227,,,227,,,227,111,111,,,111,,111,227,,,,,,227,,,,227,227',
',227,227,,111,111,,227,,,111,,111,,111,111,,111,111,111,,111,111,,,',
',111,111,,,111,,,111,266,266,,,266,,266,111,,,,,,111,,,,111,111,,111',
'111,,266,,,111,,,266,,266,,266,266,,266,266,266,,266,266,,,,,266,266',
',,266,,,266,260,260,,,260,,260,266,,,,,,266,,,,266,266,,266,266,,260',
',,266,,,260,,260,,260,260,,260,260,260,,260,260,,,,,260,260,,,260,,',
'260,115,115,,,115,,115,260,,,,,,260,,,,260,260,,260,260,,115,115,,260',
',,115,,115,,115,115,,115,115,115,,115,115,,,,,115,115,,,115,,,115,228',
'228,,,228,,228,115,,,,,,115,,,,115,115,,115,115,,228,,,115,,,228,,228',
',228,228,,228,228,228,,228,228,,,,,228,228,,,228,,,228,243,243,,,243',
'243,243,228,,,,,,228,,,,228,228,,228,228,,243,,,228,,,243,,243,,243',
'243,,243,243,243,,243,243,,,,,243,243,,,243,,,243,230,230,,,230,,230',
'243,,,,,,243,,,,243,243,,243,243,,230,,,243,,,230,,230,,230,230,,230',
'230,230,,230,230,,,,,230,230,,,230,,,230,241,241,,,241,241,241,230,',
',,,,230,,,,230,230,,230,230,,241,,,230,,,241,,241,,241,241,,241,241',
'241,,241,241,,,,,241,241,,,241,,,241,259,259,,,259,,259,241,,,,,,241',
',,,241,241,,241,241,,259,,,241,,,259,,259,,259,259,,259,259,259,,259',
'259,,,,,259,259,,,259,,,259,122,122,,,122,,122,259,,,,,,259,,,,259,259',
',259,259,,122,,,259,,,122,,122,,122,122,,122,122,122,,122,122,,,,,122',
'122,,,122,,,122,252,252,,,252,,252,122,,,,,,122,166,,,122,122,,122,122',
',252,,,122,,166,252,166,252,166,252,252,,252,252,252,,252,252,,,,,252',
'252,,,252,,,252,166,,247,247,,,247,252,247,247,,,,252,,166,166,252,252',
',252,252,166,,,247,252,,,,,247,,247,,247,247,,247,247,247,,247,247,',
',,,247,247,,,247,,,247,245,245,,,245,,245,247,,,,,,247,,,,247,247,,247',
'247,,245,,,247,,,245,,245,,245,245,,245,245,245,,245,245,,,,,245,245',
',,245,,,245,229,229,,,229,,229,245,,,,,,245,,,,245,245,,245,245,,229',
',,245,,,229,229,229,229,229,229,229,229,229,229,,229,229,,,,,229,229',
'229,229,229,,,229,,,,,,,,229,,,,,229,229,,,,229,229,136,229,229,,,,',
'229,,136,136,136,136,136,136,,136,,136,,,136,136,136,136,,,,,,,,,,,',
',,,,136,,,,136,136,,,136,136,136,136,136,136,,136,136,120,,120,,,136',
',,,120,120,120,120,120,120,,120,,120,,136,120,120,120,120,,,,,,,,,,',
',,,,,120,,,,120,120,,,120,120,120,120,120,120,,120,120,119,,119,,,120',
',,,119,119,119,119,119,119,,119,,119,,120,119,119,119,119,,,,,,,,,,',
',,,,,119,,,,119,119,,,119,119,119,119,119,119,,119,119,,141,,,,119,141',
',,,141,141,141,141,141,141,,141,,141,119,,141,141,141,141,,,,,,,,,,',
',,,,,141,,,,141,141,,,141,141,141,141,141,141,,141,141,118,,118,,,141',
',,,118,118,118,118,118,118,,118,,118,,141,118,118,118,118,,,,,,,,,,',
',,,,,118,,,,118,118,,,118,118,118,118,118,118,,118,118,145,,,,,118,',
',,145,145,145,145,145,145,,145,,145,,118,145,145,145,145,,,,,,,,,,,',
',,,,145,,,,145,145,,,145,145,145,145,145,145,,145,145,116,,116,,,145',
',,,116,116,116,116,116,116,,116,,116,,145,116,116,116,116,,,,,,,,,,',
',,,,,116,,,,116,116,,,116,116,116,116,116,116,,116,116,,110,,,,116,',
',,,110,110,110,110,110,110,,110,,110,116,110,110,110,110,110,,,,,,,',
',,,,,,,,110,,,,110,110,,,110,110,110,110,110,110,,110,110,314,,,,,110',
',,,314,314,314,314,314,314,,314,,314,,110,314,314,314,314,,,,,,,,,,',
',,,,,314,,,,314,314,,,314,314,314,314,314,314,,314,314,317,,,,,314,',
',,317,317,317,317,317,317,,317,,317,,314,317,317,317,317,,,,,,,,,,,',
',,,,317,,,,317,317,,,317,317,317,317,317,317,,317,317,152,,,,,317,,',
',152,152,152,152,152,152,,152,,152,,317,152,152,152,152,,,,,,,,,,,,',
',,,152,,,,152,152,,,152,152,152,152,152,152,,152,152,322,,,,,152,,,',
'322,322,322,322,322,322,,322,,322,,152,322,322,322,322,,,,,,,,,,,,,',
',,322,,,,322,322,,,322,322,322,322,322,322,,322,322,211,,,,,322,,,,211',
'211,211,211,211,211,,211,,211,,322,211,211,211,211,,,,,,,,,,,,,,,,211',
',,,211,211,,,211,211,211,211,211,211,,211,211,330,,,,,211,,,,330,330',
'330,330,330,330,,330,,330,,211,330,330,330,330,,,,,,,,,,,,,,,,330,,',
',330,330,,,330,330,330,330,330,330,,330,330,331,,,,,330,,,,331,331,331',
'331,331,331,,331,,331,,330,331,331,331,331,,,,,,,,,,,,,,,,331,,,,331',
'331,,,331,331,331,331,331,331,,331,331,337,,,,,331,,,,337,337,337,337',
'337,337,,337,,337,,331,337,337,337,337,,,,,,,,,,,,,,,,337,,,,337,337',
',,337,337,337,337,337,337,,337,337,187,,,,,337,,,,187,187,187,187,187',
'187,187,187,,187,,337,187,187,187,187,,,,,,,,,,,,,,,,187,,,,187,187',
',,187,187,187,187,187,187,,187,187,11,,11,,,187,,,,11,11,11,11,11,11',
',11,,11,,187,11,11,11,11,,,,,,,,,,,,,,,,11,,,,11,11,,,11,11,11,11,11',
'11,,11,11,,182,,,,11,182,,,,182,182,182,182,182,182,,182,169,182,11',
',182,182,182,182,,,,,,,169,,169,,169,,,,,182,,,,182,182,,,182,182,182',
'182,182,182,,182,182,169,,,170,,182,,,169,169,169,169,,,,169,169,170',
',170,182,170,169,,,,171,,,,,,,,,,,169,,,171,,171,170,171,,172,,,,,170',
'170,170,170,,,,170,170,172,,172,,172,170,171,,,,,,,,171,171,171,171',
'171,171,170,171,171,,,,172,,171,,,173,,,172,172,172,172,172,172,,172',
'172,171,173,173,,173,172,173,,174,173,,,,,,,,,,,172,174,174,,174,,174',
',173,174,,,,,,,173,173,173,173,173,173,,173,173,,,,174,,173,,,175,,',
'174,174,174,174,174,174,,174,174,173,175,175,,175,174,175,,176,175,',
',,,,,,,,,174,176,176,,176,,176,,175,176,,,,,,,175,175,175,175,175,175',
',175,175,,,,176,,175,,,,,177,176,176,176,176,176,176,,176,176,175,,177',
'177,177,176,177,,177,,178,177,177,177,177,,,,,,176,,178,178,178,,178',
',178,,177,178,178,178,178,,,,177,177,177,177,177,177,,177,177,,,,178',
',177,,,178,,,178,178,178,178,178,178,,178,178,177,181,,,,178,,,,,181',
'181,181,181,181,181,,181,,181,178,,181,181,181,181,,,,,,,,,,,,,,,,181',
',,,181,181,,,181,181,181,181,181,181,,181,181,180,,,,,181,,,,180,180',
'180,180,180,180,,180,,180,,181,180,180,180,180,,,,,,,,,,,,,,,,180,,',
',180,180,,,180,180,180,180,180,180,,180,180,179,,,,,180,,,,179,179,179',
'179,179,179,,179,,179,,180,179,179,179,179,,,,,,,,,,,,,,,,179,,,,179',
'179,,,179,179,179,179,179,179,,179,179,,,,,,179,268,268,268,268,,268',
'268,268,268,268,,268,268,,179,,,,,268,268,268,210,210,210,210,,210,210',
'210,210,210,,210,210,,,268,268,,,210,210,210,263,263,263,263,,263,263',
'263,263,263,,263,263,,,210,210,,,263,263,263,,,,,,,,,,,,,,,,263,263' ]
        racc_action_check = arr = ::Array.new(6060, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   301,   nil,   nil,   nil,   108,   288,   nil,   274,   nil,
   nil,  5378,   328,   382,   436,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   265,   200,
   241,   652,   706,   760,   814,    65,   208,   nil,    79,   241,
   nil,  1086,  1140,  1196,   nil,   nil,   nil,   nil,  1250,   nil,
   160,   164,   nil,  1414,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   232,  1524,   219,  1632,  1686,  1740,  1794,  1848,  1902,
  1956,  2010,  2064,  2118,  2172,  2226,  2280,  2334,  2388,  2442,
  2496,  2550,  2604,  2658,  2712,  2766,  2820,  2874,  2928,  2982,
  3036,  3090,   174,  3200,   183,  3308,  3362,    62,    41,   172,
  4808,  3634,   nil,   129,   -15,  3796,  4750,   nil,  4636,  4521,
  4464,   118,  4120,    10,   nil,   nil,   nil,   nil,     2,    27,
   nil,    84,   nil,   nil,   nil,   nil,  4407,    71,   nil,   100,
   nil,  4579,    57,   nil,   nil,  4693,   nil,    54,   nil,   159,
  1360,    30,  4979,   nil,   199,   nil,   nil,   nil,   nil,   nil,
   106,     8,  1424,     2,   118,   986,  4184,  3534,  1260,  5453,
  5496,  5519,  5539,  5584,  5604,  5649,  5669,  5716,  5736,  5908,
  5851,  5794,  5436,   nil,   nil,   274,   nil,  5321,   598,   868,
   922,   257,   255,   nil,   nil,    -4,   nil,    -9,    -8,    55,
   -23,  1134,    -1,    -2,   nil,   nil,   nil,   nil,   nil,   nil,
  5968,  5093,   207,   nil,   226,   nil,   227,   155,   nil,  1032,
   nil,   186,   nil,   154,    -7,   nil,  1306,  3580,  3850,  4338,
  3958,   124,   122,   nil,   -10,   147,   121,  1057,   nil,   245,
    81,  4012,   nil,  3904,   nil,  4284,   nil,  4230,   nil,   nil,
   nil,   nil,  4174,   nil,   nil,   nil,    76,   nil,   nil,  4066,
  3742,   113,   nil,  5990,   nil,   126,  3688,   136,  5946,  3524,
  3470,   156,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  3416,   150,   nil,   174,   nil,   117,
   153,  3254,   nil,   184,   100,   196,   178,     0,  3146,   nil,
   174,   205,   179,   212,   216,   nil,   -25,   nil,   218,  1578,
  1470,   nil,   nil,   nil,  4865,   nil,   nil,  4922,   nil,   nil,
   nil,   166,  5036,   233,   976,   238,   nil,   nil,   nil,   nil,
  5150,  5207,   248,   191,   nil,   nil,   nil,  5264,    88,   nil,
   544,   263,   241,   nil,   266,   270,   nil,   nil,   nil,   270,
   277,   278,   nil,   490,   nil,   nil,   nil,   265,   283,   nil,
   nil,   286,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   220,   nil,   164,    54,   nil,   nil,   nil,   294,   nil,
   nil,   nil,   297,   nil,   302,   nil,   309,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
  -224,  -225,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -107,  -225,  -225,  -225,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -72,   -73,
   -77,  -225,  -225,  -225,  -225,  -225,  -118,  -120,  -225,  -225,
  -165,  -225,  -225,  -225,  -178,  -179,  -180,  -181,  -225,  -183,
  -225,  -194,  -197,  -225,  -199,  -200,  -201,  -202,  -203,  -204,
  -205,  -225,  -225,    -7,  -225,  -225,  -225,  -225,  -225,  -225,
  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,
  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,
  -225,  -225,  -225,  -127,  -122,  -224,  -224,   -28,  -225,   -35,
  -225,  -225,   -74,  -225,  -225,  -225,  -225,   -84,  -225,  -225,
  -225,  -225,  -225,  -224,  -137,  -156,  -157,  -119,  -224,  -224,
  -146,  -148,  -149,  -150,  -151,  -152,   -43,  -225,  -168,  -225,
  -171,  -225,  -225,  -174,  -175,  -187,  -182,  -225,  -190,  -225,
  -225,  -225,  -198,   392,    -6,    -9,   -12,   -13,   -14,   -15,
  -225,   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -25,   -26,
   -27,   -29,   -30,   -31,   -32,   -33,   -34,   -36,   -37,   -38,
   -39,   -40,  -225,   -41,  -102,  -225,   -78,  -225,  -217,  -223,
  -211,  -208,  -206,  -116,  -128,  -200,  -131,  -204,  -225,  -214,
  -212,  -220,  -202,  -203,  -210,  -215,  -216,  -218,  -219,  -221,
  -127,  -126,  -225,  -125,  -225,   -42,  -206,   -69,   -79,  -225,
   -82,  -206,  -161,  -164,  -225,   -76,  -225,  -225,  -225,  -127,
  -225,  -208,  -224,  -158,  -225,  -225,  -225,  -225,  -154,  -225,
  -225,  -225,  -166,  -225,  -169,  -225,  -172,  -225,  -184,  -185,
  -186,  -188,  -225,  -191,  -192,  -193,  -206,  -195,   -17,  -225,
  -225,  -206,  -104,  -127,  -115,  -225,  -209,  -225,  -207,  -225,
  -225,  -206,  -130,  -132,  -211,  -212,  -213,  -214,  -217,  -220,
  -222,  -223,  -123,  -124,  -207,  -225,   -71,  -225,   -81,  -225,
  -207,  -225,   -75,  -225,   -87,  -225,   -93,  -225,  -225,   -97,
  -208,  -206,  -208,  -225,  -225,  -140,  -225,  -159,  -206,  -224,
  -225,  -147,  -155,  -153,   -44,  -167,  -170,  -177,  -173,  -176,
  -189,  -225,  -106,  -225,  -207,  -206,  -110,  -117,  -111,  -129,
  -133,  -134,  -225,   -68,   -80,   -83,  -162,  -163,   -87,   -86,
  -225,  -225,   -93,   -92,  -225,  -225,  -101,   -96,   -98,  -225,
  -225,  -225,  -113,  -224,  -141,  -142,  -143,  -225,  -225,  -138,
  -139,  -225,  -145,  -196,  -103,  -105,  -114,  -121,   -70,   -85,
   -88,  -225,   -91,  -225,  -225,  -108,  -109,  -112,  -225,  -160,
  -135,  -144,  -225,   -90,  -225,   -95,  -225,  -100,  -136,   -89,
   -94,   -99 ]

racc_goto_table = [
     2,   112,     4,   144,   107,   109,   110,   128,   146,   192,
   134,   132,   191,   265,   221,   184,   343,   232,     1,   339,
   358,   311,   235,   312,   299,   156,   157,   158,   159,   212,
   214,   231,   267,   116,   118,   119,   120,    73,   261,   327,
   263,   345,   329,   136,   136,   141,   298,   370,   218,   304,
   145,   256,   354,   303,   236,   152,   285,   183,   336,   142,
   155,   289,   372,   369,   378,   253,   254,     3,   251,   252,
   250,   136,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
   179,   180,   181,   182,   348,   187,   321,   211,   211,   262,
   148,   323,   150,   136,   154,   nil,   nil,   136,   137,   139,
   nil,   332,   nil,   nil,   187,   nil,   271,   nil,   nil,   nil,
   nil,   nil,   349,   nil,   351,   233,   nil,   nil,   nil,   nil,
   233,   238,   nil,   nil,   308,   301,   160,   nil,   300,   302,
   nil,   350,   nil,   nil,   nil,   nil,   nil,   nil,   357,   nil,
   255,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   128,   nil,
   nil,   nil,   134,   132,   nil,   366,   nil,   nil,   216,   325,
   nil,   nil,   224,   nil,   nil,   nil,   nil,   182,   nil,   286,
   116,   118,   119,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   319,   134,   132,
   134,   132,   320,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   287,
   136,   187,   187,   nil,   nil,   nil,   293,   295,   nil,   nil,
   nil,   nil,   nil,   314,   305,   314,   nil,   317,   365,   141,
   nil,   nil,   nil,   nil,   145,   nil,   nil,   nil,   nil,   nil,
   nil,   314,   322,   nil,   nil,   nil,   nil,   nil,   187,   nil,
   nil,   330,   331,   nil,   nil,   355,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   314,   nil,   nil,   nil,
   nil,   nil,   nil,   337,   nil,   nil,   nil,   nil,   nil,   nil,
   136,   nil,   nil,   nil,   nil,   368,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   361,   360,   nil,   nil,   nil,   nil,   182,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   116,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   360,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   382,   nil,   384,   386 ]

racc_goto_check = [
     2,    39,     4,    76,    10,    10,    10,    64,    81,    56,
    31,    37,    54,    55,    44,    51,    47,    65,     1,    46,
    66,    72,    65,    72,    49,     8,     8,     8,     8,    60,
    60,    54,    38,    10,    10,    10,    10,     6,    52,    57,
    58,    50,    61,    10,    10,    10,    48,    45,    43,    68,
    10,    44,    69,    55,    71,    10,    38,    13,    74,    75,
     7,    38,    47,    46,    66,    77,    78,     3,    82,    83,
    85,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    49,    10,    38,    10,    10,    51,
    86,    38,    87,    10,     6,   nil,   nil,    10,    12,    12,
   nil,    38,   nil,   nil,    10,   nil,    56,   nil,   nil,   nil,
   nil,   nil,    55,   nil,    55,     4,   nil,   nil,   nil,   nil,
     4,     4,   nil,   nil,    44,    56,    12,   nil,    54,    54,
   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    64,   nil,
   nil,   nil,    31,    37,   nil,    38,   nil,   nil,    12,    56,
   nil,   nil,    12,   nil,   nil,   nil,   nil,    10,   nil,    39,
    10,    10,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    76,    31,    37,
    31,    37,    81,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
    10,    10,    10,   nil,   nil,   nil,     2,     2,   nil,   nil,
   nil,   nil,   nil,    10,     4,    10,   nil,    10,    51,    10,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,    10,    10,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,    10,    10,   nil,   nil,    64,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,     4,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    18,     0,    67,     2,   nil,    32,   -14,   -50,   nil,
    -8,   nil,    57,   -44,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -39,   nil,   nil,   nil,   nil,   nil,   -38,  -160,   -38,
   nil,   nil,   nil,   -65,  -100,  -293,  -275,  -280,  -182,  -204,
  -256,   -86,  -147,   nil,   -91,  -178,   -94,  -227,  -147,   nil,
   -76,  -226,   nil,   nil,   -41,  -106,  -289,   nil,  -183,  -254,
   nil,   -75,  -216,   nil,  -232,     6,   -50,   -84,   -83,   nil,
   nil,   -50,   -79,   -78,   nil,   -77,    40,    41 ]

racc_goto_default = [
   nil,   nil,   359,   nil,   213,     5,     6,     7,     8,     9,
    11,    10,   297,   nil,    15,    38,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,   nil,   nil,
    39,    40,   113,   nil,   nil,   117,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    44,   nil,   nil,   nil,   193,   nil,   104,
   nil,   194,   198,   196,   124,   nil,   nil,   123,   nil,   nil,
   129,   nil,   130,   131,   222,   nil,   nil,    54,    55,    56,
    58,   nil,   nil,   nil,   147,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 87, :_reduce_1,
  1, 87, :_reduce_2,
  1, 87, :_reduce_none,
  1, 88, :_reduce_4,
  1, 91, :_reduce_5,
  3, 91, :_reduce_6,
  2, 91, :_reduce_7,
  1, 92, :_reduce_8,
  3, 92, :_reduce_9,
  1, 93, :_reduce_none,
  1, 94, :_reduce_11,
  3, 94, :_reduce_12,
  3, 94, :_reduce_13,
  3, 94, :_reduce_14,
  3, 94, :_reduce_15,
  1, 96, :_reduce_none,
  4, 96, :_reduce_17,
  3, 96, :_reduce_18,
  3, 96, :_reduce_19,
  3, 96, :_reduce_20,
  3, 96, :_reduce_21,
  3, 96, :_reduce_22,
  3, 96, :_reduce_23,
  3, 96, :_reduce_24,
  3, 96, :_reduce_25,
  3, 96, :_reduce_26,
  3, 96, :_reduce_27,
  2, 96, :_reduce_28,
  3, 96, :_reduce_29,
  3, 96, :_reduce_30,
  3, 96, :_reduce_31,
  3, 96, :_reduce_32,
  3, 96, :_reduce_33,
  3, 96, :_reduce_34,
  2, 96, :_reduce_35,
  3, 96, :_reduce_36,
  3, 96, :_reduce_37,
  3, 96, :_reduce_38,
  3, 96, :_reduce_39,
  3, 96, :_reduce_40,
  3, 96, :_reduce_41,
  3, 96, :_reduce_42,
  1, 98, :_reduce_43,
  3, 98, :_reduce_44,
  1, 97, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 118, :_reduce_66,
  1, 118, :_reduce_67,
  5, 100, :_reduce_68,
  3, 100, :_reduce_69,
  6, 100, :_reduce_70,
  4, 100, :_reduce_71,
  1, 100, :_reduce_72,
  1, 104, :_reduce_73,
  2, 104, :_reduce_74,
  4, 126, :_reduce_75,
  3, 126, :_reduce_76,
  1, 126, :_reduce_77,
  3, 127, :_reduce_78,
  2, 125, :_reduce_79,
  3, 129, :_reduce_80,
  2, 129, :_reduce_81,
  2, 128, :_reduce_82,
  4, 128, :_reduce_83,
  2, 107, :_reduce_84,
  5, 131, :_reduce_85,
  4, 131, :_reduce_86,
  0, 132, :_reduce_none,
  2, 132, :_reduce_88,
  4, 132, :_reduce_89,
  3, 132, :_reduce_90,
  6, 108, :_reduce_91,
  5, 108, :_reduce_92,
  0, 133, :_reduce_none,
  4, 133, :_reduce_94,
  3, 133, :_reduce_95,
  5, 106, :_reduce_96,
  1, 134, :_reduce_97,
  2, 134, :_reduce_98,
  5, 135, :_reduce_99,
  4, 135, :_reduce_100,
  1, 136, :_reduce_101,
  1, 99, :_reduce_none,
  4, 99, :_reduce_103,
  1, 138, :_reduce_104,
  3, 138, :_reduce_105,
  3, 137, :_reduce_106,
  1, 95, :_reduce_107,
  6, 95, :_reduce_108,
  6, 95, :_reduce_109,
  5, 95, :_reduce_110,
  5, 95, :_reduce_111,
  6, 95, :_reduce_112,
  5, 95, :_reduce_113,
  4, 143, :_reduce_114,
  1, 144, :_reduce_115,
  1, 140, :_reduce_116,
  3, 140, :_reduce_117,
  1, 139, :_reduce_118,
  2, 139, :_reduce_119,
  1, 139, :_reduce_120,
  6, 105, :_reduce_121,
  2, 105, :_reduce_122,
  3, 145, :_reduce_123,
  3, 145, :_reduce_124,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  0, 142, :_reduce_127,
  1, 142, :_reduce_128,
  3, 142, :_reduce_129,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 147, :_reduce_133,
  3, 147, :_reduce_134,
  6, 109, :_reduce_135,
  7, 110, :_reduce_136,
  1, 153, :_reduce_137,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_141,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  6, 111, :_reduce_144,
  5, 111, :_reduce_145,
  1, 156, :_reduce_146,
  3, 156, :_reduce_147,
  1, 158, :_reduce_148,
  1, 158, :_reduce_149,
  1, 158, :_reduce_150,
  1, 158, :_reduce_none,
  1, 159, :_reduce_152,
  3, 159, :_reduce_153,
  1, 157, :_reduce_none,
  2, 157, :_reduce_155,
  1, 150, :_reduce_156,
  1, 150, :_reduce_157,
  1, 151, :_reduce_158,
  2, 151, :_reduce_159,
  4, 151, :_reduce_160,
  1, 130, :_reduce_161,
  3, 130, :_reduce_162,
  3, 160, :_reduce_163,
  1, 160, :_reduce_164,
  1, 103, :_reduce_165,
  3, 113, :_reduce_166,
  4, 113, :_reduce_167,
  2, 113, :_reduce_168,
  3, 113, :_reduce_169,
  4, 113, :_reduce_170,
  2, 113, :_reduce_171,
  3, 116, :_reduce_172,
  4, 116, :_reduce_173,
  2, 116, :_reduce_174,
  1, 161, :_reduce_175,
  3, 161, :_reduce_176,
  3, 162, :_reduce_177,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 163, :_reduce_181,
  2, 164, :_reduce_182,
  1, 166, :_reduce_183,
  1, 168, :_reduce_184,
  1, 169, :_reduce_185,
  2, 167, :_reduce_186,
  1, 170, :_reduce_187,
  1, 171, :_reduce_188,
  2, 171, :_reduce_189,
  2, 165, :_reduce_190,
  2, 172, :_reduce_191,
  2, 172, :_reduce_192,
  3, 89, :_reduce_193,
  0, 173, :_reduce_194,
  2, 173, :_reduce_195,
  4, 173, :_reduce_196,
  1, 112, :_reduce_197,
  2, 112, :_reduce_198,
  1, 119, :_reduce_199,
  1, 122, :_reduce_200,
  1, 120, :_reduce_201,
  1, 121, :_reduce_202,
  1, 115, :_reduce_203,
  1, 114, :_reduce_204,
  1, 117, :_reduce_205,
  0, 124, :_reduce_none,
  1, 124, :_reduce_207,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 90, :_reduce_224 ]

racc_reduce_n = 225

racc_shift_n = 392

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :DELETES => 17,
  :LESSEQUAL => 18,
  :NOTEQUAL => 19,
  :DOT => 20,
  :COLON => 21,
  :LLCOLLECT => 22,
  :RRCOLLECT => 23,
  :QMARK => 24,
  :LPAREN => 25,
  :RPAREN => 26,
  :ISEQUAL => 27,
  :GREATEREQUAL => 28,
  :GREATERTHAN => 29,
  :LESSTHAN => 30,
  :IF => 31,
  :ELSE => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :ATAT => 45,
  :LCOLLECT => 46,
  :RCOLLECT => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68,
  :UNLESS => 69,
  :PIPE => 70,
  :LAMBDA => 71,
  :SELBRACE => 72,
  :NUMBER => 73,
  :HEREDOC => 74,
  :SUBLOCATE => 75,
  :RENDER_STRING => 76,
  :RENDER_EXPR => 77,
  :EPP_START => 78,
  :LOW => 79,
  :HIGH => 80,
  :CALL => 81,
  :LISTSTART => 82,
  :MODULO => 83,
  :TITLE_COLON => 84,
  :CASE_COLON => 85 }

racc_nt_base = 86

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 64)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 65)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 77)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 78)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_29(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_30(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_31(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_32(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_33(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_34(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_35(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_36(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_37(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_38(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_39(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_40(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_41(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_42(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 133)
  def _reduce_43(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 134)
  def _reduce_44(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

module_eval(<<'.,.,', 'egrammar.ra', 166)
  def _reduce_66(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 167)
  def _reduce_67(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 175)
  def _reduce_68(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 183)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 192)
  def _reduce_72(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_73(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_74(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_75(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_76(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_78(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_79(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_80(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_81(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_82(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_83(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 241)
  def _reduce_84(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 248)
  def _reduce_85(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_86(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_88(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_89(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_90(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_91(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_92(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_94(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_95(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_96(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_97(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_98(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_99(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_100(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_101(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'egrammar.ra', 334)
  def _reduce_103(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_104(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_105(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_106(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 357)
  def _reduce_107(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 360)
  def _reduce_108(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 375)
  def _reduce_109(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 383)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 396)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        error val[1], "All resource specifications require names"
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_112(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 416)
  def _reduce_113(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 421)
  def _reduce_114(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_115(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_116(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_117(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_118(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_119(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_120(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 455)
  def _reduce_123(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 456)
  def _reduce_124(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 469)
  def _reduce_127(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 470)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_129(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 491)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 501)
  def _reduce_135(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 515)
  def _reduce_136(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 525)
  def _reduce_137(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'egrammar.ra', 534)
  def _reduce_141(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 551)
  def _reduce_144(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 555)
  def _reduce_145(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_146(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_147(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_149(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 573)
  def _reduce_150(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_152(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_153(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_155(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_156(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_157(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 594)
  def _reduce_158(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_159(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_161(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_162(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 605)
  def _reduce_163(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_164(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_165(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_166(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_167(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_168(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 628)
  def _reduce_169(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 629)
  def _reduce_170(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_171(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_172(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_173(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_174(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_175(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_176(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_177(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_181(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_182(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_183(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_184(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_185(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_186(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_187(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_188(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_189(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_190(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_191(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_192(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_193(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_194(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_195(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_196(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_197(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_198(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_199(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_200(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_201(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_202(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_203(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_204(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_205(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 206 omitted

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_207(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_224(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
