#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 758)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'59,61,-133,279,53,241,55,-218,269,-131,-227,214,269,227,249,317,59,61',
'300,248,227,358,302,14,227,59,61,247,124,42,243,49,246,52,46,128,50',
'71,67,127,44,70,47,48,-133,280,68,13,224,-218,69,-131,-227,12,137,262',
'128,135,59,61,127,72,53,137,55,402,135,43,268,254,253,66,62,269,64,65',
'63,72,234,51,128,14,251,54,127,252,72,42,62,49,244,52,46,333,50,71,67',
'62,44,70,47,48,190,128,68,13,128,127,69,128,127,12,76,127,128,336,59',
'61,127,72,53,368,55,128,81,43,353,127,352,66,62,76,64,65,353,338,352',
'51,104,14,108,54,103,264,265,42,157,49,340,52,46,324,50,71,67,74,44',
'70,47,48,59,61,68,13,107,154,69,152,278,12,77,79,78,80,59,61,323,72',
'53,345,55,400,81,43,346,347,82,66,62,227,64,65,320,350,319,51,104,14',
'108,54,103,354,356,42,316,49,276,52,46,276,50,71,67,278,44,70,47,48',
'276,364,68,13,107,365,69,223,300,12,129,301,117,300,59,61,238,72,53',
'376,55,398,81,43,116,294,82,66,62,378,64,65,116,278,293,51,104,14,108',
'54,103,292,381,42,116,49,278,52,46,276,50,71,67,113,44,70,47,48,385',
'356,68,13,107,387,69,388,389,12,390,391,238,393,59,61,394,72,53,395',
'55,396,81,43,238,76,73,66,62,403,64,65,404,405,406,51,104,14,108,54',
'103,,,42,,49,,52,46,,50,71,67,,44,70,47,48,,,68,13,107,,69,,,12,,,,',
'59,61,,72,53,,55,,81,43,,,,66,62,,64,65,,,,51,104,14,108,54,103,,,42',
',49,,52,110,,50,71,67,,44,70,,,,,68,13,107,,69,,,12,,,,,59,61,,72,53',
',55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,',
'44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65',
',,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12',
',,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52',
'110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,',
',,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,',
'68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14',
',54,,,,42,,49,,52,46,,50,71,67,,44,70,47,48,,,68,13,,,69,,,12,,,,,59',
'61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,',
'50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66',
'62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13',
',,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,',
',42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53',
',55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,123,,50,71,67,',
'44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,374,,43,,,,66,62,,64',
'65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71,67,,44,70,47,48,,,68,13,,,69',
',,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,',
'49,,52,46,,50,71,67,,44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53',
',55,359,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67',
',44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65',
',,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12',
',,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52',
'110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,141,55,,,43',
',,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,',
',68,13,,,69,,,12,,,,,59,61,,72,53,143,55,,,43,,,,66,62,,64,65,,,,51',
',14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59',
'61,,72,53,,55,146,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110',
',50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66',
'62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13',
',,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,',
',42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53',
',55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,',
'44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,156,,,43,,,,66,62,,64,65',
',,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12',
',,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52',
'110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,',
',,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71,67,,44,70,47,48',
',,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14',
',54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61',
',72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71',
'67,,44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62',
',64,65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71,67,,44,70,47,48,,,68,13',
',,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,',
',42,,49,,52,46,,50,71,67,,44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72',
'53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71,67',
',44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64',
'65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71,67,,44,70,47,48,,,68,13,,,69',
',,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,',
'49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55',
',,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70',
',,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51',
',14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59',
'61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,',
'50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66',
'62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13',
',,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,',
',42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53',
',55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,',
'44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65',
',,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12',
',,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52',
'110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,',
',,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,',
'68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14',
',54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61',
',72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50',
'71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62',
',64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,',
'69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42',
',49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55',
',,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70',
',,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51',
',14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59',
'61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,',
'50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66',
'62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13',
',,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,',
',42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53',
',55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,',
'44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65',
',,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12',
',,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52',
'110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,',
',,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,',
'68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,189,66,62,,64,65,,,,51,',
'14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59',
'61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,192,209,203,210',
'52,204,212,205,201,199,,194,207,,,,,68,13,213,208,206,,,12,,,,,59,61',
',72,53,,55,,211,193,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110',
',50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66',
'62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13',
',,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,',
',42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53',
',55,329,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67',
',44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65',
',,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12',
',,,,59,61,,72,53,327,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49',
',52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,326,55',
',,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70',
',,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51',
',14,221,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,',
',,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52',
'110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,',
',,66,62,,64,65,,,,51,,14,,54,,,,192,209,203,210,52,204,212,205,201,199',
',194,207,,,,,68,13,213,208,206,,,12,,,,,59,61,,72,53,,55,,211,193,,',
',66,62,,64,65,,,,51,,14,229,54,,,,42,,49,,52,110,,50,71,67,,44,70,,',
',,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14',
',54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61',
',72,53,,55,306,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,46,,50',
'71,67,,44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,304,,43,,',
',66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71,67,,44,70,47,48',
',,68,13,,,69,,,12,,,,,59,61,,72,53,,55,298,,43,,,,66,62,,64,65,,,,51',
',14,,54,,,,42,,49,,52,46,,50,71,67,,44,70,47,48,,,68,13,,,69,,,12,,',
',,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52',
'110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,',
',,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,',
'68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14',
',54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61',
',72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50',
'71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62',
',64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,',
'69,,,12,,,,,59,61,,72,53,,55,146,,43,,,,66,62,,64,65,,,,51,,14,,54,',
',,42,,49,,52,46,,50,71,67,,44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,',
'72,53,,55,,,43,,,,66,62,,64,65,,59,61,51,,14,,54,,,,42,,49,,52,46,,50',
'71,67,,44,70,47,48,,,68,13,,,69,,,12,,,,137,,,135,72,,,,,,43,,59,61',
'66,62,,64,65,81,,,51,72,,,54,,100,101,102,97,92,104,62,108,,103,,,93',
'95,94,96,,,,,,,137,,,135,,,,,,107,,,,99,98,,,85,86,88,87,90,91,72,83',
'84,,,,,81,82,105,,62,,,,,100,101,102,97,92,104,,108,,103,89,,93,95,94',
'96,,,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,81,83,84,,,,,,82',
'100,101,102,97,92,104,,108,,103,,,93,95,94,96,,89,,,,,,,,,,,,,,107,',
',,99,98,,,85,86,88,87,90,91,81,83,84,,,250,,,82,100,101,102,97,92,104',
',108,,103,,,93,95,94,96,,89,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87',
'90,91,81,83,84,,,,,,82,100,101,102,97,92,104,,108,,103,,,93,95,94,96',
',89,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,81,83,84,,,,,,82,100',
'101,102,97,92,104,,108,,103,,,93,95,94,96,,89,,,,,,,,,,,,,,107,,,,99',
'98,,,85,86,88,87,90,91,81,83,84,,,,,,82,100,101,102,97,92,104,,108,',
'103,,,93,95,94,96,,89,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91',
'81,83,84,,,,,,82,100,101,102,97,92,104,,108,,103,,,93,95,94,96,,89,',
',,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,81,83,84,,,,,,82,100,101',
'102,97,92,104,,108,,103,,,93,95,94,96,,89,,,,,,,,,,,,,,107,,,,99,98',
',,85,86,88,87,90,91,81,83,84,,,,,,82,100,101,102,97,92,104,,108,,103',
',,93,95,94,96,,89,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,81,83',
'84,,,,,,82,100,101,102,97,92,104,,108,,103,,,93,95,94,96,,89,,,,,,,',
',,,,,,107,,,,99,98,,,85,86,88,87,90,91,,83,84,,,,,,82,,,,,,,,,,,264',
'265,,81,,105,,89,250,,,,100,101,102,97,92,104,,108,,103,,,93,95,94,96',
',,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,81,83,84,,,,,,82,100',
'101,102,97,92,104,,108,,103,,219,93,95,94,96,,89,,,,,,,,,,,,,,107,,',
',99,98,,,85,86,88,87,90,91,,83,84,,,,,81,82,230,,,,,,,100,101,102,97',
'92,104,,108,,103,89,,93,95,94,96,,,,,,,,,,,,,,,,107,,,,99,98,,,85,86',
'88,87,90,91,,83,84,,,,,81,82,231,,,,,,,100,101,102,97,92,104,,108,,103',
'89,,93,95,94,96,,,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,,83',
'84,,,,,81,82,232,,,,,,,100,101,102,97,92,104,,108,,103,89,,93,95,94',
'96,,,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,,83,84,,,,,81,82',
'233,,,,,,,100,101,102,97,92,104,,108,81,103,89,81,93,95,94,96,,,,,,',
'104,,108,104,103,108,,103,,107,,,,99,98,,,85,86,88,87,90,91,,83,84,107',
',,107,,82,,,,,88,87,81,88,87,83,84,,83,84,,,82,89,,82,104,,108,,103',
',,,,81,,,,,89,,,89,100,101,102,97,92,104,,108,107,103,,,93,95,94,96',
'85,86,88,87,,,,83,84,,,,,,82,107,,,,99,98,,,85,86,88,87,90,91,81,83',
'84,89,,,,,82,100,101,102,97,92,104,,108,,103,,,93,95,94,96,,89,,,,,',
',,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,81,83,84,,,270,,,82,100,101',
'102,97,92,104,,108,81,103,,,93,95,94,96,,89,,,,,104,,108,,103,,,,,107',
',,,99,98,,,85,86,88,87,90,91,,83,84,107,,,81,,82,,,85,86,88,87,,,,83',
'84,104,,108,81,103,82,89,,,,,,,,,,,104,,108,,103,,89,,,107,,,,,,,,85',
'86,88,87,90,91,,83,84,107,,,,,82,,,85,86,88,87,90,91,81,83,84,,,,,,82',
'89,,,,92,104,,108,81,103,,,93,,,,,89,,,,92,104,,108,,103,,,93,,107,',
',,,,,,85,86,88,87,90,91,,83,84,107,,,,,82,,,85,86,88,87,90,91,81,83',
'84,,,,,,82,89,,,,92,104,,108,81,103,,,93,,,,,89,,,,92,104,,108,,103',
',,93,,107,,,,,,,,85,86,88,87,90,91,,83,84,107,,,,,82,,,85,86,88,87,90',
'91,81,83,84,,,,,,82,89,,,97,92,104,,108,,103,,81,93,95,94,96,,89,,,',
',,97,92,104,,108,,103,,107,93,95,94,96,,,,85,86,88,87,90,91,,83,84,',
',,107,,82,,,98,,,85,86,88,87,90,91,81,83,84,,,,89,,82,100,101,102,97',
'92,104,,108,,103,,,93,95,94,96,,89,,,,,,,,,,,,,,107,,,,99,98,,,85,86',
'88,87,90,91,81,83,84,,,,,,82,100,101,102,97,92,104,,108,,103,,,93,95',
'94,96,,89,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,81,83,84,,,',
',,82,100,101,102,97,92,104,274,108,81,103,,81,93,95,94,96,,89,,,,,104',
',108,104,103,108,,103,,107,,,,99,98,,81,85,86,88,87,90,91,,83,84,107',
',,107,104,82,108,,103,,,,,,,83,84,,83,84,,,82,89,,82,,,,,107,,,,,,,',
',,,,,,,83,84,,288,209,287,210,82,285,212,289,283,282,,284,286,,,,,,',
'213,208,290,288,209,287,210,,285,212,289,283,282,,284,286,,,211,291',
',,213,208,290,288,209,287,210,,285,212,289,283,282,,284,286,,,211,291',
',,213,208,290,,,,,,,,,,,,,,,,211,291' ]
        racc_action_table = arr = ::Array.new(6596, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,201,202,0,131,0,207,228,199,206,106,307,116,142,238,50,50,261,142',
'154,307,228,0,238,243,243,140,46,0,131,0,140,0,0,49,0,0,0,49,0,0,0,0',
'201,202,0,0,116,207,0,199,206,0,50,154,46,50,388,388,46,0,388,243,388',
'388,243,0,164,150,150,0,0,164,0,0,0,50,123,0,203,388,145,0,203,145,243',
'388,50,388,133,388,388,267,388,388,388,243,388,388,388,388,104,204,388',
'388,123,204,388,51,123,388,75,51,316,271,5,5,316,388,5,316,5,110,167',
'388,304,110,304,388,388,158,388,388,350,275,350,388,167,5,167,388,167',
'333,333,5,73,5,277,5,5,245,5,5,5,5,5,5,5,5,152,152,5,5,167,63,5,62,281',
'5,8,8,8,8,387,387,244,5,387,295,387,387,166,5,297,299,167,5,5,300,5',
'5,240,303,239,5,166,387,166,5,166,305,306,387,236,387,235,387,387,310',
'387,387,387,311,387,387,387,387,312,313,387,387,166,314,387,115,318',
'387,47,227,41,225,385,385,138,387,385,332,385,385,111,387,221,220,166',
'387,387,335,387,387,40,337,218,387,111,385,111,387,111,216,344,385,345',
'385,196,385,385,195,385,385,385,39,385,385,385,385,353,354,385,385,111',
'356,385,357,361,385,362,363,125,369,365,365,370,385,365,373,365,375',
'165,385,130,6,1,385,385,392,385,385,397,399,401,385,165,365,165,385',
'165,,,365,,365,,365,365,,365,365,365,,365,365,365,365,,,365,365,165',
',365,,,365,,,,,12,12,,365,12,,12,,109,365,,,,365,365,,365,365,,,,365',
'109,12,109,365,109,,,12,,12,,12,12,,12,12,12,,12,12,,,,,12,12,109,,12',
',,12,,,,,13,13,,12,13,,13,,,12,,,,12,12,,12,12,,,,12,,13,,12,,,,13,',
'13,,13,13,,13,13,13,,13,13,,,,,13,13,,,13,,,13,,,,,14,14,,13,14,,14',
',,13,,,,13,13,,13,13,,,,13,,14,,13,,,,14,,14,,14,14,,14,14,14,,14,14',
',,,,14,14,,,14,,,14,,,,,352,352,,14,352,,352,,,14,,,,14,14,,14,14,,',
',14,,352,,14,,,,352,,352,,352,352,,352,352,352,,352,352,,,,,352,352',
',,352,,,352,,,,,336,336,,352,336,,336,,,352,,,,352,352,,352,352,,,,352',
',336,,352,,,,336,,336,,336,336,,336,336,336,,336,336,,,,,336,336,,,336',
',,336,,,,,324,324,,336,324,,324,,,336,,,,336,336,,336,336,,,,336,,324',
',336,,,,324,,324,,324,324,,324,324,324,,324,324,324,324,,,324,324,,',
'324,,,324,,,,,42,42,,324,42,,42,,,324,,,,324,324,,324,324,,,,324,,42',
',324,,,,42,,42,,42,42,,42,42,42,,42,42,,,,,42,42,,,42,,,42,,,,,43,43',
',42,43,,43,,,42,,,,42,42,,42,42,,,,42,,43,,42,,,,43,,43,,43,43,,43,43',
'43,,43,43,,,,,43,43,,,43,,,43,,,,,44,44,,43,44,,44,,,43,,,,43,43,,43',
'43,,,,43,,44,,43,,,,44,,44,,44,44,,44,44,44,,44,44,,,,,44,44,,,44,,',
'44,,,,,45,45,,44,45,,45,,,44,,,,44,44,,44,44,,,,44,,45,,44,,,,45,,45',
',45,45,,45,45,45,,45,45,,,,,45,45,,,45,,,45,,,,,320,320,,45,320,,320',
'320,,45,,,,45,45,,45,45,,,,45,,320,,45,,,,320,,320,,320,320,,320,320',
'320,,320,320,320,320,,,320,320,,,320,,,320,,,,,319,319,,320,319,,319',
',,320,,,,320,320,,320,320,,,,320,,319,,320,,,,319,,319,,319,319,,319',
'319,319,,319,319,319,319,,,319,319,,,319,,,319,,,,,308,308,,319,308',
',308,308,,319,,,,319,319,,319,319,,,,319,,308,,319,,,,308,,308,,308',
'308,,308,308,308,,308,308,,,,,308,308,,,308,,,308,,,,,301,301,,308,301',
',301,,,308,,,,308,308,,308,308,,,,308,,301,,308,,,,301,,301,,301,301',
',301,301,301,,301,301,,,,,301,301,,,301,,,301,,,,,294,294,,301,294,',
'294,,,301,,,,301,301,,301,301,,,,301,,294,,301,,,,294,,294,,294,294',
',294,294,294,,294,294,,,,,294,294,,,294,,,294,,,,,53,53,,294,53,53,53',
',,294,,,,294,294,,294,294,,,,294,,53,,294,,,,53,,53,,53,53,,53,53,53',
',53,53,,,,,53,53,,,53,,,53,,,,,54,54,,53,54,54,54,,,53,,,,53,53,,53',
'53,,,,53,,54,,53,,,,54,,54,,54,54,,54,54,54,,54,54,,,,,54,54,,,54,,',
'54,,,,,55,55,,54,55,,55,55,,54,,,,54,54,,54,54,,,,54,,55,,54,,,,55,',
'55,,55,55,,55,55,55,,55,55,,,,,55,55,,,55,,,55,,,,,60,60,,55,60,,60',
',,55,,,,55,55,,55,55,,,,55,,60,,55,,,,60,,60,,60,60,,60,60,60,,60,60',
',,,,60,60,,,60,,,60,,,,,280,280,,60,280,,280,,,60,,,,60,60,,60,60,,',
',60,,280,,60,,,,280,,280,,280,280,,280,280,280,,280,280,,,,,280,280',
',,280,,,280,,,,,279,279,,280,279,,279,,,280,,,,280,280,,280,280,,,,280',
',279,,280,,,,279,,279,,279,279,,279,279,279,,279,279,,,,,279,279,,,279',
',,279,,,,,65,65,,279,65,,65,,,279,,,,279,279,,279,279,,,,279,,65,,279',
',,,65,,65,,65,65,,65,65,65,,65,65,,,,,65,65,,,65,,,65,,,,,276,276,,65',
'276,,276,,,65,,,,65,65,,65,65,,,,65,,276,,65,,,,276,,276,,276,276,,276',
'276,276,,276,276,,,,,276,276,,,276,,,276,,,,,153,153,,276,153,,153,',
',276,,,,276,276,,276,276,,,,276,,153,,276,,,,153,,153,,153,153,,153',
'153,153,,153,153,153,153,,,153,153,,,153,,,153,,,,,270,270,,153,270',
',270,,,153,,,,153,153,,153,153,,,,153,,270,,153,,,,270,,270,,270,270',
',270,270,270,,270,270,,,,,270,270,,,270,,,270,,,,,76,76,,270,76,,76',
',,270,,,,270,270,,270,270,,,,270,,76,,270,,,,76,,76,,76,76,,76,76,76',
',76,76,76,76,,,76,76,,,76,,,76,,,,,77,77,,76,77,,77,,,76,,,,76,76,,76',
'76,,,,76,,77,,76,,,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77',
',,77,,,,,78,78,,77,78,,78,,,77,,,,77,77,,77,77,,,,77,,78,,77,,,,78,',
'78,,78,78,,78,78,78,,78,78,78,78,,,78,78,,,78,,,78,,,,,79,79,,78,79',
',79,,,78,,,,78,78,,78,78,,,,78,,79,,78,,,,79,,79,,79,79,,79,79,79,,79',
'79,79,79,,,79,79,,,79,,,79,,,,,80,80,,79,80,,80,,,79,,,,79,79,,79,79',
',,,79,,80,,79,,,,80,,80,,80,80,,80,80,80,,80,80,80,80,,,80,80,,,80,',
',80,,,,,81,81,,80,81,,81,,,80,,,,80,80,,80,80,,,,80,,81,,80,,,,81,,81',
',81,81,,81,81,81,,81,81,,,,,81,81,,,81,,,81,,,,,82,82,,81,82,,82,,,81',
',,,81,81,,81,81,,,,81,,82,,81,,,,82,,82,,82,82,,82,82,82,,82,82,,,,',
'82,82,,,82,,,82,,,,,83,83,,82,83,,83,,,82,,,,82,82,,82,82,,,,82,,83',
',82,,,,83,,83,,83,83,,83,83,83,,83,83,,,,,83,83,,,83,,,83,,,,,84,84',
',83,84,,84,,,83,,,,83,83,,83,83,,,,83,,84,,83,,,,84,,84,,84,84,,84,84',
'84,,84,84,,,,,84,84,,,84,,,84,,,,,85,85,,84,85,,85,,,84,,,,84,84,,84',
'84,,,,84,,85,,84,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85,,',
'85,,,,,86,86,,85,86,,86,,,85,,,,85,85,,85,85,,,,85,,86,,85,,,,86,,86',
',86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,,,,,87,87,,86,87,,87,,,86',
',,,86,86,,86,86,,,,86,,87,,86,,,,87,,87,,87,87,,87,87,87,,87,87,,,,',
'87,87,,,87,,,87,,,,,88,88,,87,88,,88,,,87,,,,87,87,,87,87,,,,87,,88',
',87,,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,,,,,89,89',
',88,89,,89,,,88,,,,88,88,,88,88,,,,88,,89,,88,,,,89,,89,,89,89,,89,89',
'89,,89,89,,,,,89,89,,,89,,,89,,,,,90,90,,89,90,,90,,,89,,,,89,89,,89',
'89,,,,89,,90,,89,,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90,,',
'90,,,,,91,91,,90,91,,91,,,90,,,,90,90,,90,90,,,,90,,91,,90,,,,91,,91',
',91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91,,,,,92,92,,91,92,,92,,,91',
',,,91,91,,91,91,,,,91,,92,,91,,,,92,,92,,92,92,,92,92,92,,92,92,,,,',
'92,92,,,92,,,92,,,,,93,93,,92,93,,93,,,92,,,,92,92,,92,92,,,,92,,93',
',92,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,,,,,94,94',
',93,94,,94,,,93,,,,93,93,,93,93,,,,93,,94,,93,,,,94,,94,,94,94,,94,94',
'94,,94,94,,,,,94,94,,,94,,,94,,,,,95,95,,94,95,,95,,,94,,,,94,94,,94',
'94,,,,94,,95,,94,,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95,,',
'95,,,,,96,96,,95,96,,96,,,95,,,,95,95,,95,95,,,,95,,96,,95,,,,96,,96',
',96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,,,,,97,97,,96,97,,97,,,96',
',,,96,96,,96,96,,,,96,,97,,96,,,,97,,97,,97,97,,97,97,97,,97,97,,,,',
'97,97,,,97,,,97,,,,,98,98,,97,98,,98,,,97,,,,97,97,,97,97,,,,97,,98',
',97,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,,,,,99,99',
',98,99,,99,,,98,,,,98,98,,98,98,,,,98,,99,,98,,,,99,,99,,99,99,,99,99',
'99,,99,99,,,,,99,99,,,99,,,99,,,,,100,100,,99,100,,100,,,99,,,,99,99',
',99,99,,,,99,,100,,99,,,,100,,100,,100,100,,100,100,100,,100,100,,,',
',100,100,,,100,,,100,,,,,101,101,,100,101,,101,,,100,,,,100,100,,100',
'100,,,,100,,101,,100,,,,101,,101,,101,101,,101,101,101,,101,101,,,,',
'101,101,,,101,,,101,,,,,102,102,,101,102,,102,,,101,,,,101,101,,101',
'101,,,,101,,102,,101,,,,102,,102,,102,102,,102,102,102,,102,102,,,,',
'102,102,,,102,,,102,,,,,103,103,,102,103,,103,,,102,,,,102,102,,102',
'102,,,,102,,103,,102,,,,103,,103,,103,103,,103,103,103,,103,103,,,,',
'103,103,,,103,,,103,,,,,269,269,,103,269,,269,,,103,,,103,103,103,,103',
'103,,,,103,,269,,103,,,,269,,269,,269,269,,269,269,269,,269,269,,,,',
'269,269,,,269,,,269,,,,,105,105,,269,105,,105,,,269,,,,269,269,,269',
'269,,,,269,,105,,269,,,,105,105,105,105,105,105,105,105,105,105,,105',
'105,,,,,105,105,105,105,105,,,105,,,,,257,257,,105,257,,257,,105,105',
',,,105,105,,105,105,,,,105,,257,,105,,,,257,,257,,257,257,,257,257,257',
',257,257,,,,,257,257,,,257,,,257,,,,,107,107,,257,107,,107,,,257,,,',
'257,257,,257,257,,,,257,,107,,257,,,,107,,107,,107,107,,107,107,107',
',107,107,,,,,107,107,,,107,,,107,,,,,108,108,,107,108,,108,,,107,,,',
'107,107,,107,107,,,,107,,108,,107,,,,108,,108,,108,108,,108,108,108',
',108,108,,,,,108,108,,,108,,,108,,,,,252,252,,108,252,,252,252,,108',
',,,108,108,,108,108,,,,108,,252,,108,,,,252,,252,,252,252,,252,252,252',
',252,252,,,,,252,252,,,252,,,252,,,,,250,250,,252,250,,250,,,252,,,',
'252,252,,252,252,,,,252,,250,,252,,,,250,,250,,250,250,,250,250,250',
',250,250,,,,,250,250,,,250,,,250,,,,,248,248,,250,248,248,248,,,250',
',,,250,250,,250,250,,,,250,,248,,250,,,,248,,248,,248,248,,248,248,248',
',248,248,,,,,248,248,,,248,,,248,,,,,246,246,,248,246,246,246,,,248',
',,,248,248,,248,248,,,,248,,246,,248,,,,246,,246,,246,246,,246,246,246',
',246,246,,,,,246,246,,,246,,,246,,,,,113,113,,246,113,,113,,,246,,,',
'246,246,,246,246,,,,246,,113,113,246,,,,113,,113,,113,113,,113,113,113',
',113,113,,,,,113,113,,,113,,,113,,,,,234,234,,113,234,,234,,,113,,,',
'113,113,,113,113,,,,113,,234,,113,,,,234,,234,,234,234,,234,234,234',
',234,234,,,,,234,234,,,234,,,234,,,,,233,233,,234,233,,233,,,234,,,',
'234,234,,234,234,,,,234,,233,,234,,,,233,233,233,233,233,233,233,233',
'233,233,,233,233,,,,,233,233,233,233,233,,,233,,,,,117,117,,233,117',
',117,,233,233,,,,233,233,,233,233,,,,233,,117,117,233,,,,117,,117,,117',
'117,,117,117,117,,117,117,,,,,117,117,,,117,,,117,,,,,232,232,,117,232',
',232,,,117,,,,117,117,,117,117,,,,117,,232,,117,,,,232,,232,,232,232',
',232,232,232,,232,232,,,,,232,232,,,232,,,232,,,,,231,231,,232,231,',
'231,231,,232,,,,232,232,,232,232,,,,232,,231,,232,,,,231,,231,,231,231',
',231,231,231,,231,231,231,231,,,231,231,,,231,,,231,,,,,230,230,,231',
'230,,230,230,,231,,,,231,231,,231,231,,,,231,,230,,231,,,,230,,230,',
'230,230,,230,230,230,,230,230,230,230,,,230,230,,,230,,,230,,,,,223',
'223,,230,223,,223,223,,230,,,,230,230,,230,230,,,,230,,223,,230,,,,223',
',223,,223,223,,223,223,223,,223,223,223,223,,,223,223,,,223,,,223,,',
',,194,194,,223,194,,194,,,223,,,,223,223,,223,223,,,,223,,194,,223,',
',,194,,194,,194,194,,194,194,194,,194,194,,,,,194,194,,,194,,,194,,',
',,124,124,,194,124,,124,,,194,,,,194,194,,194,194,,,,194,,124,,194,',
',,124,,124,,124,124,,124,124,124,,124,124,,,,,124,124,,,124,,,124,,',
',,193,193,,124,193,,193,,,124,,,,124,124,,124,124,,,,124,,193,,124,',
',,193,,193,,193,193,,193,193,193,,193,193,,,,,193,193,,,193,,,193,,',
',,192,192,,193,192,,192,,,193,,,,193,193,,193,193,,,,193,,192,,193,',
',,192,,192,,192,192,,192,192,192,,192,192,,,,,192,192,,,192,,,192,,',
',,189,189,,192,189,,189,,,192,,,,192,192,,192,192,,,,192,,189,,192,',
',,189,,189,,189,189,,189,189,189,,189,189,,,,,189,189,,,189,,,189,,',
',,156,156,,189,156,,156,156,,189,,,,189,189,,189,189,,,,189,,156,,189',
',,,156,,156,,156,156,,156,156,156,,156,156,156,156,,,156,156,,,156,',
',156,,,,,74,74,,156,74,,74,,,156,,,,156,156,,156,156,,205,205,156,,74',
',156,,,,74,,74,,74,74,,74,74,74,,74,74,74,74,,,74,74,,,74,,,74,,,,205',
',,205,74,,,,,,74,,241,241,74,74,,74,74,139,,,74,205,,,74,,139,139,139',
'139,139,139,205,139,,139,,,139,139,139,139,,,,,,,241,,,241,,,,,,139',
',,,139,139,,,139,139,139,139,139,139,241,139,139,,,,,11,139,11,,241',
',,,,11,11,11,11,11,11,,11,,11,139,,11,11,11,11,,,,,,,,,,,,,,,,11,,,',
'11,11,,,11,11,11,11,11,11,349,11,11,,,,,,11,349,349,349,349,349,349',
',349,,349,,,349,349,349,349,,11,,,,,,,,,,,,,,349,,,,349,349,,,349,349',
'349,349,349,349,144,349,349,,,144,,,349,144,144,144,144,144,144,,144',
',144,,,144,144,144,144,,349,,,,,,,,,,,,,,144,,,,144,144,,,144,144,144',
'144,144,144,343,144,144,,,,,,144,343,343,343,343,343,343,,343,,343,',
',343,343,343,343,,144,,,,,,,,,,,,,,343,,,,343,343,,,343,343,343,343',
'343,343,148,343,343,,,,,,343,148,148,148,148,148,148,,148,,148,,,148',
'148,148,148,,343,,,,,,,,,,,,,,148,,,,148,148,,,148,148,148,148,148,148',
'342,148,148,,,,,,148,342,342,342,342,342,342,,342,,342,,,342,342,342',
'342,,148,,,,,,,,,,,,,,342,,,,342,342,,,342,342,342,342,342,342,334,342',
'342,,,,,,342,334,334,334,334,334,334,,334,,334,,,334,334,334,334,,342',
',,,,,,,,,,,,,334,,,,334,334,,,334,334,334,334,334,334,328,334,334,,',
',,,334,328,328,328,328,328,328,,328,,328,,,328,328,328,328,,334,,,,',
',,,,,,,,,328,,,,328,328,,,328,328,328,328,328,328,325,328,328,,,,,,328',
'325,325,325,325,325,325,,325,,325,,,325,325,325,325,,328,,,,,,,,,,,',
',,325,,,,325,325,,,325,325,325,325,325,325,155,325,325,,,,,,325,155',
'155,155,155,155,155,,155,,155,,,155,155,155,155,,325,,,,,,,,,,,,,,155',
',,,155,155,,,155,155,155,155,155,155,,155,155,,,,,,155,,,,,,,,,,,155',
'155,,266,,266,,155,266,,,,266,266,266,266,266,266,,266,,266,,,266,266',
'266,266,,,,,,,,,,,,,,,,266,,,,266,266,,,266,266,266,266,266,266,112',
'266,266,,,,,,266,112,112,112,112,112,112,,112,,112,,112,112,112,112',
'112,,266,,,,,,,,,,,,,,112,,,,112,112,,,112,112,112,112,112,112,,112',
'112,,,,,118,112,118,,,,,,,118,118,118,118,118,118,,118,,118,112,,118',
'118,118,118,,,,,,,,,,,,,,,,118,,,,118,118,,,118,118,118,118,118,118',
',118,118,,,,,120,118,120,,,,,,,120,120,120,120,120,120,,120,,120,118',
',120,120,120,120,,,,,,,,,,,,,,,,120,,,,120,120,,,120,120,120,120,120',
'120,,120,120,,,,,121,120,121,,,,,,,121,121,121,121,121,121,,121,,121',
'120,,121,121,121,121,,,,,,,,,,,,,,,,121,,,,121,121,,,121,121,121,121',
'121,121,,121,121,,,,,122,121,122,,,,,,,122,122,122,122,122,122,,122',
'168,122,121,169,122,122,122,122,,,,,,,168,,168,169,168,169,,169,,122',
',,,122,122,,,122,122,122,122,122,122,,122,122,168,,,169,,122,,,,,168',
'168,173,169,169,168,168,,169,169,,,168,122,,169,173,,173,,173,,,,,215',
',,,,168,,,169,215,215,215,215,215,215,,215,173,215,,,215,215,215,215',
'173,173,173,173,,,,173,173,,,,,,173,215,,,,215,215,,,215,215,215,215',
'215,215,185,215,215,173,,,,,215,185,185,185,185,185,185,,185,,185,,',
'185,185,185,185,,215,,,,,,,,,,,,,,185,,,,185,185,,,185,185,185,185,185',
'185,186,185,185,,,186,,,185,186,186,186,186,186,186,,186,174,186,,,186',
'186,186,186,,185,,,,,174,,174,,174,,,,,186,,,,186,186,,,186,186,186',
'186,186,186,,186,186,174,,,175,,186,,,174,174,174,174,,,,174,174,175',
',175,176,175,174,186,,,,,,,,,,,176,,176,,176,,174,,,175,,,,,,,,175,175',
'175,175,175,175,,175,175,176,,,,,175,,,176,176,176,176,176,176,177,176',
'176,,,,,,176,175,,,,177,177,,177,178,177,,,177,,,,,176,,,,178,178,,178',
',178,,,178,,177,,,,,,,,177,177,177,177,177,177,,177,177,178,,,,,177',
',,178,178,178,178,178,178,179,178,178,,,,,,178,177,,,,179,179,,179,180',
'179,,,179,,,,,178,,,,180,180,,180,,180,,,180,,179,,,,,,,,179,179,179',
'179,179,179,,179,179,180,,,,,179,,,180,180,180,180,180,180,181,180,180',
',,,,,180,179,,,181,181,181,,181,,181,,182,181,181,181,181,,180,,,,,',
'182,182,182,,182,,182,,181,182,182,182,182,,,,181,181,181,181,181,181',
',181,181,,,,182,,181,,,182,,,182,182,182,182,182,182,183,182,182,,,',
'181,,182,183,183,183,183,183,183,,183,,183,,,183,183,183,183,,182,,',
',,,,,,,,,,,183,,,,183,183,,,183,183,183,183,183,183,184,183,183,,,,',
',183,184,184,184,184,184,184,,184,,184,,,184,184,184,184,,183,,,,,,',
',,,,,,,184,,,,184,184,,,184,184,184,184,184,184,191,184,184,,,,,,184',
'191,191,191,191,191,191,191,191,171,191,,170,191,191,191,191,,184,,',
',,171,,171,170,171,170,,170,,191,,,,191,191,,172,191,191,191,191,191',
'191,,191,191,171,,,170,172,191,172,,172,,,,,,,171,171,,170,170,,,171',
'191,,170,,,,,172,,,,,,,,,,,,,,,172,172,,214,214,214,214,172,214,214',
'214,214,214,,214,214,,,,,,,214,214,214,273,273,273,273,,273,273,273',
'273,273,,273,273,,,214,214,,,273,273,273,278,278,278,278,,278,278,278',
'278,278,,278,278,,,273,273,,,278,278,278,,,,,,,,,,,,,,,,278,278' ]
        racc_action_check = arr = ::Array.new(6596, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   302,   nil,   nil,   nil,   114,   289,   nil,   106,   nil,
   nil,  4887,   346,   404,   462,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   246,
   180,   205,   694,   752,   810,   868,    20,   184,   nil,    -1,
    14,    73,   nil,  1216,  1274,  1332,   nil,   nil,   nil,   nil,
  1390,   nil,    92,    95,   nil,  1564,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   146,  4754,   100,  1796,  1854,  1912,  1970,
  2028,  2086,  2144,  2202,  2260,  2318,  2376,  2434,  2492,  2550,
  2608,  2666,  2724,  2782,  2840,  2898,  2956,  3014,  3072,  3130,
  3188,  3246,  3304,  3362,    62,  3478,     3,  3594,  3652,   350,
    87,   234,  5503,  3942,   nil,   217,   -22,  4116,  5564,   nil,
  5625,  5686,  5747,    70,  4464,   263,   nil,   nil,   nil,   nil,
   275,    -7,   nil,    70,   nil,   nil,   nil,   nil,   209,  4826,
    20,   nil,     7,   nil,  4995,    73,   nil,   nil,  5103,   nil,
    65,   nil,   158,  1680,   -15,  5373,  4696,   nil,   119,   nil,
   nil,   nil,   nil,   nil,    61,   292,   176,   118,  5764,  5767,
  6422,  6419,  6449,  5816,  5964,  6007,  6024,  6078,  6095,  6149,
  6166,  6220,  6240,  6294,  6348,  5893,  5947,   nil,   nil,  4638,
   nil,  6402,  4580,  4522,  4406,   226,   252,   nil,   nil,    -2,
   nil,    -9,    -8,    44,    67,  4773,    -1,    -4,   nil,   nil,
   nil,   nil,   nil,   nil,  6482,  5839,   212,   nil,   229,   nil,
   231,   172,   nil,  4348,   nil,   219,   nil,   214,    -4,   nil,
  4290,  4232,  4174,  4058,  4000,   165,   167,   nil,   -11,   186,
   184,  4823,   nil,    23,   136,   143,  3884,   nil,  3826,   nil,
  3768,   nil,  3710,   nil,   nil,   nil,   nil,  3536,   nil,   nil,
   nil,     6,   nil,   nil,   nil,   nil,  5449,    84,   nil,  3420,
  1738,   103,   nil,  6504,   nil,   126,  1622,   139,  6526,  1506,
  1448,   156,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1158,   153,   nil,   175,   nil,   115,
   154,  1100,   nil,   184,    94,   192,   170,     0,  1042,   nil,
   168,   201,   177,   210,   215,   nil,    78,   nil,   214,   984,
   926,   nil,   nil,   nil,   636,  5319,   nil,   nil,  5265,   nil,
   nil,   nil,   167,    64,  5211,   238,   578,   239,   nil,   nil,
   nil,   nil,  5157,  5049,   251,   192,   nil,   nil,   nil,  4941,
   102,   nil,   520,   268,   245,   nil,   273,   275,   nil,   nil,
   nil,   275,   277,   278,   nil,   288,   nil,   nil,   nil,   263,
   283,   nil,   nil,   286,   nil,   288,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   230,   nil,   172,    56,   nil,
   nil,   nil,   296,   nil,   nil,   nil,   nil,   299,   nil,   300,
   nil,   301,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -229,  -230,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -108,  -230,  -230,  -230,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -73,
   -74,   -78,  -230,  -230,  -230,  -230,  -230,  -119,  -121,  -230,
  -230,  -230,  -167,  -230,  -230,  -230,  -180,  -181,  -182,  -183,
  -230,  -185,  -230,  -196,  -199,  -230,  -204,  -205,  -206,  -207,
  -208,  -209,  -210,  -230,  -230,    -7,  -230,  -230,  -230,  -230,
  -230,  -230,  -230,  -230,  -230,  -230,  -230,  -230,  -230,  -230,
  -230,  -230,  -230,  -230,  -230,  -230,  -230,  -230,  -230,  -230,
  -230,  -230,  -230,  -230,  -230,  -128,  -123,  -229,  -229,   -28,
  -230,   -35,  -230,  -230,   -75,  -230,  -230,  -230,  -230,   -85,
  -230,  -230,  -230,  -230,  -230,  -229,  -138,  -158,  -159,  -120,
  -229,  -229,  -147,  -149,  -150,  -151,  -152,  -153,  -229,   -43,
  -230,  -170,  -230,  -173,  -230,  -230,  -176,  -177,  -189,  -184,
  -230,  -192,  -230,  -230,  -230,  -230,  -230,   407,    -6,    -9,
   -12,   -13,   -14,   -15,  -230,   -18,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -27,   -29,   -30,   -31,   -32,   -33,
   -34,   -36,   -37,   -38,   -39,   -40,  -230,   -41,  -103,  -230,
   -79,  -230,  -222,  -228,  -216,  -213,  -211,  -117,  -129,  -205,
  -132,  -209,  -230,  -219,  -217,  -225,  -207,  -208,  -215,  -220,
  -221,  -223,  -224,  -226,  -128,  -127,  -230,  -126,  -230,   -42,
  -211,   -70,   -80,  -230,   -83,  -211,  -163,  -166,  -230,   -77,
  -230,  -230,  -230,  -128,  -230,  -213,  -229,  -160,  -230,  -230,
  -230,  -230,  -155,  -230,  -230,  -230,  -230,  -168,  -230,  -171,
  -230,  -174,  -230,  -186,  -187,  -188,  -190,  -230,  -193,  -194,
  -195,  -211,  -197,  -200,  -202,  -203,  -108,  -230,   -17,  -230,
  -230,  -211,  -105,  -128,  -116,  -230,  -214,  -230,  -212,  -230,
  -230,  -211,  -131,  -133,  -216,  -217,  -218,  -219,  -222,  -225,
  -227,  -228,  -124,  -125,  -212,  -230,   -72,  -230,   -82,  -230,
  -212,  -230,   -76,  -230,   -88,  -230,   -94,  -230,  -230,   -98,
  -213,  -211,  -213,  -230,  -230,  -141,  -230,  -161,  -211,  -229,
  -230,  -148,  -156,  -154,  -229,   -44,  -169,  -172,  -179,  -175,
  -178,  -191,  -230,  -230,  -107,  -230,  -212,  -211,  -111,  -118,
  -112,  -130,  -134,  -135,  -230,   -69,   -81,   -84,  -164,  -165,
   -88,   -87,  -230,  -230,   -94,   -93,  -230,  -230,  -102,   -97,
   -99,  -230,  -230,  -230,  -114,  -229,  -142,  -143,  -144,  -230,
  -230,  -139,  -140,  -230,  -146,  -230,  -198,  -201,  -104,  -106,
  -115,  -122,   -71,   -86,   -89,  -230,   -92,  -230,  -230,  -109,
  -110,  -113,  -230,  -162,  -136,  -145,  -157,  -230,   -91,  -230,
   -96,  -230,  -101,  -137,   -90,   -95,  -100 ]

racc_goto_table = [
     2,   114,     4,   149,   136,   134,   109,   111,   112,   130,
   196,   138,   188,   263,   195,   225,   370,   275,   355,   351,
   187,   375,   236,   321,   309,   322,   159,   239,   160,   161,
   162,   163,   339,   235,    75,   245,   118,   120,   121,   122,
   277,   216,   218,   273,   140,   142,   357,   139,   139,   144,
   341,   271,   308,   261,   148,   384,   314,   313,   366,   155,
   240,   222,   392,   348,   295,   383,   386,   330,   258,   299,
   259,     3,   164,   256,   257,   139,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
   179,   180,   181,   182,   183,   184,   185,   186,   272,   191,
   360,   215,   215,   158,   220,   332,   255,   139,   228,   217,
   217,   139,   151,   153,     1,   335,   nil,   nil,   191,   281,
   nil,   nil,   nil,   nil,   nil,   344,   nil,   nil,   nil,   nil,
   nil,   nil,   361,   242,   363,   nil,   nil,   318,   311,   nil,
   nil,   nil,   310,   312,   nil,   nil,   nil,   nil,   nil,   nil,
   266,   nil,   nil,   260,   nil,   362,   267,   nil,   nil,   136,
   134,   nil,   369,   130,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   337,   nil,
   nil,   380,   296,   186,   nil,   nil,   118,   120,   121,   nil,
   nil,   377,   nil,   nil,   nil,   136,   134,   136,   134,   nil,
   331,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   297,   nil,   nil,   139,   191,   191,   nil,
   303,   305,   nil,   nil,   nil,   nil,   nil,   nil,   315,   nil,
   325,   nil,   325,   nil,   328,   379,   144,   nil,   nil,   nil,
   nil,   148,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   325,   334,   nil,   nil,   nil,   nil,   nil,
   191,   nil,   nil,   342,   343,   nil,   367,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   325,   nil,
   nil,   nil,   nil,   nil,   nil,   349,   nil,   nil,   nil,   nil,
   nil,   nil,   139,   nil,   nil,   nil,   382,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   373,   372,   nil,   nil,   nil,   nil,   372,   nil,   nil,   nil,
   186,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   118,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   372,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   397,   nil,   399,   401 ]

racc_goto_check = [
     2,    40,     4,    82,    32,    38,    10,    10,    10,    65,
    57,    65,    52,    89,    55,    45,    67,    56,    48,    47,
    13,    67,    66,    73,    50,    73,     7,    66,     8,     8,
     8,     8,    58,    55,     6,    66,    10,    10,    10,    10,
    39,    61,    61,    59,    12,    12,    51,    10,    10,    10,
    62,    53,    49,    45,    10,    46,    69,    56,    70,    10,
    72,    44,    67,    75,    39,    47,    48,    77,    78,    39,
    79,     3,    12,    83,    84,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    52,    10,
    50,    10,    10,     6,    12,    39,    86,    10,    12,     4,
     4,    10,    87,    88,     1,    39,   nil,   nil,    10,    57,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,
   nil,   nil,    56,     4,    56,   nil,   nil,    45,    57,   nil,
   nil,   nil,    55,    55,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,     2,   nil,    39,     2,   nil,   nil,    32,
    38,   nil,    39,    65,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,   nil,
   nil,    39,    40,    10,   nil,   nil,    10,    10,    10,   nil,
   nil,    89,   nil,   nil,   nil,    32,    38,    32,    38,   nil,
    82,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,    10,    10,    10,   nil,
     2,     2,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,
    10,   nil,    10,   nil,    10,    52,    10,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,    10,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,    10,    10,   nil,    65,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,    40,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,     4,   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   114,     0,    71,     2,   nil,    29,   -50,   -49,   nil,
    -6,   nil,    -9,   -83,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -46,   nil,   nil,   nil,   nil,   nil,   -45,  -156,
   -39,   nil,   nil,   nil,   -54,  -101,  -297,  -285,  -288,  -180,
  -208,  -261,   -91,  -138,   nil,   -91,  -178,   -95,  -244,  -148,
   nil,   -66,  -228,   nil,   nil,   -40,  -103,  -303,   nil,  -180,
  -258,   nil,   -71,  -218,   nil,  -237,   nil,  -185,   -84,   -82,
   nil,   nil,   -57,   -77,   -76,   nil,   -44,    50,    50,  -142 ]

racc_goto_default = [
   nil,   nil,   371,   nil,   237,     5,     6,     7,     8,     9,
    11,    10,   307,   nil,    15,    39,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,   nil,
   nil,    40,    41,   115,   nil,   nil,   119,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   197,   nil,
   106,   nil,   198,   202,   200,   126,   nil,   nil,   125,   nil,
   nil,   131,   nil,   132,   133,   226,   145,   147,    56,    57,
    58,    60,   nil,   nil,   nil,   150,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 90, :_reduce_1,
  1, 90, :_reduce_2,
  1, 90, :_reduce_none,
  1, 91, :_reduce_4,
  1, 94, :_reduce_5,
  3, 94, :_reduce_6,
  2, 94, :_reduce_7,
  1, 95, :_reduce_8,
  3, 95, :_reduce_9,
  1, 96, :_reduce_none,
  1, 97, :_reduce_11,
  3, 97, :_reduce_12,
  3, 97, :_reduce_13,
  3, 97, :_reduce_14,
  3, 97, :_reduce_15,
  1, 99, :_reduce_none,
  4, 99, :_reduce_17,
  3, 99, :_reduce_18,
  3, 99, :_reduce_19,
  3, 99, :_reduce_20,
  3, 99, :_reduce_21,
  3, 99, :_reduce_22,
  3, 99, :_reduce_23,
  3, 99, :_reduce_24,
  3, 99, :_reduce_25,
  3, 99, :_reduce_26,
  3, 99, :_reduce_27,
  2, 99, :_reduce_28,
  3, 99, :_reduce_29,
  3, 99, :_reduce_30,
  3, 99, :_reduce_31,
  3, 99, :_reduce_32,
  3, 99, :_reduce_33,
  3, 99, :_reduce_34,
  2, 99, :_reduce_35,
  3, 99, :_reduce_36,
  3, 99, :_reduce_37,
  3, 99, :_reduce_38,
  3, 99, :_reduce_39,
  3, 99, :_reduce_40,
  3, 99, :_reduce_41,
  3, 99, :_reduce_42,
  1, 101, :_reduce_43,
  3, 101, :_reduce_44,
  1, 100, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 122, :_reduce_67,
  1, 122, :_reduce_68,
  5, 103, :_reduce_69,
  3, 103, :_reduce_70,
  6, 103, :_reduce_71,
  4, 103, :_reduce_72,
  1, 103, :_reduce_73,
  1, 107, :_reduce_74,
  2, 107, :_reduce_75,
  4, 130, :_reduce_76,
  3, 130, :_reduce_77,
  1, 130, :_reduce_78,
  3, 131, :_reduce_79,
  2, 129, :_reduce_80,
  3, 133, :_reduce_81,
  2, 133, :_reduce_82,
  2, 132, :_reduce_83,
  4, 132, :_reduce_84,
  2, 110, :_reduce_85,
  5, 135, :_reduce_86,
  4, 135, :_reduce_87,
  0, 136, :_reduce_none,
  2, 136, :_reduce_89,
  4, 136, :_reduce_90,
  3, 136, :_reduce_91,
  6, 111, :_reduce_92,
  5, 111, :_reduce_93,
  0, 137, :_reduce_none,
  4, 137, :_reduce_95,
  3, 137, :_reduce_96,
  5, 109, :_reduce_97,
  1, 138, :_reduce_98,
  2, 138, :_reduce_99,
  5, 139, :_reduce_100,
  4, 139, :_reduce_101,
  1, 140, :_reduce_102,
  1, 102, :_reduce_none,
  4, 102, :_reduce_104,
  1, 142, :_reduce_105,
  3, 142, :_reduce_106,
  3, 141, :_reduce_107,
  1, 98, :_reduce_108,
  6, 98, :_reduce_109,
  6, 98, :_reduce_110,
  5, 98, :_reduce_111,
  5, 98, :_reduce_112,
  6, 98, :_reduce_113,
  5, 98, :_reduce_114,
  4, 147, :_reduce_115,
  1, 148, :_reduce_116,
  1, 144, :_reduce_117,
  3, 144, :_reduce_118,
  1, 143, :_reduce_119,
  2, 143, :_reduce_120,
  1, 143, :_reduce_121,
  6, 108, :_reduce_122,
  2, 108, :_reduce_123,
  3, 149, :_reduce_124,
  3, 149, :_reduce_125,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 146, :_reduce_128,
  1, 146, :_reduce_129,
  3, 146, :_reduce_130,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  3, 151, :_reduce_134,
  3, 151, :_reduce_135,
  6, 112, :_reduce_136,
  7, 113, :_reduce_137,
  1, 157, :_reduce_138,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_142,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  6, 114, :_reduce_145,
  5, 114, :_reduce_146,
  1, 160, :_reduce_147,
  3, 160, :_reduce_148,
  1, 162, :_reduce_149,
  1, 162, :_reduce_150,
  1, 162, :_reduce_151,
  1, 162, :_reduce_none,
  1, 163, :_reduce_153,
  3, 163, :_reduce_154,
  1, 161, :_reduce_none,
  2, 161, :_reduce_156,
  6, 116, :_reduce_157,
  1, 154, :_reduce_158,
  1, 154, :_reduce_159,
  1, 155, :_reduce_160,
  2, 155, :_reduce_161,
  4, 155, :_reduce_162,
  1, 134, :_reduce_163,
  3, 134, :_reduce_164,
  3, 164, :_reduce_165,
  1, 164, :_reduce_166,
  1, 106, :_reduce_167,
  3, 117, :_reduce_168,
  4, 117, :_reduce_169,
  2, 117, :_reduce_170,
  3, 117, :_reduce_171,
  4, 117, :_reduce_172,
  2, 117, :_reduce_173,
  3, 120, :_reduce_174,
  4, 120, :_reduce_175,
  2, 120, :_reduce_176,
  1, 165, :_reduce_177,
  3, 165, :_reduce_178,
  3, 166, :_reduce_179,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 167, :_reduce_183,
  2, 168, :_reduce_184,
  1, 170, :_reduce_185,
  1, 172, :_reduce_186,
  1, 173, :_reduce_187,
  2, 171, :_reduce_188,
  1, 174, :_reduce_189,
  1, 175, :_reduce_190,
  2, 175, :_reduce_191,
  2, 169, :_reduce_192,
  2, 176, :_reduce_193,
  2, 176, :_reduce_194,
  3, 92, :_reduce_195,
  0, 177, :_reduce_196,
  2, 177, :_reduce_197,
  4, 177, :_reduce_198,
  1, 115, :_reduce_199,
  3, 115, :_reduce_200,
  5, 115, :_reduce_201,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 123, :_reduce_204,
  1, 126, :_reduce_205,
  1, 124, :_reduce_206,
  1, 125, :_reduce_207,
  1, 119, :_reduce_208,
  1, 118, :_reduce_209,
  1, 121, :_reduce_210,
  0, 128, :_reduce_none,
  1, 128, :_reduce_212,
  0, 145, :_reduce_none,
  1, 145, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 93, :_reduce_229 ]

racc_reduce_n = 230

racc_shift_n = 407

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :DELETES => 17,
  :LESSEQUAL => 18,
  :NOTEQUAL => 19,
  :DOT => 20,
  :COLON => 21,
  :LLCOLLECT => 22,
  :RRCOLLECT => 23,
  :QMARK => 24,
  :LPAREN => 25,
  :RPAREN => 26,
  :ISEQUAL => 27,
  :GREATEREQUAL => 28,
  :GREATERTHAN => 29,
  :LESSTHAN => 30,
  :IF => 31,
  :ELSE => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :ATAT => 45,
  :LCOLLECT => 46,
  :RCOLLECT => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68,
  :UNLESS => 69,
  :PIPE => 70,
  :LAMBDA => 71,
  :SELBRACE => 72,
  :NUMBER => 73,
  :HEREDOC => 74,
  :SUBLOCATE => 75,
  :RENDER_STRING => 76,
  :RENDER_EXPR => 77,
  :EPP_START => 78,
  :EPP_END => 79,
  :EPP_END_TRIM => 80,
  :FUNCTION => 81,
  :LOW => 82,
  :HIGH => 83,
  :CALL => 84,
  :LISTSTART => 85,
  :MODULO => 86,
  :TITLE_COLON => 87,
  :CASE_COLON => 88 }

racc_nt_base = 89

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 65)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 77)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 78)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_29(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_30(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_31(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_32(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_33(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_34(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_35(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_36(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_37(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_38(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_39(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_40(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_41(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_42(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 134)
  def _reduce_43(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 135)
  def _reduce_44(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'egrammar.ra', 168)
  def _reduce_67(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 169)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 177)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_73(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_75(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_76(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_78(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_79(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_80(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 227)
  def _reduce_81(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_82(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 232)
  def _reduce_83(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_84(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 243)
  def _reduce_85(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_86(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_89(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_90(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_91(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 279)
  def _reduce_92(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 94 omitted

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_95(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 297)
  def _reduce_96(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_97(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 311)
  def _reduce_98(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_99(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 317)
  def _reduce_100(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_102(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'egrammar.ra', 336)
  def _reduce_104(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 341)
  def _reduce_105(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 342)
  def _reduce_106(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 347)
  def _reduce_107(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 359)
  def _reduce_108(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 362)
  def _reduce_109(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 385)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 398)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_113(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 424)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 429)
  def _reduce_115(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_117(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_118(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 440)
  def _reduce_119(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 441)
  def _reduce_120(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_121(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 454)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 458)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 463)
  def _reduce_124(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 464)
  def _reduce_125(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'egrammar.ra', 477)
  def _reduce_128(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 478)
  def _reduce_129(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_130(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'egrammar.ra', 495)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 499)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 509)
  def _reduce_136(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 523)
  def _reduce_137(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 533)
  def _reduce_138(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'egrammar.ra', 542)
  def _reduce_142(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'egrammar.ra', 559)
  def _reduce_145(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 573)
  def _reduce_147(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 574)
  def _reduce_148(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 579)
  def _reduce_149(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 580)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_151(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_153(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 586)
  def _reduce_154(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 155 omitted

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_156(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_157(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 605)
  def _reduce_158(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_159(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_160(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_161(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_162(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_163(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_164(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_165(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_166(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_167(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_168(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_169(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_170(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_171(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_172(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_173(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_174(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_175(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_176(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_177(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_178(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_179(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_183(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_184(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_185(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_186(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_187(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_188(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_189(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_190(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_191(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_192(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_193(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_194(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_195(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_196(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_197(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_198(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_199(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_200(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_201(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 202 omitted

# reduce 203 omitted

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_204(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_205(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_206(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_207(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_208(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_209(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_210(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'egrammar.ra', 719)
  def _reduce_212(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

module_eval(<<'.,.,', 'egrammar.ra', 742)
  def _reduce_229(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
