#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 705)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'54,56,-209,240,49,118,51,54,56,117,230,239,334,287,72,229,240,273,54',
'56,-127,-200,210,13,-129,210,235,234,95,39,99,46,94,48,43,250,47,62',
'58,272,41,61,44,45,-209,127,59,12,125,67,60,54,56,11,98,49,127,51,363',
'125,207,63,-127,-200,79,78,-129,40,63,74,75,57,240,228,13,50,73,251',
'227,63,39,325,46,114,48,43,80,47,62,58,303,41,61,44,45,247,118,59,12',
'223,117,60,54,56,11,320,49,319,51,54,56,118,63,118,305,117,72,117,40',
'118,54,56,57,117,225,13,50,320,249,319,95,39,99,46,94,48,43,307,47,62',
'58,65,41,61,44,45,226,127,59,12,125,293,60,54,56,11,98,49,127,51,361',
'125,232,63,118,233,79,78,117,40,63,74,75,57,220,249,13,50,73,220,312',
'63,39,313,46,314,48,43,80,47,62,58,210,41,61,44,45,263,317,59,12,290',
'321,60,54,56,11,323,49,289,51,359,206,247,63,249,330,331,72,286,40,271',
'247,197,57,173,67,13,50,140,341,264,95,39,99,46,94,48,43,249,47,62,58',
'119,41,61,44,45,265,344,59,12,107,108,60,54,56,11,98,49,107,51,269,107',
'348,63,76,77,79,78,323,40,350,74,75,57,351,352,13,50,73,353,104,355',
'39,356,46,357,48,43,80,47,62,58,271,41,61,44,45,67,64,59,12,364,365',
'60,54,56,11,72,49,366,51,367,,,63,,,,72,,40,95,,99,57,94,,13,50,,,,95',
'39,99,46,94,48,101,,47,62,58,,41,61,,98,,,59,12,,,60,54,56,11,98,49',
',51,,,,63,76,77,79,78,,40,,74,75,57,,,13,50,73,,,,39,,46,,48,101,80',
'47,62,58,,41,61,68,70,69,71,59,12,,,60,54,56,11,72,49,,51,,,,63,,,,72',
',40,95,,99,57,94,,13,50,,,,95,39,99,46,94,48,101,,47,62,58,,41,61,,98',
',,59,12,,,60,54,56,11,98,49,,51,74,75,,63,,,,73,,40,,,,57,,,13,50,73',
',,,39,,46,,48,43,,47,62,58,,41,61,44,45,,,59,12,,,60,54,56,11,72,49',
',51,,,,63,,,,72,,40,95,,99,57,94,,13,50,,,,95,39,99,46,94,48,101,,47',
'62,58,,41,61,,98,,,59,12,,,60,54,56,11,98,49,,51,277,,,63,,,,72,,40',
',74,75,57,,,13,50,73,,,95,39,99,46,94,48,43,,47,62,58,,41,61,44,45,',
',59,12,,,60,54,56,11,98,49,,51,,,,63,,,,72,,40,,74,75,57,,,13,50,73',
',,95,39,99,46,94,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,98',
'49,,51,,,,63,,,,72,,40,,,,57,,,13,50,73,,,95,39,99,46,94,48,101,,47',
'62,58,,41,61,,,,,59,12,,,60,54,56,11,98,49,,51,,,,63,,,,,,40,,,,57,',
',13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,',
'49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41',
'61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39',
',46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,',
',,,,40,,,,57,,,13,50,,,,,175,192,186,193,48,187,195,188,184,182,,177',
'190,,,,,59,12,196,191,189,54,56,11,,49,,51,,,,63,,,,,194,176,,,,57,',
',13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,',
'49,295,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,',
'41,61,,,,,59,12,,,60,54,56,11,,49,130,51,,,,63,,,,,,40,,,,57,,,13,50',
',,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,132',
'51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,',
',,,59,12,,,60,54,56,11,,49,,51,135,,,63,,,,,,40,,,,57,,,13,50,,,,,39',
',46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,',
',,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,',
',60,54,56,11,,49,296,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101',
',47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57',
',,13,50,,,,,39,,46,,48,43,,47,62,58,,41,61,44,45,,,59,12,,,60,54,56',
'11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58',
',41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,',
',,,39,,46,,48,43,,47,62,58,,41,61,44,45,,,59,12,,,60,54,56,11,,49,,51',
',,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,43,,47,62,58,,41,61,44,45',
',,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46',
',48,43,,47,62,58,,41,61,44,45,,,59,12,,,60,54,56,11,,49,,51,,,,63,,',
',,,40,,,,57,,,13,50,,,,,39,,46,,48,43,,47,62,58,,41,61,44,45,,,59,12',
',,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,43',
',47,62,58,,41,61,44,45,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,',
',,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56',
'11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58',
',41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,',
',,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,',
',,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59',
'12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48',
'101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,',
',,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56',
'11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58',
',41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,',
',,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,',
',,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59',
'12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48',
'101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,',
',,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56',
'11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58',
',41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,',
',,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,',
',,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59',
'12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48',
'101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,',
',,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56',
'11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58',
',41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,',
',,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,',
',,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59',
'12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48',
'101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,',
',,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56',
'11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58',
',41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,',
',,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,',
',,63,,,,,,40,,,172,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,',
',,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,175,192',
'186,193,48,187,195,188,184,182,,177,190,,,,,59,12,196,191,189,54,56',
'11,,49,,51,340,,,63,,,,,194,176,,,,57,,,13,50,,,,,39,,46,,48,43,,47',
'62,58,,41,61,44,45,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57',
',,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11',
',49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41',
'61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39',
',46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,',
',,,,40,,,,57,,,13,50,,,,,39,,46,,48,43,,47,62,58,,41,61,44,45,,,59,12',
',,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101',
',47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57',
',,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,,,11,54,56',
',,49,,51,63,,,,,,40,,,,57,,,,50,,13,204,,,,,39,,46,,48,101,,47,62,58',
',41,61,,,,,59,12,,,60,54,56,11,,49,,51,326,,,63,,,,,,40,,,,57,,,13,50',
',,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51',
',,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,',
'59,12,,,60,,,11,54,56,,,49,,51,63,,,,,,40,,,,57,,,,50,,13,212,,,,,39',
',46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,298,,,63',
',,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12',
',,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101',
',47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57',
',,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11',
',49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41',
'61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39',
',46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,',
',,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,',
',60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101',
',47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57',
',,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11',
',49,,51,275,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,43,,47,62,58,',
'41,61,44,45,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50',
',,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,,,11,,,,,,,,63,,',
',,,40,72,,,57,,,,50,,91,92,93,88,83,95,,99,,94,,,84,86,85,87,,,,,,,',
',,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72,,96,,,73,,,,91,92',
'93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76',
'77,79,78,81,82,,74,75,,,,,,73,,72,,,,,231,,,80,91,92,93,88,83,95,,99',
',94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74',
'75,72,,216,,,73,,,,91,92,93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,,',
',,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72,,,,,73,,,,91,92,93',
'88,83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77',
'79,78,81,82,,74,75,72,,215,,,73,,,,91,92,93,88,83,95,80,99,,94,,,84',
'86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72,,214',
',,73,,,,91,92,93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98',
',,,90,89,,,76,77,79,78,81,82,,74,75,72,,213,,,73,,,,91,92,93,88,83,95',
'80,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81',
'82,,74,75,72,,,,,73,,,,91,92,93,88,83,95,80,99,,94,,,84,86,85,87,,,',
',,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72,,,,,73,,,,91,92',
'93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76',
'77,79,78,81,82,,74,75,72,,,,,73,,,,91,92,93,88,83,95,80,99,,94,,,84',
'86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72,,',
',,73,,,,91,92,93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98',
',,,90,89,,,76,77,79,78,81,82,,74,75,72,,,,,73,,,,91,92,93,88,83,95,80',
'99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82',
',74,75,72,,,,,73,,,,91,92,93,88,83,95,80,99,,94,,,84,86,85,87,72,,,',
',,,,,,,,,,95,98,99,,94,90,89,,,76,77,79,78,81,82,,74,75,,,,,,73,,,98',
',,72,,,,80,76,77,79,78,81,82,,74,75,95,,99,,94,73,,,,,,72,,,,80,,,,',
',,,,83,95,98,99,,94,,,84,,76,77,79,78,81,82,,74,75,,,,,,73,,,98,,,,',
'72,,80,76,77,79,78,81,82,,74,75,,83,95,,99,73,94,,,84,,,,72,,80,,,,',
',,,,,,83,95,98,99,,94,,,84,,76,77,79,78,81,82,,74,75,,,,,,73,,,98,,',
',,72,,80,76,77,79,78,81,82,,74,75,,83,95,,99,73,94,,,84,,,,,,80,,,,',
',,,,,,,,98,,,,,72,,,76,77,79,78,81,82,,74,75,88,83,95,,99,73,94,,,84',
'86,85,87,,,80,,,,,,,,,,,,,98,,,,,72,,,76,77,79,78,81,82,,74,75,88,83',
'95,,99,73,94,,,84,86,85,87,,,80,,,,,,,,,,,,,98,,,,,89,,,76,77,79,78',
'81,82,,74,75,72,,,,,73,,,,91,92,93,88,83,95,80,99,,94,,,84,86,85,87',
',,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72,,,,,73,,,,91',
'92,93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,',
'76,77,79,78,81,82,,74,75,72,,,,,73,,,,91,92,93,88,83,95,80,99,,94,,',
'84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,,',
',,,73,,72,,,,,241,,,80,91,92,93,88,83,95,,99,,94,,,84,86,85,87,,,,,',
',,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72,,,,,73,,,,91,92',
'93,88,83,95,80,99,,94,,202,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,',
'76,77,79,78,81,82,,74,75,,,,,,73,,72,,,,,,,,80,91,92,93,88,83,95,245',
'99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82',
',74,75,72,,,,,73,,,,91,92,93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,',
',,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,,259,192,258,193,73',
'256,195,260,254,253,,255,257,,80,,,,,196,191,261,259,192,258,193,,256',
'195,260,254,253,,255,257,,,194,262,,,196,191,261,259,192,258,193,,256',
'195,260,254,253,,255,257,,,194,262,,,196,191,261,,,,,,,,,,,,,,,,194',
'262' ]
        racc_action_table = arr = ::Array.new(5601, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,189,211,0,286,0,47,47,286,131,147,286,220,151,131,147,211,188,188',
'182,190,220,0,184,107,139,139,151,0,151,0,151,0,0,185,0,0,0,210,0,0',
'0,0,189,47,0,0,47,141,0,351,351,0,151,351,188,351,351,188,107,0,182',
'190,151,151,184,0,47,151,151,0,278,129,351,0,151,185,129,188,351,278',
'351,43,351,351,151,351,351,351,242,351,351,351,351,178,186,351,351,121',
'186,351,4,4,351,275,4,275,4,223,223,43,351,46,246,43,152,46,351,187',
'225,225,351,187,121,4,351,317,179,317,152,4,152,4,152,4,4,248,4,4,4',
'4,4,4,4,4,123,223,4,4,223,226,4,350,350,4,152,350,225,350,350,225,134',
'4,101,134,152,152,101,4,223,152,152,4,120,252,350,4,152,115,266,225',
'350,268,350,270,350,350,152,350,350,350,271,350,350,350,350,199,274',
'350,350,222,276,350,348,348,350,277,348,221,348,348,106,281,350,282',
'283,284,156,218,350,288,217,97,350,95,66,348,350,64,302,201,156,348',
'156,348,156,348,348,304,348,348,348,44,348,348,348,348,203,311,348,348',
'312,38,348,206,206,348,156,206,204,206,206,37,320,348,156,156,156,156',
'321,348,323,156,156,348,324,328,206,348,156,329,36,335,206,336,206,339',
'206,206,156,206,206,206,208,206,206,206,206,5,1,206,206,354,358,206',
'11,11,206,100,11,360,11,362,,,206,,,,157,,206,100,,100,206,100,,11,206',
',,,157,11,157,11,157,11,11,,11,11,11,,11,11,,100,,,11,11,,,11,12,12',
'11,157,12,,12,,,,11,157,157,157,157,,11,,157,157,11,,,12,11,157,,,,12',
',12,,12,12,157,12,12,12,,12,12,7,7,7,7,12,12,,,12,13,13,12,153,13,,13',
',,,12,,,,149,,12,153,,153,12,153,,13,12,,,,149,13,149,13,149,13,13,',
'13,13,13,,13,13,,153,,,13,13,,,13,331,331,13,149,331,,331,153,153,,13',
',,,153,,13,,,,13,,,331,13,149,,,,331,,331,,331,331,,331,331,331,,331',
'331,331,331,,,331,331,,,331,319,319,331,148,319,,319,,,,331,,,,155,',
'331,148,,148,331,148,,319,331,,,,155,319,155,319,155,319,319,,319,319',
'319,,319,319,,148,,,319,319,,,319,214,214,319,155,214,,214,214,,,319',
',,,154,,319,,155,155,319,,,214,319,155,,,154,214,154,214,154,214,214',
',214,214,214,,214,214,214,214,,,214,214,,,214,39,39,214,154,39,,39,',
',,214,,,,150,,214,,154,154,214,,,39,214,154,,,150,39,150,39,150,39,39',
',39,39,39,,39,39,,,,,39,39,,,39,40,40,39,150,40,,40,,,,39,,,,102,,39',
',,,39,,,40,39,150,,,102,40,102,40,102,40,40,,40,40,40,,40,40,,,,,40',
'40,,,40,41,41,40,102,41,,41,,,,40,,,,,,40,,,,40,,,41,40,,,,,41,,41,',
'41,41,,41,41,41,,41,41,,,,,41,41,,,41,42,42,41,,42,,42,,,,41,,,,,,41',
',,,41,,,42,41,,,,,42,,42,,42,42,,42,42,42,,42,42,,,,,42,42,,,42,215',
'215,42,,215,,215,,,,42,,,,,,42,,,,42,,,215,42,,,,,215,,215,,215,215',
',215,215,215,,215,215,,,,,215,215,,,215,216,216,215,,216,,216,,,,215',
',,,,,215,,,,215,,,216,215,,,,,216,216,216,216,216,216,216,216,216,216',
',216,216,,,,,216,216,216,216,216,303,303,216,,303,,303,,,,216,,,,,216',
'216,,,,216,,,303,216,,,,,303,,303,,303,303,,303,303,303,,303,303,,,',
',303,303,,,303,227,227,303,,227,227,227,,,,303,,,,,,303,,,,303,,,227',
'303,,,,,227,,227,,227,227,,227,227,227,,227,227,,,,,227,227,,,227,49',
'49,227,,49,49,49,,,,227,,,,,,227,,,,227,,,49,227,,,,,49,,49,,49,49,',
'49,49,49,,49,49,,,,,49,49,,,49,50,50,49,,50,50,50,,,,49,,,,,,49,,,,49',
',,50,49,,,,,50,,50,,50,50,,50,50,50,,50,50,,,,,50,50,,,50,51,51,50,',
'51,,51,51,,,50,,,,,,50,,,,50,,,51,50,,,,,51,,51,,51,51,,51,51,51,,51',
'51,,,,,51,51,,,51,55,55,51,,55,,55,,,,51,,,,,,51,,,,51,,,55,51,,,,,55',
',55,,55,55,,55,55,55,,55,55,,,,,55,55,,,55,229,229,55,,229,229,229,',
',,55,,,,,,55,,,,55,,,229,55,,,,,229,,229,,229,229,,229,229,229,,229',
'229,,,,,229,229,,,229,65,65,229,,65,,65,,,,229,,,,,,229,,,,229,,,65',
'229,,,,,65,,65,,65,65,,65,65,65,,65,65,65,65,,,65,65,,,65,231,231,65',
',231,,231,,,,65,,,,,,65,,,,65,,,231,65,,,,,231,,231,,231,231,,231,231',
'231,,231,231,,,,,231,231,,,231,67,67,231,,67,,67,,,,231,,,,,,231,,,',
'231,,,67,231,,,,,67,,67,,67,67,,67,67,67,,67,67,67,67,,,67,67,,,67,68',
'68,67,,68,,68,,,,67,,,,,,67,,,,67,,,68,67,,,,,68,,68,,68,68,,68,68,68',
',68,68,68,68,,,68,68,,,68,69,69,68,,69,,69,,,,68,,,,,,68,,,,68,,,69',
'68,,,,,69,,69,,69,69,,69,69,69,,69,69,69,69,,,69,69,,,69,70,70,69,,70',
',70,,,,69,,,,,,69,,,,69,,,70,69,,,,,70,,70,,70,70,,70,70,70,,70,70,70',
'70,,,70,70,,,70,71,71,70,,71,,71,,,,70,,,,,,70,,,,70,,,71,70,,,,,71',
',71,,71,71,,71,71,71,,71,71,71,71,,,71,71,,,71,247,247,71,,247,,247',
',,,71,,,,,,71,,,,71,,,247,71,,,,,247,,247,,247,247,,247,247,247,,247',
'247,,,,,247,247,,,247,73,73,247,,73,,73,,,,247,,,,,,247,,,,247,,,73',
'247,,,,,73,,73,,73,73,,73,73,73,,73,73,,,,,73,73,,,73,74,74,73,,74,',
'74,,,,73,,,,,,73,,,,73,,,74,73,,,,,74,,74,,74,74,,74,74,74,,74,74,,',
',,74,74,,,74,75,75,74,,75,,75,,,,74,,,,,,74,,,,74,,,75,74,,,,,75,,75',
',75,75,,75,75,75,,75,75,,,,,75,75,,,75,76,76,75,,76,,76,,,,75,,,,,,75',
',,,75,,,76,75,,,,,76,,76,,76,76,,76,76,76,,76,76,,,,,76,76,,,76,77,77',
'76,,77,,77,,,,76,,,,,,76,,,,76,,,77,76,,,,,77,,77,,77,77,,77,77,77,',
'77,77,,,,,77,77,,,77,78,78,77,,78,,78,,,,77,,,,,,77,,,,77,,,78,77,,',
',,78,,78,,78,78,,78,78,78,,78,78,,,,,78,78,,,78,79,79,78,,79,,79,,,',
'78,,,,,,78,,,,78,,,79,78,,,,,79,,79,,79,79,,79,79,79,,79,79,,,,,79,79',
',,79,80,80,79,,80,,80,,,,79,,,,,,79,,,,79,,,80,79,,,,,80,,80,,80,80',
',80,80,80,,80,80,,,,,80,80,,,80,81,81,80,,81,,81,,,,80,,,,,,80,,,,80',
',,81,80,,,,,81,,81,,81,81,,81,81,81,,81,81,,,,,81,81,,,81,82,82,81,',
'82,,82,,,,81,,,,,,81,,,,81,,,82,81,,,,,82,,82,,82,82,,82,82,82,,82,82',
',,,,82,82,,,82,83,83,82,,83,,83,,,,82,,,,,,82,,,,82,,,83,82,,,,,83,',
'83,,83,83,,83,83,83,,83,83,,,,,83,83,,,83,84,84,83,,84,,84,,,,83,,,',
',,83,,,,83,,,84,83,,,,,84,,84,,84,84,,84,84,84,,84,84,,,,,84,84,,,84',
'85,85,84,,85,,85,,,,84,,,,,,84,,,,84,,,85,84,,,,,85,,85,,85,85,,85,85',
'85,,85,85,,,,,85,85,,,85,86,86,85,,86,,86,,,,85,,,,,,85,,,,85,,,86,85',
',,,,86,,86,,86,86,,86,86,86,,86,86,,,,,86,86,,,86,87,87,86,,87,,87,',
',,86,,,,,,86,,,,86,,,87,86,,,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87',
'87,,,87,88,88,87,,88,,88,,,,87,,,,,,87,,,,87,,,88,87,,,,,88,,88,,88',
'88,,88,88,88,,88,88,,,,,88,88,,,88,89,89,88,,89,,89,,,,88,,,,,,88,,',
',88,,,89,88,,,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,90,90',
'89,,90,,90,,,,89,,,,,,89,,,,89,,,90,89,,,,,90,,90,,90,90,,90,90,90,',
'90,90,,,,,90,90,,,90,91,91,90,,91,,91,,,,90,,,,,,90,,,,90,,,91,90,,',
',,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,92,92,91,,92,,92,,,',
'91,,,,,,91,,,,91,,,92,91,,,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92',
',,92,93,93,92,,93,,93,,,,92,,,,,,92,,,,92,,,93,92,,,,,93,,93,,93,93',
',93,93,93,,93,93,,,,,93,93,,,93,94,94,93,,94,,94,,,,93,,,,,,93,,,,93',
',,94,93,,,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,177,177,94',
',177,,177,,,,94,,,,,,94,,,94,94,,,177,94,,,,,177,,177,,177,177,,177',
'177,177,,177,177,,,,,177,177,,,177,96,96,177,,96,,96,,,,177,,,,,,177',
',,,177,,,96,177,,,,,96,96,96,96,96,96,96,96,96,96,,96,96,,,,,96,96,96',
'96,96,290,290,96,,290,,290,290,,,96,,,,,96,96,,,,96,,,290,96,,,,,290',
',290,,290,290,,290,290,290,,290,290,290,290,,,290,290,,,290,98,98,290',
',98,,98,,,,290,,,,,,290,,,,290,,,98,290,,,,,98,,98,,98,98,,98,98,98',
',98,98,,,,,98,98,,,98,99,99,98,,99,,99,,,,98,,,,,,98,,,,98,,,99,98,',
',,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,176,176,99,,176,,176',
',,,99,,,,,,99,,,,99,,,176,99,,,,,176,,176,,176,176,,176,176,176,,176',
'176,,,,,176,176,,,176,289,289,176,,289,,289,,,,176,,,,,,176,,,,176,',
',289,176,,,,,289,,289,,289,289,,289,289,289,,289,289,289,289,,,289,289',
',,289,175,175,289,,175,,175,,,,289,,,,,,289,,,,289,,,175,289,,,,,175',
',175,,175,175,,175,175,175,,175,175,,,,,175,175,,,175,172,172,175,,172',
',172,,,,175,,,,,,175,,,,175,,,172,175,,,,,172,,172,,172,172,,172,172',
'172,,172,172,,,,,172,172,,,172,,,172,104,104,,,104,,104,172,,,,,,172',
',,,172,,,,172,,104,104,,,,,104,,104,,104,104,,104,104,104,,104,104,',
',,,104,104,,,104,279,279,104,,279,,279,279,,,104,,,,,,104,,,,104,,,279',
'104,,,,,279,,279,,279,279,,279,279,279,,279,279,,,,,279,279,,,279,272',
'272,279,,272,,272,,,,279,,,,,,279,,,,279,,,272,279,,,,,272,,272,,272',
'272,,272,272,272,,272,272,,,,,272,272,,,272,,,272,108,108,,,108,,108',
'272,,,,,,272,,,,272,,,,272,,108,108,,,,,108,,108,,108,108,,108,108,108',
',108,108,,,,,108,108,,,108,233,233,108,,233,,233,233,,,108,,,,,,108',
',,,108,,,233,108,,,,,233,,233,,233,233,,233,233,233,,233,233,,,,,233',
'233,,,233,238,238,233,,238,,238,,,,233,,,,,,233,,,,233,,,238,233,,,',
',238,,238,,238,238,,238,238,238,,238,238,,,,,238,238,,,238,240,240,238',
',240,,240,,,,238,,,,,,238,,,,238,,,240,238,,,,,240,,240,,240,240,,240',
'240,240,,240,240,,,,,240,240,,,240,241,241,240,,241,,241,,,,240,,,,',
',240,,,,240,,,241,240,,,,,241,,241,,241,241,,241,241,241,,241,241,,',
',,241,241,,,241,114,114,241,,114,,114,,,,241,,,,,,241,,,,241,,,114,241',
',,,,114,,114,,114,114,,114,114,114,,114,114,,,,,114,114,,,114,265,265',
'114,,265,,265,,,,114,,,,,,114,,,,114,,,265,114,,,,,265,,265,,265,265',
',265,265,265,,265,265,,,,,265,265,,,265,251,251,265,,251,,251,,,,265',
',,,,,265,,,,265,,,251,265,,,,,251,,251,,251,251,,251,251,251,,251,251',
',,,,251,251,,,251,250,250,251,,250,,250,,,,251,,,,,,251,,,,251,,,250',
'251,,,,,250,,250,,250,250,,250,250,250,,250,250,,,,,250,250,,,250,213',
'213,250,,213,,213,213,,,250,,,,,,250,,,,250,,,213,250,,,,,213,,213,',
'213,213,,213,213,213,,213,213,213,213,,,213,213,,,213,72,72,213,,72',
',72,,,,213,,,,,,213,,,,213,,,72,213,,,,,72,,72,,72,72,,72,72,72,,72',
'72,,,,,72,72,,,72,,,72,,,,,,,,72,,,,,,72,128,,,72,,,,72,,128,128,128',
'128,128,128,,128,,128,,,128,128,128,128,,,,,,,,,,,,,,,,128,,,,128,128',
',,128,128,128,128,128,128,,128,128,10,,10,,,128,,,,10,10,10,10,10,10',
'128,10,,10,,,10,10,10,10,,,,,,,,,,,,,,,,10,,,,10,10,,,10,10,10,10,10',
'10,,10,10,,,,,,10,,133,,,,,133,,,10,133,133,133,133,133,133,,133,,133',
',,133,133,133,133,,,,,,,,,,,,,,,,133,,,,133,133,,,133,133,133,133,133',
'133,,133,133,113,,113,,,133,,,,113,113,113,113,113,113,133,113,,113',
',,113,113,113,113,,,,,,,,,,,,,,,,113,,,,113,113,,,113,113,113,113,113',
'113,,113,113,137,,,,,113,,,,137,137,137,137,137,137,113,137,,137,,,137',
'137,137,137,,,,,,,,,,,,,,,,137,,,,137,137,,,137,137,137,137,137,137',
',137,137,112,,112,,,137,,,,112,112,112,112,112,112,137,112,,112,,,112',
'112,112,112,,,,,,,,,,,,,,,,112,,,,112,112,,,112,112,112,112,112,112',
',112,112,111,,111,,,112,,,,111,111,111,111,111,111,112,111,,111,,,111',
'111,111,111,,,,,,,,,,,,,,,,111,,,,111,111,,,111,111,111,111,111,111',
',111,111,109,,109,,,111,,,,109,109,109,109,109,109,111,109,,109,,,109',
'109,109,109,,,,,,,,,,,,,,,,109,,,,109,109,,,109,109,109,109,109,109',
',109,109,316,,,,,109,,,,316,316,316,316,316,316,109,316,,316,,,316,316',
'316,316,,,,,,,,,,,,,,,,316,,,,316,316,,,316,316,316,316,316,316,,316',
'316,310,,,,,316,,,,310,310,310,310,310,310,316,310,,310,,,310,310,310',
'310,,,,,,,,,,,,,,,,310,,,,310,310,,,310,310,310,310,310,310,,310,310',
'309,,,,,310,,,,309,309,309,309,309,309,310,309,,309,,,309,309,309,309',
',,,,,,,,,,,,,,,309,,,,309,309,,,309,309,309,309,309,309,,309,309,198',
',,,,309,,,,198,198,198,198,198,198,309,198,,198,,,198,198,198,198,,',
',,,,,,,,,,,,,198,,,,198,198,,,198,198,198,198,198,198,,198,198,301,',
',,,198,,,,301,301,301,301,301,301,198,301,,301,,,301,301,301,301,,,',
',,,,,,,,,,,,301,,,,301,301,,,301,301,301,301,301,301,,301,301,297,,',
',,301,,,,297,297,297,297,297,297,301,297,,297,,,297,297,297,297,158',
',,,,,,,,,,,,,158,297,158,,158,297,297,,,297,297,297,297,297,297,,297',
'297,,,,,,297,,,158,,,159,,,,297,158,158,158,158,158,158,,158,158,159',
',159,,159,158,,,,,,160,,,,158,,,,,,,,,160,160,159,160,,160,,,160,,159',
'159,159,159,159,159,,159,159,,,,,,159,,,160,,,,,161,,159,160,160,160',
'160,160,160,,160,160,,161,161,,161,160,161,,,161,,,,162,,160,,,,,,,',
',,,162,162,161,162,,162,,,162,,161,161,161,161,161,161,,161,161,,,,',
',161,,,162,,,,,163,,161,162,162,162,162,162,162,,162,162,,163,163,,163',
'162,163,,,163,,,,,,162,,,,,,,,,,,,,163,,,,,164,,,163,163,163,163,163',
'163,,163,163,164,164,164,,164,163,164,,,164,164,164,164,,,163,,,,,,',
',,,,,,164,,,,,165,,,164,164,164,164,164,164,,164,164,165,165,165,,165',
'164,165,,,165,165,165,165,,,164,,,,,,,,,,,,,165,,,,,165,,,165,165,165',
'165,165,165,,165,165,294,,,,,165,,,,294,294,294,294,294,294,165,294',
',294,,,294,294,294,294,,,,,,,,,,,,,,,,294,,,,294,294,,,294,294,294,294',
'294,294,,294,294,167,,,,,294,,,,167,167,167,167,167,167,294,167,,167',
',,167,167,167,167,,,,,,,,,,,,,,,,167,,,,167,167,,,167,167,167,167,167',
'167,,167,167,168,,,,,167,,,,168,168,168,168,168,168,167,168,,168,,,168',
'168,168,168,,,,,,,,,,,,,,,,168,,,,168,168,,,168,168,168,168,168,168',
',168,168,,,,,,168,,169,,,,,169,,,168,169,169,169,169,169,169,,169,,169',
',,169,169,169,169,,,,,,,,,,,,,,,,169,,,,169,169,,,169,169,169,169,169',
'169,,169,169,103,,,,,169,,,,103,103,103,103,103,103,169,103,,103,,103',
'103,103,103,103,,,,,,,,,,,,,,,,103,,,,103,103,,,103,103,103,103,103',
'103,,103,103,,,,,,103,,174,,,,,,,,103,174,174,174,174,174,174,174,174',
',174,,,174,174,174,174,,,,,,,,,,,,,,,,174,,,,174,174,,,174,174,174,174',
'174,174,,174,174,166,,,,,174,,,,166,166,166,166,166,166,174,166,,166',
',,166,166,166,166,,,,,,,,,,,,,,,,166,,,,166,166,,,166,166,166,166,166',
'166,,166,166,,197,197,197,197,166,197,197,197,197,197,,197,197,,166',
',,,,197,197,197,244,244,244,244,,244,244,244,244,244,,244,244,,,197',
'197,,,244,244,244,249,249,249,249,,249,249,249,249,249,,249,249,,,244',
'244,,,249,249,249,,,,,,,,,,,,,,,,249,249' ]
        racc_action_check = arr = ::Array.new(5601, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   300,   nil,   nil,   100,   287,   nil,   335,   nil,   nil,
  4052,   304,   355,   406,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   257,   193,   228,   610,
   661,   712,   763,    75,   199,   nil,    77,     5,   nil,  1018,
  1069,  1120,   nil,   nil,   nil,  1171,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   229,  1273,   214,  1375,  1426,  1477,
  1528,  1579,  3931,  1681,  1732,  1783,  1834,  1885,  1936,  1987,
  2038,  2089,  2140,  2191,  2242,  2293,  2344,  2395,  2446,  2497,
  2548,  2599,  2650,  2701,  2752,   185,  2854,   215,  2956,  3007,
   303,   128,   671,  5333,  3265,   nil,   204,   -10,  3421,  4401,
   nil,  4344,  4287,  4173,  3676,   154,   nil,   nil,   nil,   nil,
   149,    87,   nil,   126,   nil,   nil,   nil,   nil,  3995,    66,
   nil,     3,   nil,  4116,   153,   nil,   nil,  4230,   nil,    22,
   nil,    37,   nil,   nil,   nil,   nil,   nil,     4,   507,   416,
   620,     8,   110,   405,   569,   518,   212,   314,  4768,  4811,
  4836,  4881,  4906,  4951,  4996,  5041,  5454,  5155,  5212,  5276,
   nil,   nil,  3211,   nil,  5397,  3160,  3058,  2803,    54,   116,
   nil,   nil,     9,   nil,    13,    24,    60,    83,    16,    -9,
    10,   nil,   nil,   nil,   nil,   nil,   nil,  5487,  4629,   150,
   nil,   208,   nil,   236,   190,   nil,   253,   nil,   282,   nil,
    24,    -9,   nil,  3880,   559,   814,   865,   181,   182,   nil,
   -13,   201,   193,   107,   nil,   118,   111,   967,   nil,  1222,
   nil,  1324,   nil,  3472,   nil,   nil,   nil,   nil,  3523,   nil,
  3574,  3625,    78,   nil,  5509,   nil,   105,  1630,   128,  5531,
  3829,  3778,   163,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  3727,   154,   nil,   174,   nil,
   115,   157,  3367,   nil,   189,    73,   193,   175,    60,  3316,
   nil,   172,   203,   207,   209,   nil,   -31,   nil,   209,  3109,
  2905,   nil,   nil,   nil,  5098,   nil,   nil,  4743,   nil,   nil,
   nil,  4686,   221,   916,   227,   nil,   nil,   nil,   nil,  4572,
  4515,   240,   182,   nil,   nil,   nil,  4458,    95,   nil,   508,
   256,   238,   nil,   264,   268,   nil,   nil,   nil,   268,   272,
   nil,   457,   nil,   nil,   nil,   257,   276,   nil,   nil,   278,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   202,   nil,
   151,    49,   nil,   nil,   294,   nil,   nil,   nil,   295,   nil,
   302,   nil,   304,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -211,  -212,    -1,    -2,    -3,    -4,    -7,    -9,   -10,   -15,
  -105,  -212,  -212,  -212,   -44,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -70,   -71,   -75,  -212,
  -212,  -212,  -212,  -212,  -115,  -117,  -212,  -212,  -162,  -212,
  -212,  -212,  -175,  -176,  -177,  -212,  -179,  -186,  -187,  -188,
  -189,  -190,  -191,  -192,  -212,  -212,    -6,  -212,  -212,  -212,
  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,
  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,
  -212,  -212,  -212,  -212,  -212,  -212,  -124,  -119,  -211,  -211,
   -27,  -212,   -34,  -212,  -212,   -72,  -212,  -212,  -212,  -212,
   -82,  -212,  -212,  -212,  -212,  -211,  -134,  -153,  -154,  -116,
  -211,  -211,  -143,  -145,  -146,  -147,  -148,  -149,   -42,  -212,
  -165,  -212,  -168,  -212,  -212,  -171,  -172,  -183,  -178,  -212,
   368,    -5,    -8,   -11,   -12,   -13,   -14,  -212,   -17,   -18,
   -19,   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -28,   -29,
   -30,   -31,   -32,   -33,   -35,   -36,   -37,   -38,   -39,  -212,
   -40,  -100,  -212,   -76,  -212,  -204,  -210,  -198,  -195,  -193,
  -113,  -125,  -187,  -128,  -191,  -212,  -201,  -199,  -207,  -189,
  -190,  -197,  -202,  -203,  -205,  -206,  -208,  -124,  -123,  -212,
  -122,  -212,   -41,  -193,   -67,   -77,  -212,   -80,  -193,  -158,
  -161,  -212,   -74,  -212,  -212,  -212,  -124,  -195,  -211,  -155,
  -212,  -212,  -212,  -212,  -151,  -212,  -212,  -212,  -163,  -212,
  -166,  -212,  -169,  -212,  -180,  -181,  -182,  -184,  -212,   -16,
  -212,  -212,  -193,  -102,  -124,  -112,  -212,  -196,  -212,  -194,
  -212,  -212,  -193,  -127,  -129,  -198,  -199,  -200,  -201,  -204,
  -207,  -209,  -210,  -120,  -121,  -194,  -212,   -69,  -212,   -79,
  -212,  -194,  -212,   -73,  -212,   -85,  -212,   -91,  -212,  -212,
   -95,  -195,  -193,  -212,  -212,  -137,  -212,  -156,  -193,  -211,
  -212,  -144,  -152,  -150,   -43,  -164,  -167,  -174,  -170,  -173,
  -185,  -104,  -212,  -194,  -193,  -108,  -114,  -109,  -126,  -130,
  -131,  -212,   -66,   -78,   -81,  -159,  -160,   -85,   -84,  -212,
  -212,   -91,   -90,  -212,  -212,   -99,   -94,   -96,  -212,  -212,
  -110,  -211,  -138,  -139,  -140,  -212,  -212,  -135,  -136,  -212,
  -142,  -101,  -103,  -111,  -118,   -68,   -83,   -86,  -212,   -89,
  -212,  -212,  -106,  -107,  -212,  -157,  -132,  -141,  -212,   -88,
  -212,   -93,  -212,   -98,  -133,   -87,   -92,   -97 ]

racc_goto_table = [
     2,   120,     3,   100,   102,   103,   105,   138,   126,   171,
   136,   124,   179,   208,   322,   246,   218,   178,   318,   336,
   242,   221,   143,   144,   145,   146,   248,   291,   280,   292,
   306,   109,   111,   112,   113,   217,    66,   199,   201,   129,
   131,   128,   128,   133,   244,   324,   308,   137,   279,   347,
   266,   205,   284,   332,   283,   270,   222,   170,   349,   315,
   346,   354,   147,   134,   128,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   243,   174,   302,
   198,   198,   327,   142,   203,     1,   128,   141,   211,   311,
   128,   237,   238,   236,   nil,   nil,   174,   nil,   nil,   nil,
   nil,   nil,   nil,   252,   nil,   nil,   nil,   219,   328,   nil,
   nil,   nil,   219,   224,   nil,   nil,   288,   nil,   nil,   329,
   nil,   nil,   282,   nil,   nil,   335,   nil,   281,   nil,   nil,
   nil,   120,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   126,
   nil,   343,   124,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   304,   nil,   nil,   nil,   169,   nil,   nil,   109,   111,   112,
   nil,   nil,   nil,   267,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   126,   nil,   126,   124,   nil,   124,
   300,   nil,   299,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   268,   128,   174,   nil,
   nil,   nil,   nil,   274,   276,   nil,   nil,   nil,   342,   294,
   285,   294,   nil,   297,   nil,   133,   nil,   nil,   nil,   nil,
   137,   nil,   294,   301,   nil,   nil,   nil,   nil,   nil,   174,
   nil,   333,   309,   310,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   294,   nil,   nil,
   nil,   nil,   nil,   nil,   316,   nil,   nil,   nil,   nil,   nil,
   nil,   128,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   345,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   339,   338,   nil,   nil,   nil,   169,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   109,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   338,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   358,   nil,
   360,   362 ]

racc_goto_check = [
     2,    62,     3,     9,     9,     9,    37,    78,    29,    49,
    74,    35,    54,    42,    45,    53,    63,    52,    44,    64,
    50,    63,     7,     7,     7,     7,    36,    70,    47,    70,
    55,     9,     9,     9,     9,    52,     5,    58,    58,    11,
    11,     9,     9,     9,    56,    48,    59,     9,    46,    43,
    36,    41,    66,    67,    53,    36,    69,    12,    45,    72,
    44,    64,    11,    73,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,    49,     9,    36,
     9,     9,    47,     6,    11,     1,     9,     5,    11,    36,
     9,    79,    80,    82,   nil,   nil,     9,   nil,   nil,   nil,
   nil,   nil,   nil,    54,   nil,   nil,   nil,     3,    53,   nil,
   nil,   nil,     3,     3,   nil,   nil,    42,   nil,   nil,    36,
   nil,   nil,    54,   nil,   nil,    36,   nil,    52,   nil,   nil,
   nil,    62,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,
   nil,    36,    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    54,   nil,   nil,   nil,     9,   nil,   nil,     9,     9,     9,
   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    29,   nil,    29,    35,   nil,    35,
    78,   nil,    74,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,     9,     9,   nil,
   nil,   nil,   nil,     2,     2,   nil,   nil,   nil,    49,     9,
     3,     9,   nil,     9,   nil,     9,   nil,   nil,   nil,   nil,
     9,   nil,     9,     9,   nil,   nil,   nil,   nil,   nil,     9,
   nil,    62,     9,     9,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,     3,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
     2,     2 ]

racc_goto_pointer = [
   nil,    95,     0,     2,   nil,    32,    26,   -46,   nil,    -8,
   nil,   -10,   -37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -39,
   nil,   nil,   nil,   nil,   nil,   -36,  -153,   -31,   nil,   nil,
   nil,   -55,   -94,  -270,  -257,  -263,  -167,  -187,  -233,   -85,
  -152,   nil,   -79,  -163,   -84,  -217,  -130,   nil,   -61,  -203,
   nil,   nil,   -45,   -99,  -270,   nil,  -166,  -233,   nil,   -65,
  -196,   nil,  -212,    12,   -41,   nil,   nil,   nil,   -48,   -38,
   -37,   nil,   -36 ]

racc_goto_default = [
   nil,   nil,   337,   200,     4,     5,     6,     7,     8,    10,
     9,   278,   nil,    14,    36,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,   nil,   nil,    37,    38,
   106,   nil,   nil,   110,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    42,   nil,   nil,   nil,   180,   nil,    97,   nil,   181,
   185,   183,   116,   nil,   nil,   115,   nil,   nil,   121,   nil,
   122,   123,   209,   nil,   nil,    52,    53,    55,   nil,   nil,
   nil,   139,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 82, :_reduce_1,
  1, 82, :_reduce_none,
  1, 83, :_reduce_3,
  1, 85, :_reduce_4,
  3, 85, :_reduce_5,
  2, 85, :_reduce_6,
  1, 86, :_reduce_7,
  3, 86, :_reduce_8,
  1, 87, :_reduce_none,
  1, 88, :_reduce_10,
  3, 88, :_reduce_11,
  3, 88, :_reduce_12,
  3, 88, :_reduce_13,
  3, 88, :_reduce_14,
  1, 90, :_reduce_none,
  4, 90, :_reduce_16,
  3, 90, :_reduce_17,
  3, 90, :_reduce_18,
  3, 90, :_reduce_19,
  3, 90, :_reduce_20,
  3, 90, :_reduce_21,
  3, 90, :_reduce_22,
  3, 90, :_reduce_23,
  3, 90, :_reduce_24,
  3, 90, :_reduce_25,
  3, 90, :_reduce_26,
  2, 90, :_reduce_27,
  3, 90, :_reduce_28,
  3, 90, :_reduce_29,
  3, 90, :_reduce_30,
  3, 90, :_reduce_31,
  3, 90, :_reduce_32,
  3, 90, :_reduce_33,
  2, 90, :_reduce_34,
  3, 90, :_reduce_35,
  3, 90, :_reduce_36,
  3, 90, :_reduce_37,
  3, 90, :_reduce_38,
  3, 90, :_reduce_39,
  3, 90, :_reduce_40,
  3, 90, :_reduce_41,
  1, 92, :_reduce_42,
  3, 92, :_reduce_43,
  1, 91, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 111, :_reduce_64,
  1, 111, :_reduce_65,
  5, 94, :_reduce_66,
  3, 94, :_reduce_67,
  6, 94, :_reduce_68,
  4, 94, :_reduce_69,
  1, 94, :_reduce_70,
  1, 98, :_reduce_71,
  2, 98, :_reduce_72,
  4, 119, :_reduce_73,
  3, 119, :_reduce_74,
  1, 119, :_reduce_75,
  3, 120, :_reduce_76,
  2, 118, :_reduce_77,
  3, 122, :_reduce_78,
  2, 122, :_reduce_79,
  2, 121, :_reduce_80,
  4, 121, :_reduce_81,
  2, 101, :_reduce_82,
  5, 124, :_reduce_83,
  4, 124, :_reduce_84,
  0, 125, :_reduce_none,
  2, 125, :_reduce_86,
  4, 125, :_reduce_87,
  3, 125, :_reduce_88,
  6, 102, :_reduce_89,
  5, 102, :_reduce_90,
  0, 126, :_reduce_none,
  4, 126, :_reduce_92,
  3, 126, :_reduce_93,
  5, 100, :_reduce_94,
  1, 127, :_reduce_95,
  2, 127, :_reduce_96,
  5, 128, :_reduce_97,
  4, 128, :_reduce_98,
  1, 129, :_reduce_99,
  1, 93, :_reduce_none,
  4, 93, :_reduce_101,
  1, 131, :_reduce_102,
  3, 131, :_reduce_103,
  3, 130, :_reduce_104,
  1, 89, :_reduce_105,
  6, 89, :_reduce_106,
  6, 89, :_reduce_107,
  5, 89, :_reduce_108,
  5, 89, :_reduce_109,
  5, 89, :_reduce_110,
  4, 136, :_reduce_111,
  1, 137, :_reduce_112,
  1, 133, :_reduce_113,
  3, 133, :_reduce_114,
  1, 132, :_reduce_115,
  2, 132, :_reduce_116,
  1, 132, :_reduce_117,
  6, 99, :_reduce_118,
  2, 99, :_reduce_119,
  3, 138, :_reduce_120,
  3, 138, :_reduce_121,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  0, 135, :_reduce_124,
  1, 135, :_reduce_125,
  3, 135, :_reduce_126,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 140, :_reduce_130,
  3, 140, :_reduce_131,
  6, 103, :_reduce_132,
  7, 104, :_reduce_133,
  1, 146, :_reduce_134,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  1, 147, :_reduce_none,
  2, 147, :_reduce_138,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  6, 105, :_reduce_141,
  5, 105, :_reduce_142,
  1, 149, :_reduce_143,
  3, 149, :_reduce_144,
  1, 151, :_reduce_145,
  1, 151, :_reduce_146,
  1, 151, :_reduce_147,
  1, 151, :_reduce_none,
  1, 152, :_reduce_149,
  3, 152, :_reduce_150,
  1, 150, :_reduce_none,
  2, 150, :_reduce_152,
  1, 143, :_reduce_153,
  1, 143, :_reduce_154,
  1, 144, :_reduce_155,
  2, 144, :_reduce_156,
  4, 144, :_reduce_157,
  1, 123, :_reduce_158,
  3, 123, :_reduce_159,
  3, 153, :_reduce_160,
  1, 153, :_reduce_161,
  1, 97, :_reduce_162,
  3, 106, :_reduce_163,
  4, 106, :_reduce_164,
  2, 106, :_reduce_165,
  3, 106, :_reduce_166,
  4, 106, :_reduce_167,
  2, 106, :_reduce_168,
  3, 109, :_reduce_169,
  4, 109, :_reduce_170,
  2, 109, :_reduce_171,
  1, 154, :_reduce_172,
  3, 154, :_reduce_173,
  3, 155, :_reduce_174,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 156, :_reduce_177,
  2, 157, :_reduce_178,
  1, 158, :_reduce_179,
  1, 160, :_reduce_180,
  1, 161, :_reduce_181,
  2, 159, :_reduce_182,
  1, 162, :_reduce_183,
  1, 163, :_reduce_184,
  2, 163, :_reduce_185,
  1, 112, :_reduce_186,
  1, 115, :_reduce_187,
  1, 113, :_reduce_188,
  1, 114, :_reduce_189,
  1, 108, :_reduce_190,
  1, 107, :_reduce_191,
  1, 110, :_reduce_192,
  0, 117, :_reduce_none,
  1, 117, :_reduce_194,
  0, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 84, :_reduce_211 ]

racc_reduce_n = 212

racc_shift_n = 368

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :DELETES => 17,
  :LESSEQUAL => 18,
  :NOTEQUAL => 19,
  :DOT => 20,
  :COLON => 21,
  :LLCOLLECT => 22,
  :RRCOLLECT => 23,
  :QMARK => 24,
  :LPAREN => 25,
  :RPAREN => 26,
  :ISEQUAL => 27,
  :GREATEREQUAL => 28,
  :GREATERTHAN => 29,
  :LESSTHAN => 30,
  :IF => 31,
  :ELSE => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :ATAT => 45,
  :LCOLLECT => 46,
  :RCOLLECT => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68,
  :UNLESS => 69,
  :PIPE => 70,
  :LAMBDA => 71,
  :SELBRACE => 72,
  :NUMBER => 73,
  :LOW => 74,
  :HIGH => 75,
  :CALL => 76,
  :LISTSTART => 77,
  :MODULO => 78,
  :TITLE_COLON => 79,
  :CASE_COLON => 80 }

racc_nt_base = 81

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 59)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 64)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_5(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_6(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 77)
  def _reduce_8(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 87)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_16(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_17(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_18(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_19(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_20(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_21(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_22(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_23(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_24(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_25(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_26(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_27(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_28(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_29(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_30(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_31(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_32(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_33(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_34(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_35(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_36(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_37(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_38(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_39(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_40(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_41(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_42(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_43(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'egrammar.ra', 159)
  def _reduce_64(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 160)
  def _reduce_65(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 168)
  def _reduce_66(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_67(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 176)
  def _reduce_68(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_70(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_71(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 191)
  def _reduce_72(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_73(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_74(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_75(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_76(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_77(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_78(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_79(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 223)
  def _reduce_80(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_81(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_82(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 241)
  def _reduce_83(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 245)
  def _reduce_84(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_86(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_87(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_88(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_89(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_90(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'egrammar.ra', 284)
  def _reduce_92(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_93(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_94(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_95(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_96(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_97(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_98(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_99(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_101(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_102(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 333)
  def _reduce_103(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 338)
  def _reduce_104(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_105(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 353)
  def _reduce_106(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 368)
  def _reduce_107(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 376)
  def _reduce_108(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_109(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        error val[1], "All resource specifications require names"
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 404)
  def _reduce_110(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 409)
  def _reduce_111(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_112(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_113(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 415)
  def _reduce_114(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 420)
  def _reduce_115(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 421)
  def _reduce_116(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 422)
  def _reduce_117(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_118(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_119(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_120(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_121(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_124(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 458)
  def _reduce_125(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 459)
  def _reduce_126(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'egrammar.ra', 475)
  def _reduce_130(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_131(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 489)
  def _reduce_132(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 503)
  def _reduce_133(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 513)
  def _reduce_134(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'egrammar.ra', 522)
  def _reduce_138(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'egrammar.ra', 539)
  def _reduce_141(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 543)
  def _reduce_142(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 553)
  def _reduce_143(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 554)
  def _reduce_144(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 559)
  def _reduce_145(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 560)
  def _reduce_146(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 561)
  def _reduce_147(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 148 omitted

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_149(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_150(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_152(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_153(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_154(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_155(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_156(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_158(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_159(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 593)
  def _reduce_160(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 594)
  def _reduce_161(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_162(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_163(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_164(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_165(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_166(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_167(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_168(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_169(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_170(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_171(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_172(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_173(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_174(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 175 omitted

# reduce 176 omitted

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_177(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_178(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_179(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_180(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_181(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_182(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_183(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_184(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_185(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_186(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_187(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_188(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_189(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_190(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_191(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_192(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 193 omitted

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_194(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_211(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
