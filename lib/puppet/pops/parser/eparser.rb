#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 744)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'57,59,-223,-130,51,262,53,-214,79,-132,272,126,262,126,79,125,310,125',
'360,295,224,350,102,14,106,224,101,235,102,41,106,48,101,50,45,293,49',
'69,65,238,43,68,46,47,-223,-130,66,13,105,-214,67,-132,273,12,105,258',
'57,59,250,249,51,70,53,391,240,224,247,42,79,248,80,64,60,122,62,63',
'61,126,243,14,52,125,102,242,106,41,101,48,235,50,45,126,49,69,65,125',
'43,68,46,47,221,126,66,13,325,125,67,245,105,12,57,59,244,261,51,126',
'53,70,262,125,345,241,344,42,79,316,231,64,60,328,62,63,345,14,344,313',
'52,330,102,41,106,48,101,50,45,220,49,69,65,72,43,68,46,47,126,332,66',
'13,125,312,67,57,59,12,105,309,57,59,269,271,51,70,53,389,86,85,74,42',
'79,81,82,64,60,337,62,63,80,338,339,14,52,224,102,211,106,41,101,48',
'342,50,45,87,49,69,65,294,43,68,46,47,346,348,66,13,293,187,67,269,105',
'12,271,269,57,59,356,357,51,70,53,387,114,293,74,42,154,151,149,64,60',
'367,62,63,287,57,59,14,52,57,59,368,286,41,271,48,127,50,45,285,49,69',
'65,371,43,68,46,47,114,115,66,13,271,114,67,375,348,12,57,59,377,378',
'51,135,53,70,133,135,379,380,133,42,381,111,383,64,60,384,62,63,385',
'14,269,74,52,71,70,41,392,48,70,50,108,393,49,69,65,60,43,68,394,60',
'395,,66,13,,,67,,,12,57,59,,,51,,53,70,75,77,76,78,,42,,,,64,60,,62',
'63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57',
'59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
',62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,45,',
'49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,',
',64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,',
',67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48',
',50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,',
'42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66',
'13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41',
',48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,',
',,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,',
',,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52',
',,41,,48,,50,121,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,',
'52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,79,,,64,60,,62,63,,14,,,52,,102,41,106,48,101,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,105,,57,59,,,51,70,53,291,86,85',
',42,,81,82,64,60,,62,63,80,,,14,52,57,59,,,41,,48,,50,45,87,49,69,65',
',43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,138,53,70,,135,,,133,42,,',
',64,60,,62,63,,14,,,52,,,41,,48,70,50,108,,49,69,65,,43,68,,60,,,66',
'13,57,59,67,,,12,57,59,,,51,140,53,70,,,,,,42,,,,64,60,,62,63,,14,,',
'52,,,41,,48,135,50,108,133,49,69,65,,43,68,,,,,66,13,,,67,,,12,,70,57',
'59,,,51,70,53,143,,,60,42,,,,64,60,,62,63,,,,14,52,,,,,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,79,,',
'64,60,,62,63,,14,,,52,,102,41,106,48,101,50,108,,49,69,65,,43,68,,,',
',66,13,,,67,,,12,105,,57,59,,,51,70,53,297,,,,42,,81,82,64,60,,62,63',
'80,,,14,52,,,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12',
',,57,59,,,51,70,53,143,,,,42,,,,64,60,,62,63,,,,14,52,,,,,41,,48,,50',
'45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,153,70,,,,,',
'42,79,,,64,60,,62,63,,14,,,52,,102,41,106,48,101,50,108,,49,69,65,,43',
'68,,,,,66,13,,,67,,,12,105,,57,59,,,51,70,53,366,,,,42,,,,64,60,,62',
'63,80,,,14,52,,,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67',
',,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50',
'45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42',
',,,64,60,,62,63,,14,,,52,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66',
'13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41',
',48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70',
',,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,45,,49,69,65,,43,68,46',
'47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,',
',52,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,',
',51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,45,,49,69,65',
',43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62',
'63,,14,,,52,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67',
',,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50',
'108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,',
',,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13',
',,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48',
',50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,',
'42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66',
'13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41',
',48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,',
',,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,',
',,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52',
',,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,',
'52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,',
'43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63',
',14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59',
',,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69',
'65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62',
'63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57',
'59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
',62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67',
',,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50',
'108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,',
',,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13',
',,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48',
',50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,',
'42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66',
'13,,,67,,,12,,,57,59,,,51,70,53,351,,,,42,,,186,64,60,,62,63,,,,14,52',
',,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,',
'53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,189,206,200,207,50,201,209',
'202,198,196,,191,204,,,,,66,13,210,205,203,,,12,57,59,,,51,,53,70,,',
',,208,190,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,',
'52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,',
'43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63',
',14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59',
',,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69',
'65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,79,,,64,60,',
'62,63,,14,,,52,,102,41,106,48,101,50,108,,49,69,65,,43,68,,,,,66,13',
',,67,,,12,105,,57,59,,,51,70,53,299,,,,42,,81,82,64,60,,62,63,80,,,14',
'52,,,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59',
',,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,218,,52,,,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
',62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,,62,63,,14,226,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,',
'67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48',
',50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,',
',,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,',
',66,13,,,67,,,12,57,59,,,51,319,53,70,,,,,,42,,,,64,60,,62,63,,14,,',
'52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,',
'43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63',
',14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59',
',,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,41,,48,,50,108,,49,69',
'65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,318,53,70,,,,,,42,,,,64,60',
',62,63,,14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,79,,,64,60,,62,63,,14,,,52,,102,41,106,48',
'101,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,105,,57,59,,,51,70,53',
'321,,,,42,,81,82,64,60,,62,63,80,,,14,52,,,,,41,,48,,50,108,,49,69,65',
',43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63',
',14,,,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59',
',,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,52,,,189,206,200,207,50,201',
'209,202,198,196,,191,204,,,,,66,13,210,205,203,,,12,,,,,,,,70,,,,,208',
'190,,,,64,60,79,62,63,,,,,52,,98,99,100,95,90,102,,106,,101,,,91,93',
'92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,,79,,103',
',80,246,,,,98,99,100,95,90,102,,106,,101,87,,91,93,92,94,,,,,,,,,,,',
',,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,,79,,,,80,246,,,,98,99,100',
'95,90,102,,106,,101,87,,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83',
'84,86,85,88,89,,81,82,79,,230,,,80,,,,98,99,100,95,90,102,,106,,101',
',87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81',
'82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,',
',,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,229,,,80,,,,98',
'99,100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97',
'96,,,83,84,86,85,88,89,,81,82,79,,228,,,80,,,,98,99,100,95,90,102,,106',
',101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89',
',81,82,79,,227,,,80,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94',
',,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,,79,,,,80,,,',
',98,99,100,95,90,102,,106,,101,87,216,91,93,92,94,,,,,,,,,,,,,,,,105',
',,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102',
',106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85',
'88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92',
'94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80',
',,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105',
',,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102',
',106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85',
'88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92',
'94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80',
',,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105',
',,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102',
',106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85',
'88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92',
'94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80',
',,,98,99,100,95,90,102,267,106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105',
',,,97,96,,,83,84,86,85,88,89,,81,82,79,,103,,,80,,,,98,99,100,95,90',
'102,,106,79,101,,87,91,93,92,94,,,,,,,102,,106,,101,,,,,105,,,,97,96',
',,83,84,86,85,88,89,,81,82,105,,,79,,80,,,83,84,86,85,,,,81,82,102,',
'106,87,101,80,,,,79,,,,,,,,,,,87,,,102,,106,105,101,,79,,,,,83,84,86',
'85,,,,81,82,102,,106,,101,80,105,,,,,,,,83,84,86,85,88,89,87,81,82,',
',,105,,80,,,79,,,83,84,86,85,88,89,,81,82,87,90,102,,106,80,101,,79',
'91,,,,,,,,,,,87,90,102,,106,,101,,105,91,,,,,,,83,84,86,85,88,89,,81',
'82,,,,105,,80,,,79,,,83,84,86,85,88,89,,81,82,87,90,102,,106,80,101',
',79,91,,,,,,,,,,,87,90,102,,106,,101,,105,91,,,,,,,83,84,86,85,88,89',
',81,82,,,,105,,80,,,,,79,83,84,86,85,88,89,,81,82,87,,95,90,102,80,106',
',101,,79,91,93,92,94,,,,,,87,,95,90,102,,106,,101,,105,91,93,92,94,',
',,83,84,86,85,88,89,,81,82,,,,105,,80,,,96,,,83,84,86,85,88,89,,81,82',
'87,79,,,,80,263,,,,98,99,100,95,90,102,,106,,101,87,,91,93,92,94,,,',
',,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98',
'99,100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97',
'96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102,,106',
',101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89',
',81,82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94,,',
',,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,,,,,,80,281,206',
'280,207,,278,209,282,276,275,,277,279,,87,,,,,210,205,283,281,206,280',
'207,,278,209,282,276,275,,277,279,,,208,284,,,210,205,283,281,206,280',
'207,,278,209,282,276,275,,277,279,,,208,284,,,210,205,283,,,,,,,,,,',
',,,,,208,284' ]
        racc_action_table = arr = ::Array.new(6173, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,203,196,0,225,0,204,163,198,199,309,300,108,109,309,235,108,309',
'225,151,300,163,0,163,235,163,128,109,0,109,0,109,0,0,257,0,0,0,129',
'0,0,0,0,203,196,0,0,163,204,0,198,199,0,109,151,378,378,147,147,378',
'0,378,378,129,114,142,0,107,142,163,0,0,45,0,0,0,48,137,378,0,48,107',
'137,107,378,107,378,123,378,378,200,378,378,378,200,378,378,378,378',
'114,45,378,378,260,45,378,139,107,378,5,5,139,161,5,201,5,378,161,201',
'342,131,342,378,165,241,121,378,378,264,378,378,297,5,297,237,378,268',
'165,5,165,5,165,5,5,113,5,5,5,5,5,5,5,5,121,270,5,5,121,236,5,149,149',
'5,165,233,377,377,232,274,377,5,377,377,165,165,155,5,162,165,165,5',
'5,288,5,5,165,290,292,377,5,293,162,104,162,377,162,377,296,377,377',
'165,377,377,377,224,377,377,377,377,298,299,377,377,222,102,377,303',
'162,377,304,305,375,375,306,307,375,377,375,375,218,311,73,377,71,61',
'60,377,377,324,377,377,217,202,202,375,377,49,49,327,215,375,329,375',
'46,375,375,213,375,375,375,336,375,375,375,375,337,40,375,375,193,39',
'375,345,346,375,186,186,348,349,186,202,186,375,202,49,353,354,49,375',
'355,38,361,375,375,362,375,375,365,186,192,6,375,1,202,186,382,186,49',
'186,186,386,186,186,186,202,186,186,388,49,390,,186,186,,,186,,,186',
'12,12,,,12,,12,186,8,8,8,8,,186,,,,186,186,,186,186,,12,,,186,,,12,',
'12,,12,12,,12,12,12,,12,12,,,,,12,12,,,12,,,12,13,13,,,13,,13,12,,,',
',,12,,,,12,12,,12,12,,13,,,12,,,13,,13,,13,13,,13,13,13,,13,13,,,,,13',
'13,,,13,,,13,14,14,,,14,,14,13,,,,,,13,,,,13,13,,13,13,,14,,,13,,,14',
',14,,14,14,,14,14,14,,14,14,,,,,14,14,,,14,,,14,357,357,,,357,,357,14',
',,,,,14,,,,14,14,,14,14,,357,,,14,,,357,,357,,357,357,,357,357,357,',
'357,357,357,357,,,357,357,,,357,,,357,344,344,,,344,,344,357,,,,,,357',
',,,357,357,,357,357,,344,,,357,,,344,,344,,344,344,,344,344,344,,344',
'344,,,,,344,344,,,344,,,344,189,189,,,189,,189,344,,,,,,344,,,,344,344',
',344,344,,189,,,344,,,189,,189,,189,189,,189,189,189,,189,189,,,,,189',
'189,,,189,,,189,41,41,,,41,,41,189,,,,,,189,,,,189,189,,189,189,,41',
',,189,,,41,,41,,41,41,,41,41,41,,41,41,,,,,41,41,,,41,,,41,42,42,,,42',
',42,41,,,,,,41,,,,41,41,,41,41,,42,,,41,,,42,,42,,42,42,,42,42,42,,42',
'42,,,,,42,42,,,42,,,42,43,43,,,43,,43,42,,,,,,42,,,,42,42,,42,42,,43',
',,42,,,43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,44,44,,,44',
',44,43,,,,,,43,,,,43,43,,43,43,,44,,,43,,,44,,44,,44,44,,44,44,44,,44',
'44,,,,,44,44,,,44,,,44,190,190,,,190,,190,44,,,,,,44,,,,44,44,,44,44',
',190,,,44,,,190,,190,,190,190,,190,190,190,,190,190,,,,,190,190,,,190',
',,190,191,191,,,191,,191,190,,,,,,190,,,,190,190,,190,190,,191,,,190',
',,191,,191,,191,191,,191,191,191,,191,191,,,,,191,191,,,191,,,191,328',
'328,,,328,,328,191,,,,,,191,166,,,191,191,,191,191,,328,,,191,,166,328',
'166,328,166,328,328,,328,328,328,,328,328,,,,,328,328,,,328,,,328,166',
',220,220,,,220,328,220,220,166,166,,328,,166,166,328,328,,328,328,166',
',,220,328,238,238,,,220,,220,,220,220,166,220,220,220,,220,220,220,220',
',,220,220,,,220,,,220,51,51,,,51,51,51,220,,238,,,238,220,,,,220,220',
',220,220,,51,,,220,,,51,,51,238,51,51,,51,51,51,,51,51,,238,,,51,51',
'240,240,51,,,51,52,52,,,52,52,52,51,,,,,,51,,,,51,51,,51,51,,52,,,51',
',,52,,52,240,52,52,240,52,52,52,,52,52,,,,,52,52,,,52,,,52,,240,53,53',
',,53,52,53,53,,,240,52,,,,52,52,,52,52,,,,53,52,,,,,53,,53,,53,53,,53',
'53,53,,53,53,,,,,53,53,,,53,,,53,58,58,,,58,,58,53,,,,,,53,168,,,53',
'53,,53,53,,58,,,53,,168,58,168,58,168,58,58,,58,58,58,,58,58,,,,,58',
'58,,,58,,,58,168,,227,227,,,227,58,227,227,,,,58,,168,168,58,58,,58',
'58,168,,,227,58,,,,,227,,227,,227,227,,227,227,227,,227,227,227,227',
',,227,227,,,227,,,227,,,153,153,,,153,227,153,153,,,,227,,,,227,227',
',227,227,,,,153,227,,,,,153,,153,,153,153,,153,153,153,,153,153,153',
'153,,,153,153,,,153,,,153,63,63,,,63,,63,153,,,,,,153,164,,,153,153',
',153,153,,63,,,153,,164,63,164,63,164,63,63,,63,63,63,,63,63,,,,,63',
'63,,,63,,,63,164,,313,313,,,313,63,313,313,,,,63,,,,63,63,,63,63,164',
',,313,63,,,,,313,,313,,313,313,,313,313,313,,313,313,313,313,,,313,313',
',,313,,,313,72,72,,,72,,72,313,,,,,,313,,,,313,313,,313,313,,72,,,313',
',,72,,72,,72,72,,72,72,72,,72,72,72,72,,,72,72,,,72,,,72,312,312,,,312',
',312,72,,,,,,72,,,,72,72,,72,72,,312,,,72,,,312,,312,,312,312,,312,312',
'312,,312,312,312,312,,,312,312,,,312,,,312,74,74,,,74,,74,312,,,,,,312',
',,,312,312,,312,312,,74,,,312,,,74,,74,,74,74,,74,74,74,,74,74,74,74',
',,74,74,,,74,,,74,75,75,,,75,,75,74,,,,,,74,,,,74,74,,74,74,,75,,,74',
',,75,,75,,75,75,,75,75,75,,75,75,75,75,,,75,75,,,75,,,75,76,76,,,76',
',76,75,,,,,,75,,,,75,75,,75,75,,76,,,75,,,76,,76,,76,76,,76,76,76,,76',
'76,76,76,,,76,76,,,76,,,76,77,77,,,77,,77,76,,,,,,76,,,,76,76,,76,76',
',77,,,76,,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,78',
'78,,,78,,78,77,,,,,,77,,,,77,77,,77,77,,78,,,77,,,78,,78,,78,78,,78',
'78,78,,78,78,78,78,,,78,78,,,78,,,78,79,79,,,79,,79,78,,,,,,78,,,,78',
'78,,78,78,,79,,,78,,,79,,79,,79,79,,79,79,79,,79,79,,,,,79,79,,,79,',
',79,80,80,,,80,,80,79,,,,,,79,,,,79,79,,79,79,,80,,,79,,,80,,80,,80',
'80,,80,80,80,,80,80,,,,,80,80,,,80,,,80,81,81,,,81,,81,80,,,,,,80,,',
',80,80,,80,80,,81,,,80,,,81,,81,,81,81,,81,81,81,,81,81,,,,,81,81,,',
'81,,,81,82,82,,,82,,82,81,,,,,,81,,,,81,81,,81,81,,82,,,81,,,82,,82',
',82,82,,82,82,82,,82,82,,,,,82,82,,,82,,,82,83,83,,,83,,83,82,,,,,,82',
',,,82,82,,82,82,,83,,,82,,,83,,83,,83,83,,83,83,83,,83,83,,,,,83,83',
',,83,,,83,84,84,,,84,,84,83,,,,,,83,,,,83,83,,83,83,,84,,,83,,,84,,84',
',84,84,,84,84,84,,84,84,,,,,84,84,,,84,,,84,85,85,,,85,,85,84,,,,,,84',
',,,84,84,,84,84,,85,,,84,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85',
',,85,,,85,86,86,,,86,,86,85,,,,,,85,,,,85,85,,85,85,,86,,,85,,,86,,86',
',86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,87,87,,,87,,87,86,,,,,,86',
',,,86,86,,86,86,,87,,,86,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87',
',,87,,,87,88,88,,,88,,88,87,,,,,,87,,,,87,87,,87,87,,88,,,87,,,88,,88',
',88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,89,89,,,89,,89,88,,,,,,88',
',,,88,88,,88,88,,89,,,88,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89',
',,89,,,89,90,90,,,90,,90,89,,,,,,89,,,,89,89,,89,89,,90,,,89,,,90,,90',
',90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,91,91,,,91,,91,90,,,,,,90',
',,,90,90,,90,90,,91,,,90,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91',
',,91,,,91,92,92,,,92,,92,91,,,,,,91,,,,91,91,,91,91,,92,,,91,,,92,,92',
',92,92,,92,92,92,,92,92,,,,,92,92,,,92,,,92,93,93,,,93,,93,92,,,,,,92',
',,,92,92,,92,92,,93,,,92,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93',
',,93,,,93,94,94,,,94,,94,93,,,,,,93,,,,93,93,,93,93,,94,,,93,,,94,,94',
',94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,95,95,,,95,,95,94,,,,,,94',
',,,94,94,,94,94,,95,,,94,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95',
',,95,,,95,96,96,,,96,,96,95,,,,,,95,,,,95,95,,95,95,,96,,,95,,,96,,96',
',96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,97,97,,,97,,97,96,,,,,,96',
',,,96,96,,96,96,,97,,,96,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97',
',,97,,,97,98,98,,,98,,98,97,,,,,,97,,,,97,97,,97,97,,98,,,97,,,98,,98',
',98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,99,99,,,99,,99,98,,,,,,98',
',,,98,98,,98,98,,99,,,98,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99',
',,99,,,99,100,100,,,100,,100,99,,,,,,99,,,,99,99,,99,99,,100,,,99,,',
'100,,100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,101',
'101,,,101,,101,100,,,,,,100,,,,100,100,,100,100,,101,,,100,,,101,,101',
',101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,,,301,301,,,301',
'101,301,301,,,,101,,,101,101,101,,101,101,,,,301,101,,,,,301,,301,,301',
'301,,301,301,301,,301,301,,,,,301,301,,,301,,,301,103,103,,,103,,103',
'301,,,,,,301,,,,301,301,,301,301,,103,,,301,,,103,103,103,103,103,103',
'103,103,103,103,,103,103,,,,,103,103,103,103,103,,,103,294,294,,,294',
',294,103,,,,,103,103,,,,103,103,,103,103,,294,,,103,,,294,,294,,294',
'294,,294,294,294,,294,294,,,,,294,294,,,294,,,294,105,105,,,105,,105',
'294,,,,,,294,,,,294,294,,294,294,,105,,,294,,,105,,105,,105,105,,105',
'105,105,,105,105,,,,,105,105,,,105,,,105,106,106,,,106,,106,105,,,,',
',105,,,,105,105,,105,105,,106,,,105,,,106,,106,,106,106,,106,106,106',
',106,106,,,,,106,106,,,106,,,106,287,287,,,287,,287,106,,,,,,106,,,',
'106,106,,106,106,,287,,,106,,,287,,287,,287,287,,287,287,287,,287,287',
',,,,287,287,,,287,,,287,273,273,,,273,,273,287,,,,,,287,,,,287,287,',
'287,287,,273,,,287,,,273,,273,,273,273,,273,273,273,,273,273,,,,,273',
'273,,,273,,,273,272,272,,,272,,272,273,,,,,,273,167,,,273,273,,273,273',
',272,,,273,,167,272,167,272,167,272,272,,272,272,272,,272,272,,,,,272',
'272,,,272,,,272,167,,228,228,,,228,272,228,228,,,,272,,167,167,272,272',
',272,272,167,,,228,272,,,,,228,,228,,228,228,,228,228,228,,228,228,228',
'228,,,228,228,,,228,,,228,111,111,,,111,,111,228,,,,,,228,,,,228,228',
',228,228,,111,111,,228,,,111,,111,,111,111,,111,111,111,,111,111,,,',
',111,111,,,111,,,111,269,269,,,269,,269,111,,,,,,111,,,,111,111,,111',
'111,,269,,,111,,,269,,269,,269,269,,269,269,269,,269,269,,,,,269,269',
',,269,,,269,263,263,,,263,,263,269,,,,,,269,,,,269,269,,269,269,,263',
',,269,,,263,,263,,263,263,,263,263,263,,263,263,,,,,263,263,,,263,,',
'263,115,115,,,115,,115,263,,,,,,263,,,,263,263,,263,263,,115,115,,263',
',,115,,115,,115,115,,115,115,115,,115,115,,,,,115,115,,,115,,,115,150',
'150,,,150,,150,115,,,,,,115,,,,115,115,,115,115,,150,,,115,,,150,,150',
',150,150,,150,150,150,,150,150,150,150,,,150,150,,,150,,,150,229,229',
',,229,,229,150,,,,,,150,,,,150,150,,150,150,,229,,,150,,,229,,229,,229',
'229,,229,229,229,,229,229,,,,,229,229,,,229,,,229,244,244,,,244,244',
'244,229,,,,,,229,,,,229,229,,229,229,,244,,,229,,,244,,244,,244,244',
',244,244,244,,244,244,,,,,244,244,,,244,,,244,231,231,,,231,,231,244',
',,,,,244,,,,244,244,,244,244,,231,,,244,,,231,,231,,231,231,,231,231',
'231,,231,231,,,,,231,231,,,231,,,231,262,262,,,262,,262,231,,,,,,231',
',,,231,231,,231,231,,262,,,231,,,262,,262,,262,262,,262,262,262,,262',
'262,,,,,262,262,,,262,,,262,122,122,,,122,,122,262,,,,,,262,,,,262,262',
',262,262,,122,,,262,,,122,,122,,122,122,,122,122,122,,122,122,,,,,122',
'122,,,122,,,122,242,242,,,242,242,242,122,,,,,,122,,,,122,122,,122,122',
',242,,,122,,,242,,242,,242,242,,242,242,242,,242,242,,,,,242,242,,,242',
',,242,253,253,,,253,,253,242,,,,,,242,169,,,242,242,,242,242,,253,,',
'242,,169,253,169,253,169,253,253,,253,253,253,,253,253,,,,,253,253,',
',253,,,253,169,,248,248,,,248,253,248,248,,,,253,,169,169,253,253,,253',
'253,169,,,248,253,,,,,248,,248,,248,248,,248,248,248,,248,248,,,,,248',
'248,,,248,,,248,246,246,,,246,,246,248,,,,,,248,,,,248,248,,248,248',
',246,,,248,,,246,,246,,246,246,,246,246,246,,246,246,,,,,246,246,,,246',
',,246,230,230,,,230,,230,246,,,,,,246,,,,246,246,,246,246,,230,,,246',
',,230,230,230,230,230,230,230,230,230,230,,230,230,,,,,230,230,230,230',
'230,,,230,,,,,,,,230,,,,,230,230,,,,230,230,136,230,230,,,,,230,,136',
'136,136,136,136,136,,136,,136,,,136,136,136,136,,,,,,,,,,,,,,,,136,',
',,136,136,,,136,136,136,136,136,136,,136,136,,259,,259,,136,259,,,,259',
'259,259,259,259,259,,259,,259,136,,259,259,259,259,,,,,,,,,,,,,,,,259',
',,,259,259,,,259,259,259,259,259,259,,259,259,,141,,,,259,141,,,,141',
'141,141,141,141,141,,141,,141,259,,141,141,141,141,,,,,,,,,,,,,,,,141',
',,,141,141,,,141,141,141,141,141,141,,141,141,120,,120,,,141,,,,120',
'120,120,120,120,120,,120,,120,,141,120,120,120,120,,,,,,,,,,,,,,,,120',
',,,120,120,,,120,120,120,120,120,120,,120,120,145,,,,,120,,,,145,145',
'145,145,145,145,,145,,145,,120,145,145,145,145,,,,,,,,,,,,,,,,145,,',
',145,145,,,145,145,145,145,145,145,,145,145,119,,119,,,145,,,,119,119',
'119,119,119,119,,119,,119,,145,119,119,119,119,,,,,,,,,,,,,,,,119,,',
',119,119,,,119,119,119,119,119,119,,119,119,118,,118,,,119,,,,118,118',
'118,118,118,118,,118,,118,,119,118,118,118,118,,,,,,,,,,,,,,,,118,,',
',118,118,,,118,118,118,118,118,118,,118,118,116,,116,,,118,,,,116,116',
'116,116,116,116,,116,,116,,118,116,116,116,116,,,,,,,,,,,,,,,,116,,',
',116,116,,,116,116,116,116,116,116,,116,116,,110,,,,116,,,,,110,110',
'110,110,110,110,,110,,110,116,110,110,110,110,110,,,,,,,,,,,,,,,,110',
',,,110,110,,,110,110,110,110,110,110,,110,110,152,,,,,110,,,,152,152',
'152,152,152,152,,152,,152,,110,152,152,152,152,,,,,,,,,,,,,,,,152,,',
',152,152,,,152,152,152,152,152,152,,152,152,317,,,,,152,,,,317,317,317',
'317,317,317,,317,,317,,152,317,317,317,317,,,,,,,,,,,,,,,,317,,,,317',
'317,,,317,317,317,317,317,317,,317,317,320,,,,,317,,,,320,320,320,320',
'320,320,,320,,320,,317,320,320,320,320,,,,,,,,,,,,,,,,320,,,,320,320',
',,320,320,320,320,320,320,,320,320,326,,,,,320,,,,326,326,326,326,326',
'326,,326,,326,,320,326,326,326,326,,,,,,,,,,,,,,,,326,,,,326,326,,,326',
'326,326,326,326,326,,326,326,212,,,,,326,,,,212,212,212,212,212,212',
',212,,212,,326,212,212,212,212,,,,,,,,,,,,,,,,212,,,,212,212,,,212,212',
'212,212,212,212,,212,212,334,,,,,212,,,,334,334,334,334,334,334,,334',
',334,,212,334,334,334,334,,,,,,,,,,,,,,,,334,,,,334,334,,,334,334,334',
'334,334,334,,334,334,335,,,,,334,,,,335,335,335,335,335,335,,335,,335',
',334,335,335,335,335,,,,,,,,,,,,,,,,335,,,,335,335,,,335,335,335,335',
'335,335,,335,335,341,,,,,335,,,,341,341,341,341,341,341,,341,,341,,335',
'341,341,341,341,,,,,,,,,,,,,,,,341,,,,341,341,,,341,341,341,341,341',
'341,,341,341,188,,,,,341,,,,188,188,188,188,188,188,188,188,,188,,341',
'188,188,188,188,,,,,,,,,,,,,,,,188,,,,188,188,,,188,188,188,188,188',
'188,,188,188,11,,11,,,188,,,,11,11,11,11,11,11,,11,170,11,,188,11,11',
'11,11,,,,,,,170,,170,,170,,,,,11,,,,11,11,,,11,11,11,11,11,11,,11,11',
'170,,,171,,11,,,170,170,170,170,,,,170,170,171,,171,11,171,170,,,,172',
',,,,,,,,,,170,,,172,,172,171,172,,173,,,,,171,171,171,171,,,,171,171',
'173,,173,,173,171,172,,,,,,,,172,172,172,172,172,172,171,172,172,,,',
'173,,172,,,174,,,173,173,173,173,173,173,,173,173,172,174,174,,174,173',
'174,,175,174,,,,,,,,,,,173,175,175,,175,,175,,174,175,,,,,,,174,174',
'174,174,174,174,,174,174,,,,175,,174,,,176,,,175,175,175,175,175,175',
',175,175,174,176,176,,176,175,176,,177,176,,,,,,,,,,,175,177,177,,177',
',177,,176,177,,,,,,,176,176,176,176,176,176,,176,176,,,,177,,176,,,',
',178,177,177,177,177,177,177,,177,177,176,,178,178,178,177,178,,178',
',179,178,178,178,178,,,,,,177,,179,179,179,,179,,179,,178,179,179,179',
'179,,,,178,178,178,178,178,178,,178,178,,,,179,,178,,,179,,,179,179',
'179,179,179,179,,179,179,178,183,,,,179,183,,,,183,183,183,183,183,183',
',183,,183,179,,183,183,183,183,,,,,,,,,,,,,,,,183,,,,183,183,,,183,183',
'183,183,183,183,,183,183,181,,,,,183,,,,181,181,181,181,181,181,,181',
',181,,183,181,181,181,181,,,,,,,,,,,,,,,,181,,,,181,181,,,181,181,181',
'181,181,181,,181,181,182,,,,,181,,,,182,182,182,182,182,182,,182,,182',
',181,182,182,182,182,,,,,,,,,,,,,,,,182,,,,182,182,,,182,182,182,182',
'182,182,,182,182,180,,,,,182,,,,180,180,180,180,180,180,,180,,180,,182',
'180,180,180,180,,,,,,,,,,,,,,,,180,,,,180,180,,,180,180,180,180,180',
'180,,180,180,,,,,,180,211,211,211,211,,211,211,211,211,211,,211,211',
',180,,,,,211,211,211,271,271,271,271,,271,271,271,271,271,,271,271,',
',211,211,,,271,271,271,266,266,266,266,,266,266,266,266,266,,266,266',
',,271,271,,,266,266,266,,,,,,,,,,,,,,,,266,266' ]
        racc_action_check = arr = ::Array.new(6173, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   303,   nil,   nil,   nil,   108,   289,   nil,   274,   nil,
   nil,  5492,   328,   382,   436,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   266,   201,
   242,   652,   706,   760,   814,    65,   210,   nil,    41,   245,
   nil,  1086,  1140,  1196,   nil,   nil,   nil,   nil,  1250,   nil,
   161,   165,   nil,  1416,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   234,  1526,   220,  1634,  1688,  1742,  1796,  1850,  1904,
  1958,  2012,  2066,  2120,  2174,  2228,  2282,  2336,  2390,  2444,
  2498,  2552,  2606,  2660,  2714,  2768,  2822,  2876,  2930,  2984,
  3038,  3092,   175,  3202,   185,  3310,  3364,    62,   -23,     8,
  4922,  3636,   nil,   137,    30,  3798,  4864,   nil,  4807,  4750,
  4636,   118,  4122,    63,   nil,   nil,   nil,   nil,     2,    27,
   nil,   101,   nil,   nil,   nil,   nil,  4463,    71,   nil,   100,
   nil,  4579,    57,   nil,   nil,  4693,   nil,    54,   nil,   159,
  3852,   -15,  4979,  1362,   nil,   164,   nil,   nil,   nil,   nil,
   nil,   106,   172,     2,  1426,   118,   986,  3536,  1260,  4240,
  5509,  5552,  5575,  5595,  5640,  5660,  5705,  5725,  5772,  5792,
  6021,  5907,  5964,  5850,   nil,   nil,   274,   nil,  5435,   598,
   868,   922,   259,   258,   nil,   nil,    -8,   nil,    -2,    -1,
    55,    79,   241,    -9,    -4,   nil,   nil,   nil,   nil,   nil,
   nil,  6059,  5207,   210,   nil,   227,   nil,   230,   160,   nil,
  1032,   nil,   202,   nil,   190,    -7,   nil,  1306,  3582,  3906,
  4394,  4014,   127,   128,   nil,   -10,   151,   127,  1057,   nil,
  1134,    85,  4176,   nil,  3960,   nil,  4340,   nil,  4286,   nil,
   nil,   nil,   nil,  4230,   nil,   nil,   nil,    23,   nil,  4521,
    95,   nil,  4068,  3744,   117,   nil,  6103,   nil,   128,  3690,
   146,  6081,  3526,  3472,   157,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  3418,   157,   nil,
   178,   nil,   118,   156,  3256,   nil,   189,   100,   201,   179,
     0,  3148,   nil,   176,   208,   180,   215,   217,   nil,   -25,
   nil,   219,  1580,  1472,   nil,   nil,   nil,  5036,   nil,   nil,
  5093,   nil,   nil,   nil,   169,   nil,  5150,   240,   976,   240,
   nil,   nil,   nil,   nil,  5264,  5321,   252,   196,   nil,   nil,
   nil,  5378,    88,   nil,   544,   265,   242,   nil,   270,   271,
   nil,   nil,   nil,   277,   278,   281,   nil,   490,   nil,   nil,
   nil,   266,   286,   nil,   nil,   289,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   220,   nil,   164,    54,   nil,
   nil,   nil,   297,   nil,   nil,   nil,   302,   nil,   309,   nil,
   311,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -225,  -226,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -107,  -226,  -226,  -226,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -72,   -73,
   -77,  -226,  -226,  -226,  -226,  -226,  -118,  -120,  -226,  -226,
  -165,  -226,  -226,  -226,  -178,  -179,  -180,  -181,  -226,  -183,
  -226,  -194,  -197,  -226,  -200,  -201,  -202,  -203,  -204,  -205,
  -206,  -226,  -226,    -7,  -226,  -226,  -226,  -226,  -226,  -226,
  -226,  -226,  -226,  -226,  -226,  -226,  -226,  -226,  -226,  -226,
  -226,  -226,  -226,  -226,  -226,  -226,  -226,  -226,  -226,  -226,
  -226,  -226,  -226,  -127,  -122,  -225,  -225,   -28,  -226,   -35,
  -226,  -226,   -74,  -226,  -226,  -226,  -226,   -84,  -226,  -226,
  -226,  -226,  -226,  -225,  -137,  -156,  -157,  -119,  -225,  -225,
  -146,  -148,  -149,  -150,  -151,  -152,   -43,  -226,  -168,  -226,
  -171,  -226,  -226,  -174,  -175,  -187,  -182,  -226,  -190,  -226,
  -226,  -226,  -198,  -226,   396,    -6,    -9,   -12,   -13,   -14,
   -15,  -226,   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -25,
   -26,   -27,   -29,   -30,   -31,   -32,   -33,   -34,   -36,   -37,
   -38,   -39,   -40,  -226,   -41,  -102,  -226,   -78,  -226,  -218,
  -224,  -212,  -209,  -207,  -116,  -128,  -201,  -131,  -205,  -226,
  -215,  -213,  -221,  -203,  -204,  -211,  -216,  -217,  -219,  -220,
  -222,  -127,  -126,  -226,  -125,  -226,   -42,  -207,   -69,   -79,
  -226,   -82,  -207,  -161,  -164,  -226,   -76,  -226,  -226,  -226,
  -127,  -226,  -209,  -225,  -158,  -226,  -226,  -226,  -226,  -154,
  -226,  -226,  -226,  -166,  -226,  -169,  -226,  -172,  -226,  -184,
  -185,  -186,  -188,  -226,  -191,  -192,  -193,  -207,  -195,  -107,
  -226,   -17,  -226,  -226,  -207,  -104,  -127,  -115,  -226,  -210,
  -226,  -208,  -226,  -226,  -207,  -130,  -132,  -212,  -213,  -214,
  -215,  -218,  -221,  -223,  -224,  -123,  -124,  -208,  -226,   -71,
  -226,   -81,  -226,  -208,  -226,   -75,  -226,   -87,  -226,   -93,
  -226,  -226,   -97,  -209,  -207,  -209,  -226,  -226,  -140,  -226,
  -159,  -207,  -225,  -226,  -147,  -155,  -153,   -44,  -167,  -170,
  -177,  -173,  -176,  -189,  -226,  -199,  -106,  -226,  -208,  -207,
  -110,  -117,  -111,  -129,  -133,  -134,  -226,   -68,   -80,   -83,
  -162,  -163,   -87,   -86,  -226,  -226,   -93,   -92,  -226,  -226,
  -101,   -96,   -98,  -226,  -226,  -226,  -113,  -225,  -141,  -142,
  -143,  -226,  -226,  -138,  -139,  -226,  -145,  -196,  -103,  -105,
  -114,  -121,   -70,   -85,   -88,  -226,   -91,  -226,  -226,  -108,
  -109,  -112,  -226,  -160,  -135,  -144,  -226,   -90,  -226,   -95,
  -226,  -100,  -136,   -89,   -94,   -99 ]

racc_goto_table = [
     2,   112,     4,   146,   107,   109,   110,   128,   132,   193,
   192,   134,   222,   268,   185,   347,   343,   233,   362,   314,
     1,   315,   236,   264,   302,   157,   158,   159,   160,   232,
   270,   213,   215,   116,   118,   119,   120,    73,   349,   331,
   266,   301,   333,   136,   136,   141,   374,   219,   184,   257,
   145,   307,   358,   306,   288,   152,   237,   156,   340,   292,
   322,   373,   376,   382,   254,   255,     3,   252,   253,   251,
   148,   136,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
   180,   181,   182,   183,   324,   188,   352,   212,   212,   265,
   150,   327,   nil,   136,   155,   nil,   nil,   136,   nil,   nil,
   nil,   336,   nil,   nil,   188,   137,   139,   274,   nil,   nil,
   nil,   nil,   nil,   nil,   353,   234,   355,   nil,   nil,   nil,
   234,   239,   nil,   311,   nil,   nil,   304,   303,   305,   nil,
   nil,   354,   nil,   161,   nil,   259,   nil,   nil,   361,   nil,
   256,   nil,   nil,   260,   nil,   nil,   nil,   nil,   nil,   128,
   nil,   132,   nil,   nil,   134,   nil,   370,   nil,   nil,   nil,
   nil,   nil,   329,   nil,   nil,   217,   nil,   nil,   183,   225,
   289,   116,   118,   119,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   132,   323,   132,
   134,   nil,   134,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   290,   136,   188,   188,   nil,   nil,   nil,   296,   298,   nil,
   nil,   nil,   nil,   nil,   317,   308,   317,   nil,   320,   nil,
   141,   369,   nil,   nil,   nil,   145,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   317,   326,   nil,   nil,   nil,   nil,
   nil,   188,   nil,   nil,   334,   335,   nil,   nil,   359,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   317,
   nil,   nil,   nil,   nil,   nil,   nil,   341,   nil,   nil,   nil,
   nil,   nil,   nil,   136,   nil,   nil,   nil,   nil,   nil,   372,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   365,   364,   nil,   nil,   nil,   nil,   nil,
   183,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   116,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   364,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   386,   nil,   388,   390 ]

racc_goto_check = [
     2,    39,     4,    81,    10,    10,    10,    64,    37,    56,
    54,    31,    44,    55,    51,    47,    46,    65,    66,    72,
     1,    72,    65,    52,    49,     8,     8,     8,     8,    54,
    38,    60,    60,    10,    10,    10,    10,     6,    50,    57,
    58,    48,    61,    10,    10,    10,    45,    43,    13,    44,
    10,    68,    69,    55,    38,    10,    71,     7,    74,    38,
    76,    46,    47,    66,    77,    78,     3,    82,    83,    85,
    86,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    38,    10,    49,    10,    10,    51,
    87,    38,   nil,    10,     6,   nil,   nil,    10,   nil,   nil,
   nil,    38,   nil,   nil,    10,    12,    12,    56,   nil,   nil,
   nil,   nil,   nil,   nil,    55,     4,    55,   nil,   nil,   nil,
     4,     4,   nil,    44,   nil,   nil,    56,    54,    54,   nil,
   nil,    38,   nil,    12,   nil,    10,   nil,   nil,    38,   nil,
     2,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,    64,
   nil,    37,   nil,   nil,    31,   nil,    38,   nil,   nil,   nil,
   nil,   nil,    56,   nil,   nil,    12,   nil,   nil,    10,    12,
    39,    10,    10,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    81,    37,
    31,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,    10,    10,    10,   nil,   nil,   nil,     2,     2,   nil,
   nil,   nil,   nil,   nil,    10,     4,    10,   nil,    10,   nil,
    10,    51,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,    10,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,    10,    10,   nil,   nil,    64,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,    39,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,     4,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    20,     0,    66,     2,   nil,    32,   -17,   -50,   nil,
    -8,   nil,    64,   -53,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -38,   nil,   nil,   nil,   nil,   nil,   -41,  -163,   -38,
   nil,   nil,   nil,   -66,  -102,  -298,  -281,  -284,  -188,  -205,
  -262,   -87,  -163,   nil,   -93,  -179,   -94,  -230,  -148,   nil,
   -74,  -229,   nil,   nil,   -41,  -106,  -294,   nil,  -182,  -257,
   nil,   -73,  -219,   nil,  -235,   nil,  -188,   -85,   -84,   nil,
   nil,   -55,   -80,   -79,   nil,   -78,    10,    39 ]

racc_goto_default = [
   nil,   nil,   363,   nil,   214,     5,     6,     7,     8,     9,
    11,    10,   300,   nil,    15,    38,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,   nil,   nil,
    39,    40,   113,   nil,   nil,   117,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    44,   nil,   nil,   nil,   194,   nil,   104,
   nil,   195,   199,   197,   124,   nil,   nil,   123,   nil,   nil,
   129,   nil,   130,   131,   223,   142,   144,    54,    55,    56,
    58,   nil,   nil,   nil,   147,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 87, :_reduce_1,
  1, 87, :_reduce_2,
  1, 87, :_reduce_none,
  1, 88, :_reduce_4,
  1, 91, :_reduce_5,
  3, 91, :_reduce_6,
  2, 91, :_reduce_7,
  1, 92, :_reduce_8,
  3, 92, :_reduce_9,
  1, 93, :_reduce_none,
  1, 94, :_reduce_11,
  3, 94, :_reduce_12,
  3, 94, :_reduce_13,
  3, 94, :_reduce_14,
  3, 94, :_reduce_15,
  1, 96, :_reduce_none,
  4, 96, :_reduce_17,
  3, 96, :_reduce_18,
  3, 96, :_reduce_19,
  3, 96, :_reduce_20,
  3, 96, :_reduce_21,
  3, 96, :_reduce_22,
  3, 96, :_reduce_23,
  3, 96, :_reduce_24,
  3, 96, :_reduce_25,
  3, 96, :_reduce_26,
  3, 96, :_reduce_27,
  2, 96, :_reduce_28,
  3, 96, :_reduce_29,
  3, 96, :_reduce_30,
  3, 96, :_reduce_31,
  3, 96, :_reduce_32,
  3, 96, :_reduce_33,
  3, 96, :_reduce_34,
  2, 96, :_reduce_35,
  3, 96, :_reduce_36,
  3, 96, :_reduce_37,
  3, 96, :_reduce_38,
  3, 96, :_reduce_39,
  3, 96, :_reduce_40,
  3, 96, :_reduce_41,
  3, 96, :_reduce_42,
  1, 98, :_reduce_43,
  3, 98, :_reduce_44,
  1, 97, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 118, :_reduce_66,
  1, 118, :_reduce_67,
  5, 100, :_reduce_68,
  3, 100, :_reduce_69,
  6, 100, :_reduce_70,
  4, 100, :_reduce_71,
  1, 100, :_reduce_72,
  1, 104, :_reduce_73,
  2, 104, :_reduce_74,
  4, 126, :_reduce_75,
  3, 126, :_reduce_76,
  1, 126, :_reduce_77,
  3, 127, :_reduce_78,
  2, 125, :_reduce_79,
  3, 129, :_reduce_80,
  2, 129, :_reduce_81,
  2, 128, :_reduce_82,
  4, 128, :_reduce_83,
  2, 107, :_reduce_84,
  5, 131, :_reduce_85,
  4, 131, :_reduce_86,
  0, 132, :_reduce_none,
  2, 132, :_reduce_88,
  4, 132, :_reduce_89,
  3, 132, :_reduce_90,
  6, 108, :_reduce_91,
  5, 108, :_reduce_92,
  0, 133, :_reduce_none,
  4, 133, :_reduce_94,
  3, 133, :_reduce_95,
  5, 106, :_reduce_96,
  1, 134, :_reduce_97,
  2, 134, :_reduce_98,
  5, 135, :_reduce_99,
  4, 135, :_reduce_100,
  1, 136, :_reduce_101,
  1, 99, :_reduce_none,
  4, 99, :_reduce_103,
  1, 138, :_reduce_104,
  3, 138, :_reduce_105,
  3, 137, :_reduce_106,
  1, 95, :_reduce_107,
  6, 95, :_reduce_108,
  6, 95, :_reduce_109,
  5, 95, :_reduce_110,
  5, 95, :_reduce_111,
  6, 95, :_reduce_112,
  5, 95, :_reduce_113,
  4, 143, :_reduce_114,
  1, 144, :_reduce_115,
  1, 140, :_reduce_116,
  3, 140, :_reduce_117,
  1, 139, :_reduce_118,
  2, 139, :_reduce_119,
  1, 139, :_reduce_120,
  6, 105, :_reduce_121,
  2, 105, :_reduce_122,
  3, 145, :_reduce_123,
  3, 145, :_reduce_124,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  0, 142, :_reduce_127,
  1, 142, :_reduce_128,
  3, 142, :_reduce_129,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 147, :_reduce_133,
  3, 147, :_reduce_134,
  6, 109, :_reduce_135,
  7, 110, :_reduce_136,
  1, 153, :_reduce_137,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_141,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  6, 111, :_reduce_144,
  5, 111, :_reduce_145,
  1, 156, :_reduce_146,
  3, 156, :_reduce_147,
  1, 158, :_reduce_148,
  1, 158, :_reduce_149,
  1, 158, :_reduce_150,
  1, 158, :_reduce_none,
  1, 159, :_reduce_152,
  3, 159, :_reduce_153,
  1, 157, :_reduce_none,
  2, 157, :_reduce_155,
  1, 150, :_reduce_156,
  1, 150, :_reduce_157,
  1, 151, :_reduce_158,
  2, 151, :_reduce_159,
  4, 151, :_reduce_160,
  1, 130, :_reduce_161,
  3, 130, :_reduce_162,
  3, 160, :_reduce_163,
  1, 160, :_reduce_164,
  1, 103, :_reduce_165,
  3, 113, :_reduce_166,
  4, 113, :_reduce_167,
  2, 113, :_reduce_168,
  3, 113, :_reduce_169,
  4, 113, :_reduce_170,
  2, 113, :_reduce_171,
  3, 116, :_reduce_172,
  4, 116, :_reduce_173,
  2, 116, :_reduce_174,
  1, 161, :_reduce_175,
  3, 161, :_reduce_176,
  3, 162, :_reduce_177,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 163, :_reduce_181,
  2, 164, :_reduce_182,
  1, 166, :_reduce_183,
  1, 168, :_reduce_184,
  1, 169, :_reduce_185,
  2, 167, :_reduce_186,
  1, 170, :_reduce_187,
  1, 171, :_reduce_188,
  2, 171, :_reduce_189,
  2, 165, :_reduce_190,
  2, 172, :_reduce_191,
  2, 172, :_reduce_192,
  3, 89, :_reduce_193,
  0, 173, :_reduce_194,
  2, 173, :_reduce_195,
  4, 173, :_reduce_196,
  1, 112, :_reduce_197,
  2, 112, :_reduce_198,
  4, 112, :_reduce_199,
  1, 119, :_reduce_200,
  1, 122, :_reduce_201,
  1, 120, :_reduce_202,
  1, 121, :_reduce_203,
  1, 115, :_reduce_204,
  1, 114, :_reduce_205,
  1, 117, :_reduce_206,
  0, 124, :_reduce_none,
  1, 124, :_reduce_208,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 90, :_reduce_225 ]

racc_reduce_n = 226

racc_shift_n = 396

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :DELETES => 17,
  :LESSEQUAL => 18,
  :NOTEQUAL => 19,
  :DOT => 20,
  :COLON => 21,
  :LLCOLLECT => 22,
  :RRCOLLECT => 23,
  :QMARK => 24,
  :LPAREN => 25,
  :RPAREN => 26,
  :ISEQUAL => 27,
  :GREATEREQUAL => 28,
  :GREATERTHAN => 29,
  :LESSTHAN => 30,
  :IF => 31,
  :ELSE => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :ATAT => 45,
  :LCOLLECT => 46,
  :RCOLLECT => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68,
  :UNLESS => 69,
  :PIPE => 70,
  :LAMBDA => 71,
  :SELBRACE => 72,
  :NUMBER => 73,
  :HEREDOC => 74,
  :SUBLOCATE => 75,
  :RENDER_STRING => 76,
  :RENDER_EXPR => 77,
  :EPP_START => 78,
  :LOW => 79,
  :HIGH => 80,
  :CALL => 81,
  :LISTSTART => 82,
  :MODULO => 83,
  :TITLE_COLON => 84,
  :CASE_COLON => 85 }

racc_nt_base = 86

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 64)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 65)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 77)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 78)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_29(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_30(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_31(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_32(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_33(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_34(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_35(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_36(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_37(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_38(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_39(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_40(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_41(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_42(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 133)
  def _reduce_43(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 134)
  def _reduce_44(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

module_eval(<<'.,.,', 'egrammar.ra', 166)
  def _reduce_66(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 167)
  def _reduce_67(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 175)
  def _reduce_68(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 183)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 192)
  def _reduce_72(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_73(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_74(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_75(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_76(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_78(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_79(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_80(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_81(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_82(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_83(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 241)
  def _reduce_84(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 248)
  def _reduce_85(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_86(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_88(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_89(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_90(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_91(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_92(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_94(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_95(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_96(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_97(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_98(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_99(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_100(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_101(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'egrammar.ra', 334)
  def _reduce_103(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_104(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_105(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_106(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 357)
  def _reduce_107(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 360)
  def _reduce_108(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 375)
  def _reduce_109(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 383)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 396)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_112(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 422)
  def _reduce_113(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_114(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 429)
  def _reduce_115(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_116(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_117(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_118(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_119(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 440)
  def _reduce_120(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 452)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 456)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 461)
  def _reduce_123(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_124(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 475)
  def _reduce_127(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 476)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 477)
  def _reduce_129(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'egrammar.ra', 493)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 497)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 507)
  def _reduce_135(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 521)
  def _reduce_136(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 531)
  def _reduce_137(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'egrammar.ra', 540)
  def _reduce_141(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 557)
  def _reduce_144(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 561)
  def _reduce_145(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_146(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_147(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_149(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 579)
  def _reduce_150(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_152(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_153(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_155(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_156(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_157(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_158(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_159(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 602)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_161(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_162(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_163(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_164(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_165(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_166(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_167(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_168(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_169(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_170(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_171(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_172(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_173(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_174(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_175(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_176(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_177(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_181(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_182(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_183(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_184(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_185(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_186(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_187(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_188(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_189(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_190(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_191(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_192(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_193(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_194(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_195(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_196(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_197(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_198(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_199(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_200(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_201(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_202(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_203(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_204(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_205(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_206(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 207 omitted

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_208(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_225(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
