#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 763)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'60,62,-134,279,54,242,56,-219,269,-132,-228,268,317,228,249,269,269',
'254,253,248,228,228,302,15,357,60,62,247,235,43,244,50,246,53,47,130',
'51,72,68,129,45,71,48,49,-134,280,69,14,262,-219,70,-132,-228,12,13',
'225,130,119,60,62,129,73,54,139,56,399,137,44,352,316,351,67,63,130',
'65,66,64,129,126,52,367,15,251,55,130,252,73,43,129,50,332,53,47,292',
'51,72,68,63,45,71,48,49,278,130,69,14,130,129,70,130,129,12,13,129,60',
'62,60,62,335,73,54,352,56,351,82,44,264,265,276,67,63,337,65,66,77,339',
'293,52,105,15,109,55,104,294,118,43,278,50,245,53,47,344,51,72,68,75',
'45,71,48,49,345,346,69,14,108,228,70,239,349,12,13,300,353,355,60,62',
'239,73,54,224,56,397,82,44,276,278,83,67,63,276,65,66,363,364,323,52',
'105,15,109,55,104,300,215,43,191,50,77,53,47,158,51,72,68,374,45,71',
'48,49,301,155,69,14,108,376,70,153,278,12,13,276,131,379,60,62,118,73',
'54,300,56,395,82,44,320,118,83,67,63,383,65,66,355,385,386,52,105,15',
'109,55,104,387,388,43,389,50,115,53,47,391,51,72,68,392,45,71,48,49',
'393,319,69,14,108,77,70,74,400,12,13,401,402,403,60,62,,73,54,,56,,82',
'44,,,,67,63,,65,66,,,,52,105,15,109,55,104,,,43,,50,,53,111,,51,72,68',
',45,71,78,80,79,81,69,14,108,,70,,,12,13,,,,60,62,,73,54,,56,,82,44',
',,,67,63,,65,66,,,,52,105,15,109,55,104,,,43,,50,,53,111,,51,72,68,',
'45,71,,,,,69,14,108,,70,,,12,13,,,,60,62,,73,54,,56,,82,44,,,,67,63',
',65,66,,,,52,105,15,109,55,104,,,43,,50,,53,111,,51,72,68,,45,71,,,',
',69,14,108,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52',
',15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,',
',60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111',
',51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,',
'67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47,,51,72,68,,45,71,48,49,',
',69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,',
'15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,',
'60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111',
',51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,',
'67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69',
'14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,',
'55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62',
',73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51',
'72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63',
',65,66,,,,52,,15,,55,,,,43,,50,,53,125,,51,72,68,,45,71,,,,,69,14,,',
'70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,',
',43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73',
'54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68',
',45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65',
'66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,',
',12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,193',
'210,204,211,53,205,213,206,202,200,,195,208,,,,,69,14,214,209,207,,',
'12,13,,,,60,62,,73,54,142,56,,212,194,,,,67,63,,65,66,,,,52,,15,,55',
',,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,',
'73,54,144,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51',
'72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,147,,44,,,,67',
'63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14',
',,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55',
',,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,',
'73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72',
'68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,',
'65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70',
',,12,13,,,,60,62,,73,54,,157,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43',
',50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54',
',56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,',
'45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66',
',,,52,,15,,55,,,,43,,50,,53,47,,51,72,68,,45,71,48,49,,,69,14,,,70,',
',12,13,,,,60,62,,73,54,,56,147,,44,,,,67,63,,65,66,,,,52,,15,,55,,,',
'43,,50,,53,47,,51,72,68,,45,71,48,49,,,69,14,,,70,,,12,13,,,,60,62,',
'73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47,,51,72',
'68,,45,71,48,49,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67',
'63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47,,51,72,68,,45,71,48,49,,,69',
'14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,',
'55,,,,43,,50,,53,47,,51,72,68,,45,71,48,49,,,69,14,,,70,,,12,13,,,,60',
'62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47,,51',
'72,68,,45,71,48,49,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,',
'67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47,,51,72,68,,45,71,48,49,',
',69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,',
'15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,',
'60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111',
',51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,',
'67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69',
'14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,',
'55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62',
',73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51',
'72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63',
',65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,',
'70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,',
',43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73',
'54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68',
',45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65',
'66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,',
',12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43',
',50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54',
',56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,',
'45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66',
',,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12',
'13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50',
',53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56',
',,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71',
',,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52',
',15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,',
',60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111',
',51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,',
'67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69',
'14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,',
'55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62',
',73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51',
'72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63',
',65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,',
'70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,',
',43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73',
'54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68',
',45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65',
'66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,',
',12,13,,,,60,62,,73,54,,56,373,,44,,,190,67,63,,65,66,,,,52,,15,,55',
',,,43,,50,,53,47,,51,72,68,,45,71,48,49,,,69,14,,,70,,,12,13,,,,60,62',
',73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,193,210,204,211,53',
'205,213,206,202,200,,195,208,,,,,69,14,214,209,207,,,12,13,,,,60,62',
',73,54,,56,,212,194,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47,',
'51,72,68,,45,71,48,49,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44',
',,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,',
',69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,',
'15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,',
'60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111',
',51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,306,,44',
',,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47,,51,72,68,,45,71,48,49',
',,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,304,,44,,,,67,63,,65,66,,,',
'52,,15,,55,,,,43,,50,,53,47,,51,72,68,,45,71,48,49,,,69,14,,,70,,,12',
'13,,,,60,62,,73,54,325,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,',
'50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,',
'56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45',
'71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,',
',,52,,15,222,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,',
'12,13,,,,60,62,,73,54,,56,358,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43',
',50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54',
',56,298,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47,,51,72,68',
',45,71,48,49,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63',
',65,66,,,,52,,15,230,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14',
',,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55',
',,,43,,50,,53,47,,51,72,68,,45,71,48,49,,,69,14,,,70,,,12,13,,,,60,62',
',73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51',
'72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63',
',65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,',
'70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,',
',43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73',
'54,326,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72',
'68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,',
'65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70',
',,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43',
',50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54',
',56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,',
'45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,328,,44,,,,67,63,,65',
'66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,',
',12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,60,62,52,,15,,55,,',
',43,,50,,53,111,,51,72,68,,45,71,,60,62,,69,14,,,70,,,12,13,,,139,,',
'137,73,,,,,,44,,60,62,67,63,,65,66,82,,,52,73,139,,55,137,101,102,103',
'98,93,105,63,109,,104,,,94,96,95,97,,,,73,,,139,,,137,,,,,63,108,,,',
'100,99,,,86,87,89,88,91,92,73,84,85,,,,,82,83,234,,63,,,,,101,102,103',
'98,93,105,,109,,104,,90,94,96,95,97,,,,,,,,,,,,,,,,108,,,,100,99,,,86',
'87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,,104,,,94',
'96,95,97,,,90,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85',
',,250,,,83,101,102,103,98,93,105,,109,,104,,,94,96,95,97,,,90,,,,,,',
',,,,,,108,,,,100,99,,,86,87,89,88,91,92,,84,85,,,,,82,83,233,,,,,,,101',
'102,103,98,93,105,,109,,104,,90,94,96,95,97,,,,,,,,,,,,,,,,108,,,,100',
'99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,',
'104,,,94,96,95,97,,,90,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92',
',84,85,,,,,82,83,232,,,,,,,101,102,103,98,93,105,,109,,104,,90,94,96',
'95,97,,,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,,84,85,,,,,82',
'83,106,,,250,,,,101,102,103,98,93,105,,109,,104,,90,94,96,95,97,,,,',
',,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,,84,85,,,,,82,83,231,,',
',,,,101,102,103,98,93,105,,109,,104,,90,94,96,95,97,,,,,,,,,,,,,,,,108',
',,,100,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105',
',109,,104,,220,94,96,95,97,,,90,,,,,,,,,,,,,108,,,,100,99,,,86,87,89',
'88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,,104,,,94,96,95',
'97,,,90,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,,,',
'83,101,102,103,98,93,105,,109,,104,264,265,94,96,95,97,,,90,,,,,,,,',
',,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98',
'93,105,,109,,104,,,94,96,95,97,,,90,,,,,,,,,,,,,108,,,,100,99,,,86,87',
'89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,,104,,,94,96',
'95,97,,,90,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,',
',,,83,101,102,103,98,93,105,,109,,104,,,94,96,95,97,,,90,,,,,,,,,,,',
',108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93',
'105,,109,,104,,,94,96,95,97,,,90,,,,,,,,,,,,,108,,,,100,99,,,86,87,89',
'88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,82,104,,82,94,96',
'95,97,,,90,,,,105,,109,105,104,109,,104,,108,,,,100,99,,,86,87,89,88',
'91,92,,84,85,108,,,108,,83,,,,,89,88,,89,88,84,85,,84,85,,,83,,90,83',
',,,,,,,,,,82,,,,,90,,,90,101,102,103,98,93,105,274,109,,104,,,94,96',
'95,97,,,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,,84,85,,,,,82',
'83,106,,,,,,,101,102,103,98,93,105,,109,,104,,90,94,96,95,97,,,,,,,',
',,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,270,,,83,101,102',
'103,98,93,105,,109,82,104,,,94,96,95,97,,,90,,,,105,,109,,104,,,,,108',
',,,100,99,,,86,87,89,88,91,92,,84,85,108,,,82,,83,,,86,87,89,88,,,,84',
'85,105,,109,82,104,83,,90,,,,,,,,,,105,,109,,104,,,90,,108,,,,,,,,86',
'87,89,88,,,,84,85,108,,,82,,83,,,86,87,89,88,91,92,,84,85,105,,109,',
'104,83,,90,,82,,,,,,,,,,,,,93,105,90,109,108,104,,,94,,,,86,87,89,88',
'91,92,,84,85,,,,,,83,108,,,,,,,82,86,87,89,88,91,92,,84,85,,90,,93,105',
'83,109,82,104,,,94,,,,,,,,,93,105,,109,90,104,,,94,,108,,,,,,,,86,87',
'89,88,91,92,,84,85,108,,,,,83,,,86,87,89,88,91,92,,84,85,,,,,82,83,',
'90,,,,,,101,102,103,98,93,105,,109,82,104,,90,94,96,95,97,,,,,,,105',
',109,,104,,,,,108,,,,100,99,,82,86,87,89,88,91,92,,84,85,108,,98,93',
'105,83,109,,104,,,94,96,95,97,84,85,,,,,,83,,90,,,,,,108,,,,,82,,,86',
'87,89,88,91,92,,84,85,98,93,105,,109,83,104,,,94,96,95,97,,,,,,,,,,',
',90,,,,108,,,,,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98',
'93,105,,109,,104,,,94,96,95,97,,,90,,,,,,,,,,,,,108,,,,100,99,,,86,87',
'89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,82,104,,,94',
'96,95,97,,,90,,,93,105,,109,,104,,,94,,108,,,,100,99,,,86,87,89,88,91',
'92,,84,85,108,,,82,,83,,,86,87,89,88,91,92,82,84,85,105,,109,,104,83',
',90,,,,105,,109,,104,,,,,,,,,90,,108,,,,,,,,,,,108,,,,84,85,,,,,,83',
',,,84,85,,288,210,287,211,83,285,213,289,283,282,,284,286,,,,,,,214',
'209,290,288,210,287,211,,285,213,289,283,282,,284,286,,,212,291,,,214',
'209,290,288,210,287,211,,285,213,289,283,282,,284,286,,,212,291,,,214',
'209,290,,,,,,,,,,,,,,,,212,291' ]
        racc_action_table = arr = ::Array.new(6619, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,202,203,0,133,0,208,229,200,207,165,239,155,143,307,165,151,151',
'143,118,239,229,0,307,242,242,141,125,0,133,0,141,0,0,205,0,0,0,205',
'0,0,0,0,202,203,0,0,155,208,0,200,207,0,0,118,125,42,386,386,125,0,386',
'242,386,386,242,0,304,237,304,0,0,316,0,0,0,316,47,0,316,386,146,0,204',
'146,242,386,204,386,267,386,386,217,386,386,386,242,386,386,386,386',
'197,50,386,386,47,50,386,111,47,386,386,111,153,153,5,5,271,386,5,349',
'5,349,168,386,332,332,196,386,386,275,386,386,159,277,219,386,168,5',
'168,386,168,221,222,5,281,5,135,5,5,295,5,5,5,5,5,5,5,5,297,299,5,5',
'168,300,5,132,303,5,5,226,305,306,385,385,127,5,385,117,385,385,167',
'5,310,311,168,5,5,312,5,5,313,314,245,5,167,385,167,5,167,318,107,385',
'105,385,76,385,385,74,385,385,385,331,385,385,385,385,228,64,385,385',
'167,334,385,63,336,385,385,236,48,343,383,383,344,385,383,261,383,383',
'113,385,241,41,167,385,385,352,385,385,353,355,356,385,113,383,113,385',
'113,360,361,383,362,383,40,383,383,368,383,383,383,369,383,383,383,383',
'372,240,383,383,113,6,383,1,390,383,383,394,396,398,190,190,,383,190',
',190,,166,383,,,,383,383,,383,383,,,,383,166,190,166,383,166,,,190,',
'190,,190,190,,190,190,190,,190,190,8,8,8,8,190,190,166,,190,,,190,190',
',,,12,12,,190,12,,12,,110,190,,,,190,190,,190,190,,,,190,110,12,110',
'190,110,,,12,,12,,12,12,,12,12,12,,12,12,,,,,12,12,110,,12,,,12,12,',
',,13,13,,12,13,,13,,112,12,,,,12,12,,12,12,,,,12,112,13,112,12,112,',
',13,,13,,13,13,,13,13,13,,13,13,,,,,13,13,112,,13,,,13,13,,,,14,14,',
'13,14,,14,,,13,,,,13,13,,13,13,,,,13,,14,,13,,,,14,,14,,14,14,,14,14',
'14,,14,14,,,,,14,14,,,14,,,14,14,,,,15,15,,14,15,,15,,,14,,,,14,14,',
'14,14,,,,14,,15,,14,,,,15,,15,,15,15,,15,15,15,,15,15,,,,,15,15,,,15',
',,15,15,,,,364,364,,15,364,,364,,,15,,,,15,15,,15,15,,,,15,,364,,15',
',,,364,,364,,364,364,,364,364,364,,364,364,364,364,,,364,364,,,364,',
',364,364,,,,351,351,,364,351,,351,,,364,,,,364,364,,364,364,,,,364,',
'351,,364,,,,351,,351,,351,351,,351,351,351,,351,351,,,,,351,351,,,351',
',,351,351,,,,193,193,,351,193,,193,,,351,,,,351,351,,351,351,,,,351',
',193,,351,,,,193,,193,,193,193,,193,193,193,,193,193,,,,,193,193,,,193',
',,193,193,,,,43,43,,193,43,,43,,,193,,,,193,193,,193,193,,,,193,,43',
',193,,,,43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,43,,,,44',
'44,,43,44,,44,,,43,,,,43,43,,43,43,,,,43,,44,,43,,,,44,,44,,44,44,,44',
'44,44,,44,44,,,,,44,44,,,44,,,44,44,,,,45,45,,44,45,,45,,,44,,,,44,44',
',44,44,,,,44,,45,,44,,,,45,,45,,45,45,,45,45,45,,45,45,,,,,45,45,,,45',
',,45,45,,,,46,46,,45,46,,46,,,45,,,,45,45,,45,45,,,,45,,46,,45,,,,46',
',46,,46,46,,46,46,46,,46,46,,,,,46,46,,,46,,,46,46,,,,235,235,,46,235',
',235,,,46,,,,46,46,,46,46,,,,46,,235,,46,,,,235,,235,,235,235,,235,235',
'235,,235,235,,,,,235,235,,,235,,,235,235,,,,194,194,,235,194,,194,,',
'235,,,,235,235,,235,235,,,,235,,194,,235,,,,194,,194,,194,194,,194,194',
'194,,194,194,,,,,194,194,,,194,,,194,194,,,,195,195,,194,195,,195,,',
'194,,,,194,194,,194,194,,,,194,,195,,194,,,,195,,195,,195,195,,195,195',
'195,,195,195,,,,,195,195,,,195,,,195,195,,,,234,234,,195,234,,234,,',
'195,,,,195,195,,195,195,,,,195,,234,,195,,,,234,234,234,234,234,234',
'234,234,234,234,,234,234,,,,,234,234,234,234,234,,,234,234,,,,54,54',
',234,54,54,54,,234,234,,,,234,234,,234,234,,,,234,,54,,234,,,,54,,54',
',54,54,,54,54,54,,54,54,,,,,54,54,,,54,,,54,54,,,,55,55,,54,55,55,55',
',,54,,,,54,54,,54,54,,,,54,,55,,54,,,,55,,55,,55,55,,55,55,55,,55,55',
',,,,55,55,,,55,,,55,55,,,,56,56,,55,56,,56,56,,55,,,,55,55,,55,55,,',
',55,,56,,55,,,,56,,56,,56,56,,56,56,56,,56,56,,,,,56,56,,,56,,,56,56',
',,,61,61,,56,61,,61,,,56,,,,56,56,,56,56,,,,56,,61,,56,,,,61,,61,,61',
'61,,61,61,61,,61,61,,,,,61,61,,,61,,,61,61,,,,335,335,,61,335,,335,',
',61,,,,61,61,,61,61,,,,61,,335,,61,,,,335,,335,,335,335,,335,335,335',
',335,335,,,,,335,335,,,335,,,335,335,,,,270,270,,335,270,,270,,,335',
',,,335,335,,335,335,,,,335,,270,,335,,,,270,,270,,270,270,,270,270,270',
',270,270,,,,,270,270,,,270,,,270,270,,,,66,66,,270,66,,66,,,270,,,,270',
'270,,270,270,,,,270,,66,,270,,,,66,,66,,66,66,,66,66,66,,66,66,,,,,66',
'66,,,66,,,66,66,,,,276,276,,66,276,,276,,,66,,,,66,66,,66,66,,,,66,',
'276,,66,,,,276,,276,,276,276,,276,276,276,,276,276,,,,,276,276,,,276',
',,276,276,,,,75,75,,276,75,,75,,,276,,,,276,276,,276,276,,,,276,,75',
',276,,,,75,,75,,75,75,,75,75,75,,75,75,75,75,,,75,75,,,75,,,75,75,,',
',157,157,,75,157,,157,157,,75,,,,75,75,,75,75,,,,75,,157,,75,,,,157',
',157,,157,157,,157,157,157,,157,157,157,157,,,157,157,,,157,,,157,157',
',,,77,77,,157,77,,77,,,157,,,,157,157,,157,157,,,,157,,77,,157,,,,77',
',77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,77,,,,78,78,,77',
'78,,78,,,77,,,,77,77,,77,77,,,,77,,78,,77,,,,78,,78,,78,78,,78,78,78',
',78,78,78,78,,,78,78,,,78,,,78,78,,,,79,79,,78,79,,79,,,78,,,,78,78',
',78,78,,,,78,,79,,78,,,,79,,79,,79,79,,79,79,79,,79,79,79,79,,,79,79',
',,79,,,79,79,,,,80,80,,79,80,,80,,,79,,,,79,79,,79,79,,,,79,,80,,79',
',,,80,,80,,80,80,,80,80,80,,80,80,80,80,,,80,80,,,80,,,80,80,,,,81,81',
',80,81,,81,,,80,,,,80,80,,80,80,,,,80,,81,,80,,,,81,,81,,81,81,,81,81',
'81,,81,81,81,81,,,81,81,,,81,,,81,81,,,,82,82,,81,82,,82,,,81,,,,81',
'81,,81,81,,,,81,,82,,81,,,,82,,82,,82,82,,82,82,82,,82,82,,,,,82,82',
',,82,,,82,82,,,,83,83,,82,83,,83,,,82,,,,82,82,,82,82,,,,82,,83,,82',
',,,83,,83,,83,83,,83,83,83,,83,83,,,,,83,83,,,83,,,83,83,,,,84,84,,83',
'84,,84,,,83,,,,83,83,,83,83,,,,83,,84,,83,,,,84,,84,,84,84,,84,84,84',
',84,84,,,,,84,84,,,84,,,84,84,,,,85,85,,84,85,,85,,,84,,,,84,84,,84',
'84,,,,84,,85,,84,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85,,',
'85,85,,,,86,86,,85,86,,86,,,85,,,,85,85,,85,85,,,,85,,86,,85,,,,86,',
'86,,86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,87,87,,86,87,,87',
',,86,,,,86,86,,86,86,,,,86,,87,,86,,,,87,,87,,87,87,,87,87,87,,87,87',
',,,,87,87,,,87,,,87,87,,,,88,88,,87,88,,88,,,87,,,,87,87,,87,87,,,,87',
',88,,87,,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,88,,,',
'89,89,,88,89,,89,,,88,,,,88,88,,88,88,,,,88,,89,,88,,,,89,,89,,89,89',
',89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,90,90,,89,90,,90,,,89,,,',
'89,89,,89,89,,,,89,,90,,89,,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90',
'90,,,90,,,90,90,,,,91,91,,90,91,,91,,,90,,,,90,90,,90,90,,,,90,,91,',
'90,,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91,91,,,,92,92',
',91,92,,92,,,91,,,,91,91,,91,91,,,,91,,92,,91,,,,92,,92,,92,92,,92,92',
'92,,92,92,,,,,92,92,,,92,,,92,92,,,,93,93,,92,93,,93,,,92,,,,92,92,',
'92,92,,,,92,,93,,92,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93',
',,93,93,,,,94,94,,93,94,,94,,,93,,,,93,93,,93,93,,,,93,,94,,93,,,,94',
',94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,95,95,,94,95,',
'95,,,94,,,,94,94,,94,94,,,,94,,95,,94,,,,95,,95,,95,95,,95,95,95,,95',
'95,,,,,95,95,,,95,,,95,95,,,,96,96,,95,96,,96,,,95,,,,95,95,,95,95,',
',,95,,96,,95,,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96',
',,,97,97,,96,97,,97,,,96,,,,96,96,,96,96,,,,96,,97,,96,,,,97,,97,,97',
'97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,98,98,,97,98,,98,,,97',
',,,97,97,,97,97,,,,97,,98,,97,,,,98,,98,,98,98,,98,98,98,,98,98,,,,',
'98,98,,,98,,,98,98,,,,99,99,,98,99,,99,,,98,,,,98,98,,98,98,,,,98,,99',
',98,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,100',
'100,,99,100,,100,,,99,,,,99,99,,99,99,,,,99,,100,,99,,,,100,,100,,100',
'100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,101,101,,100',
'101,,101,,,100,,,,100,100,,100,100,,,,100,,101,,100,,,,101,,101,,101',
'101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,101,,,,102,102,,101',
'102,,102,,,101,,,,101,101,,101,101,,,,101,,102,,101,,,,102,,102,,102',
'102,,102,102,102,,102,102,,,,,102,102,,,102,,,102,102,,,,103,103,,102',
'103,,103,,,102,,,,102,102,,102,102,,,,102,,103,,102,,,,103,,103,,103',
'103,,103,103,103,,103,103,,,,,103,103,,,103,,,103,103,,,,104,104,,103',
'104,,104,,,103,,,,103,103,,103,103,,,,103,,104,,103,,,,104,,104,,104',
'104,,104,104,104,,104,104,,,,,104,104,,,104,,,104,104,,,,320,320,,104',
'320,,320,320,,104,,,104,104,104,,104,104,,,,104,,320,,104,,,,320,,320',
',320,320,,320,320,320,,320,320,320,320,,,320,320,,,320,,,320,320,,,',
'106,106,,320,106,,106,,,320,,,,320,320,,320,320,,,,320,,106,,320,,,',
'106,106,106,106,106,106,106,106,106,106,,106,106,,,,,106,106,106,106',
'106,,,106,106,,,,319,319,,106,319,,319,,106,106,,,,106,106,,106,106',
',,,106,,319,,106,,,,319,,319,,319,319,,319,319,319,,319,319,319,319',
',,319,319,,,319,,,319,319,,,,108,108,,319,108,,108,,,319,,,,319,319',
',319,319,,,,319,,108,,319,,,,108,,108,,108,108,,108,108,108,,108,108',
',,,,108,108,,,108,,,108,108,,,,109,109,,108,109,,109,,,108,,,,108,108',
',108,108,,,,108,,109,,108,,,,109,,109,,109,109,,109,109,109,,109,109',
',,,,109,109,,,109,,,109,109,,,,233,233,,109,233,,233,,,109,,,,109,109',
',109,109,,,,109,,233,,109,,,,233,,233,,233,233,,233,233,233,,233,233',
',,,,233,233,,,233,,,233,233,,,,232,232,,233,232,,232,232,,233,,,,233',
'233,,233,233,,,,233,,232,,233,,,,232,,232,,232,232,,232,232,232,,232',
'232,232,232,,,232,232,,,232,,,232,232,,,,231,231,,232,231,,231,231,',
'232,,,,232,232,,232,232,,,,232,,231,,232,,,,231,,231,,231,231,,231,231',
'231,,231,231,231,231,,,231,231,,,231,,,231,231,,,,246,246,,231,246,246',
'246,,,231,,,,231,231,,231,231,,,,231,,246,,231,,,,246,,246,,246,246',
',246,246,246,,246,246,,,,,246,246,,,246,,,246,246,,,,269,269,,246,269',
',269,,,246,,,,246,246,,246,246,,,,246,,269,,246,,,,269,,269,,269,269',
',269,269,269,,269,269,,,,,269,269,,,269,,,269,269,,,,115,115,,269,115',
',115,,,269,,,,269,269,,269,269,,,,269,,115,115,269,,,,115,,115,,115',
'115,,115,115,115,,115,115,,,,,115,115,,,115,,,115,115,,,,308,308,,115',
'308,,308,308,,115,,,,115,115,,115,115,,,,115,,308,,115,,,,308,,308,',
'308,308,,308,308,308,,308,308,,,,,308,308,,,308,,,308,308,,,,224,224',
',308,224,,224,224,,308,,,,308,308,,308,308,,,,308,,224,,308,,,,224,',
'224,,224,224,,224,224,224,,224,224,224,224,,,224,224,,,224,,,224,224',
',,,119,119,,224,119,,119,,,224,,,,224,224,,224,224,,,,224,,119,119,224',
',,,119,,119,,119,119,,119,119,119,,119,119,,,,,119,119,,,119,,,119,119',
',,,154,154,,119,154,,154,,,119,,,,119,119,,119,119,,,,119,,154,,119',
',,,154,,154,,154,154,,154,154,154,,154,154,154,154,,,154,154,,,154,',
',154,154,,,,279,279,,154,279,,279,,,154,,,,154,154,,154,154,,,,154,',
'279,,154,,,,279,,279,,279,279,,279,279,279,,279,279,,,,,279,279,,,279',
',,279,279,,,,294,294,,279,294,,294,,,279,,,,279,279,,279,279,,,,279',
',294,,279,,,,294,,294,,294,294,,294,294,294,,294,294,,,,,294,294,,,294',
',,294,294,,,,257,257,,294,257,,257,,,294,,,,294,294,,294,294,,,,294',
',257,,294,,,,257,,257,,257,257,,257,257,257,,257,257,,,,,257,257,,,257',
',,257,257,,,,248,248,,257,248,248,248,,,257,,,,257,257,,257,257,,,,257',
',248,,257,,,,248,,248,,248,248,,248,248,248,,248,248,,,,,248,248,,,248',
',,248,248,,,,126,126,,248,126,,126,,,248,,,,248,248,,248,248,,,,248',
',126,,248,,,,126,,126,,126,126,,126,126,126,,126,126,,,,,126,126,,,126',
',,126,126,,,,250,250,,126,250,,250,,,126,,,,126,126,,126,126,,,,126',
',250,,126,,,,250,,250,,250,250,,250,250,250,,250,250,,,,,250,250,,,250',
',,250,250,,,,301,301,,250,301,,301,,,250,,,,250,250,,250,250,,,,250',
',301,,250,,,,301,,301,,301,301,,301,301,301,,301,301,,,,,301,301,,,301',
',,301,301,,,,252,252,,301,252,,252,252,,301,,,,301,301,,301,301,,,,301',
',252,,301,,,,252,,252,,252,252,,252,252,252,,252,252,,,,,252,252,,,252',
',,252,252,,,,280,280,,252,280,,280,,,252,,,,252,252,,252,252,,244,244',
'252,,280,,252,,,,280,,280,,280,280,,280,280,280,,280,280,,51,51,,280',
'280,,,280,,,280,280,,,244,,,244,280,,,,,,280,,206,206,280,280,,280,280',
'140,,,280,244,51,,280,51,140,140,140,140,140,140,244,140,,140,,,140',
'140,140,140,,,,51,,,206,,,206,,,,,51,140,,,,140,140,,,140,140,140,140',
'140,140,206,140,140,,,,,124,140,124,,206,,,,,124,124,124,124,124,124',
',124,,124,,140,124,124,124,124,,,,,,,,,,,,,,,,124,,,,124,124,,,124,124',
'124,124,124,124,216,124,124,,,,,,124,216,216,216,216,216,216,,216,,216',
',,216,216,216,216,,,124,,,,,,,,,,,,,216,,,,216,216,,,216,216,216,216',
'216,216,145,216,216,,,145,,,216,145,145,145,145,145,145,,145,,145,,',
'145,145,145,145,,,216,,,,,,,,,,,,,145,,,,145,145,,,145,145,145,145,145',
'145,,145,145,,,,,123,145,123,,,,,,,123,123,123,123,123,123,,123,,123',
',145,123,123,123,123,,,,,,,,,,,,,,,,123,,,,123,123,,,123,123,123,123',
'123,123,149,123,123,,,,,,123,149,149,149,149,149,149,,149,,149,,,149',
'149,149,149,,,123,,,,,,,,,,,,,149,,,,149,149,,,149,149,149,149,149,149',
',149,149,,,,,122,149,122,,,,,,,122,122,122,122,122,122,,122,,122,,149',
'122,122,122,122,,,,,,,,,,,,,,,,122,,,,122,122,,,122,122,122,122,122',
'122,,122,122,,,,,266,122,266,,,266,,,,266,266,266,266,266,266,,266,',
'266,,122,266,266,266,266,,,,,,,,,,,,,,,,266,,,,266,266,,,266,266,266',
'266,266,266,,266,266,,,,,120,266,120,,,,,,,120,120,120,120,120,120,',
'120,,120,,266,120,120,120,120,,,,,,,,,,,,,,,,120,,,,120,120,,,120,120',
'120,120,120,120,114,120,120,,,,,,120,114,114,114,114,114,114,,114,,114',
',114,114,114,114,114,,,120,,,,,,,,,,,,,114,,,,114,114,,,114,114,114',
'114,114,114,156,114,114,,,,,,114,156,156,156,156,156,156,,156,,156,',
',156,156,156,156,,,114,,,,,,,,,,,,,156,,,,156,156,,,156,156,156,156',
'156,156,324,156,156,,,,,,156,324,324,324,324,324,324,,324,,324,156,156',
'324,324,324,324,,,156,,,,,,,,,,,,,324,,,,324,324,,,324,324,324,324,324',
'324,327,324,324,,,,,,324,327,327,327,327,327,327,,327,,327,,,327,327',
'327,327,,,324,,,,,,,,,,,,,327,,,,327,327,,,327,327,327,327,327,327,333',
'327,327,,,,,,327,333,333,333,333,333,333,,333,,333,,,333,333,333,333',
',,327,,,,,,,,,,,,,333,,,,333,333,,,333,333,333,333,333,333,341,333,333',
',,,,,333,341,341,341,341,341,341,,341,,341,,,341,341,341,341,,,333,',
',,,,,,,,,,,341,,,,341,341,,,341,341,341,341,341,341,342,341,341,,,,',
',341,342,342,342,342,342,342,,342,,342,,,342,342,342,342,,,341,,,,,',
',,,,,,,342,,,,342,342,,,342,342,342,342,342,342,348,342,342,,,,,,342',
'348,348,348,348,348,348,,348,169,348,,170,348,348,348,348,,,342,,,,169',
',169,170,169,170,,170,,348,,,,348,348,,,348,348,348,348,348,348,,348',
'348,169,,,170,,348,,,,,169,169,,170,170,169,169,,170,170,,,169,,348',
'170,,,,,,,,,,,192,,,,,169,,,170,192,192,192,192,192,192,192,192,,192',
',,192,192,192,192,,,,,,,,,,,,,,,,192,,,,192,192,,,192,192,192,192,192',
'192,,192,192,,,,,11,192,11,,,,,,,11,11,11,11,11,11,,11,,11,,192,11,11',
'11,11,,,,,,,,,,,,,,,,11,,,,11,11,,,11,11,11,11,11,11,187,11,11,,,187',
',,11,187,187,187,187,187,187,,187,174,187,,,187,187,187,187,,,11,,,',
'174,,174,,174,,,,,187,,,,187,187,,,187,187,187,187,187,187,,187,187',
'174,,,175,,187,,,174,174,174,174,,,,174,174,175,,175,176,175,174,,187',
',,,,,,,,,176,,176,,176,,,174,,175,,,,,,,,175,175,175,175,,,,175,175',
'176,,,177,,175,,,176,176,176,176,176,176,,176,176,177,,177,,177,176',
',175,,178,,,,,,,,,,,,,178,178,176,178,177,178,,,178,,,,177,177,177,177',
'177,177,,177,177,,,,,,177,178,,,,,,,179,178,178,178,178,178,178,,178',
'178,,177,,179,179,178,179,180,179,,,179,,,,,,,,,180,180,,180,178,180',
',,180,,179,,,,,,,,179,179,179,179,179,179,,179,179,180,,,,,179,,,180',
'180,180,180,180,180,,180,180,,,,,186,180,,179,,,,,,186,186,186,186,186',
'186,,186,171,186,,180,186,186,186,186,,,,,,,171,,171,,171,,,,,186,,',
',186,186,,182,186,186,186,186,186,186,,186,186,171,,182,182,182,186',
'182,,182,,,182,182,182,182,171,171,,,,,,171,,186,,,,,,182,,,,,183,,',
'182,182,182,182,182,182,,182,182,183,183,183,,183,182,183,,,183,183',
'183,183,,,,,,,,,,,,182,,,,183,,,,,183,,,183,183,183,183,183,183,184',
'183,183,,,,,,183,184,184,184,184,184,184,,184,,184,,,184,184,184,184',
',,183,,,,,,,,,,,,,184,,,,184,184,,,184,184,184,184,184,184,185,184,184',
',,,,,184,185,185,185,185,185,185,,185,181,185,,,185,185,185,185,,,184',
',,181,181,,181,,181,,,181,,185,,,,185,185,,,185,185,185,185,185,185',
',185,185,181,,,172,,185,,,181,181,181,181,181,181,173,181,181,172,,172',
',172,181,,185,,,,173,,173,,173,,,,,,,,,181,,172,,,,,,,,,,,173,,,,172',
'172,,,,,,172,,,,173,173,,273,273,273,273,173,273,273,273,273,273,,273',
'273,,,,,,,273,273,273,278,278,278,278,,278,278,278,278,278,,278,278',
',,273,273,,,278,278,278,215,215,215,215,,215,215,215,215,215,,215,215',
',,278,278,,,215,215,215,,,,,,,,,,,,,,,,215,215' ]
        racc_action_check = arr = ::Array.new(6619, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   283,   nil,   nil,   nil,   114,   269,   nil,   268,   nil,
   nil,  5879,   346,   404,   462,   520,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   239,   173,    32,   752,   810,   868,   926,    70,   186,   nil,
    67,  4797,   nil,   nil,  1216,  1274,  1332,   nil,   nil,   nil,
   nil,  1390,   nil,   150,   149,   nil,  1564,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   209,  1680,   194,  1796,  1854,  1912,
  1970,  2028,  2086,  2144,  2202,  2260,  2318,  2376,  2434,  2492,
  2550,  2608,  2666,  2724,  2782,  2840,  2898,  2956,  3014,  3072,
  3130,  3188,  3246,  3304,  3362,   164,  3478,   194,  3594,  3652,
   350,    73,   408,   234,  5347,  4000,   nil,   171,   -15,  4174,
  5293,   nil,  5171,  5056,  4887,    20,  4522,   151,   nil,   nil,
   nil,   nil,   142,    -7,   nil,   128,   nil,   nil,   nil,   nil,
  4826,    20,   nil,     7,   nil,  4995,    73,   nil,   nil,  5110,
   nil,    13,   nil,   112,  4232,   -22,  5401,  1738,   nil,   122,
   nil,   nil,   nil,   nil,   nil,     4,   292,   176,   118,  5742,
  5745,  6218,  6461,  6472,  5950,  5993,  6010,  6053,  6076,  6123,
  6140,  6418,  6248,  6293,  6347,  6401,  6201,  5933,   nil,   nil,
   288,   nil,  5818,   694,  1042,  1100,    87,    90,   nil,   nil,
    -2,   nil,    -9,    -8,    48,    -1,  4823,    -1,    -4,   nil,
   nil,   nil,   nil,   nil,   nil,  6549,  4941,    46,   nil,   113,
   nil,   131,    74,   nil,  4116,   nil,   159,   nil,   203,    -4,
   nil,  3826,  3768,  3710,  1158,   984,   188,    32,   nil,   -14,
   269,   234,    23,   nil,  4773,   154,  3884,   nil,  4464,   nil,
  4580,   nil,  4696,   nil,   nil,   nil,   nil,  4406,   nil,   nil,
   nil,   225,   nil,   nil,   nil,   nil,  5232,    81,   nil,  3942,
  1506,   106,   nil,  6505,   nil,   122,  1622,   126,  6527,  4290,
  4754,   134,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  4348,   125,   nil,   151,   nil,    91,
   130,  4638,   nil,   159,    36,   163,   141,     3,  4058,   nil,
   143,   173,   148,   183,   185,   nil,    37,   nil,   189,  3536,
  3420,   nil,   nil,   nil,  5455,   nil,   nil,  5509,   nil,   nil,
   nil,   143,    47,  5563,   214,  1448,   214,   nil,   nil,   nil,
   nil,  5617,  5671,   222,   164,   nil,   nil,   nil,  5725,    89,
   nil,   636,   239,   218,   nil,   243,   244,   nil,   nil,   nil,
   250,   251,   253,   nil,   578,   nil,   nil,   nil,   241,   262,
   nil,   nil,   267,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   230,   nil,   172,    56,   nil,   nil,   nil,
   275,   nil,   nil,   nil,   278,   nil,   279,   nil,   280,   nil,
   nil,   nil,   nil,   nil ]

racc_action_default = [
  -230,  -231,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -109,  -231,  -231,  -231,  -231,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,
   -74,   -75,   -79,  -231,  -231,  -231,  -231,  -231,  -120,  -122,
  -231,  -231,  -158,  -168,  -231,  -231,  -231,  -181,  -182,  -183,
  -184,  -231,  -186,  -231,  -197,  -200,  -231,  -205,  -206,  -207,
  -208,  -209,  -210,  -211,  -231,  -231,    -7,  -231,  -231,  -231,
  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,
  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,
  -231,  -231,  -231,  -231,  -231,  -231,  -129,  -124,  -230,  -230,
   -28,  -231,   -29,   -36,  -231,  -231,   -76,  -231,  -231,  -231,
  -231,   -86,  -231,  -231,  -231,  -231,  -231,  -230,  -139,  -159,
  -160,  -121,  -230,  -230,  -148,  -150,  -151,  -152,  -153,  -154,
   -44,  -231,  -171,  -231,  -174,  -231,  -231,  -177,  -178,  -190,
  -185,  -231,  -193,  -231,  -231,  -231,  -231,  -231,   404,    -6,
    -9,   -12,   -13,   -14,   -15,  -231,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -26,   -27,   -30,   -31,   -32,   -33,
   -34,   -35,   -37,   -38,   -39,   -40,   -41,  -231,   -42,  -104,
  -231,   -80,  -231,  -223,  -229,  -217,  -214,  -212,  -118,  -130,
  -206,  -133,  -210,  -231,  -220,  -218,  -226,  -208,  -209,  -216,
  -221,  -222,  -224,  -225,  -227,  -129,  -128,  -231,  -127,  -231,
   -43,  -212,   -71,   -81,  -231,   -84,  -212,  -164,  -167,  -231,
   -78,  -231,  -231,  -231,  -129,  -231,  -214,  -230,  -161,  -231,
  -231,  -231,  -231,  -156,  -231,  -231,  -231,  -169,  -231,  -172,
  -231,  -175,  -231,  -187,  -188,  -189,  -191,  -231,  -194,  -195,
  -196,  -212,  -198,  -201,  -203,  -204,  -109,  -231,   -17,  -231,
  -231,  -212,  -106,  -129,  -117,  -231,  -215,  -231,  -213,  -231,
  -231,  -212,  -132,  -134,  -217,  -218,  -219,  -220,  -223,  -226,
  -228,  -229,  -125,  -126,  -213,  -231,   -73,  -231,   -83,  -231,
  -213,  -231,   -77,  -231,   -89,  -231,   -95,  -231,  -231,   -99,
  -214,  -212,  -214,  -231,  -231,  -142,  -231,  -162,  -212,  -230,
  -231,  -149,  -157,  -155,   -45,  -170,  -173,  -180,  -176,  -179,
  -192,  -231,  -231,  -108,  -231,  -213,  -212,  -112,  -119,  -113,
  -131,  -135,  -136,  -231,   -70,   -82,   -85,  -165,  -166,   -89,
   -88,  -231,  -231,   -95,   -94,  -231,  -231,  -103,   -98,  -100,
  -231,  -231,  -231,  -115,  -230,  -143,  -144,  -145,  -231,  -231,
  -140,  -141,  -231,  -147,  -199,  -202,  -105,  -107,  -116,  -123,
   -72,   -87,   -90,  -231,   -93,  -231,  -231,  -110,  -111,  -114,
  -231,  -163,  -137,  -146,  -231,   -92,  -231,   -97,  -231,  -102,
  -138,   -91,   -96,  -101 ]

racc_goto_table = [
     2,   132,     4,   116,   110,   112,   113,   114,   150,   138,
   136,   197,   263,   196,   275,   226,   189,   354,   369,   237,
   350,   321,   309,   322,   240,   161,   162,   163,   164,    76,
   217,   219,   188,   236,   160,   120,   122,   123,   124,   338,
   273,   356,   277,   340,   141,   143,   140,   140,   145,   271,
   308,   382,   261,   149,   313,   314,   365,   241,   156,   223,
   347,   329,   258,   390,   384,   381,   295,   259,     3,   256,
   257,   299,   165,   255,   140,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
   181,   182,   183,   184,   185,   186,   187,   359,   192,   159,
   216,   216,   272,   152,   154,   221,   331,   140,     1,   229,
   nil,   140,   nil,   nil,   nil,   nil,   334,   nil,   192,   nil,
   281,   nil,   nil,   nil,   nil,   nil,   343,   nil,   360,   238,
   362,   nil,   nil,   nil,   238,   243,   318,   nil,   nil,   311,
   nil,   310,   312,   nil,   nil,   nil,   nil,   nil,   nil,   266,
   nil,   nil,   nil,   nil,   260,   132,   361,   267,   nil,   nil,
   nil,   nil,   nil,   368,   138,   136,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   336,   nil,
   nil,   378,   187,   nil,   296,   120,   122,   123,   375,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   138,   136,   138,   136,   330,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   297,   140,   192,   192,   nil,   nil,
   nil,   303,   305,   nil,   nil,   nil,   nil,   nil,   324,   315,
   324,   nil,   327,   nil,   145,   nil,   nil,   377,   nil,   149,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   324,   333,   nil,   nil,   nil,   nil,   366,   192,   nil,
   nil,   341,   342,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   324,   nil,   nil,   nil,
   nil,   nil,   nil,   348,   nil,   nil,   nil,   nil,   nil,   nil,
   140,   nil,   nil,   nil,   nil,   nil,   380,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   372,   371,   nil,   nil,   nil,   nil,   nil,   187,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   120,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   371,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   394,   nil,   396,   398 ]

racc_goto_check = [
     2,    65,     4,    40,    10,    10,    10,    10,    82,    32,
    38,    57,    89,    55,    56,    45,    52,    48,    67,    66,
    47,    73,    50,    73,    66,     8,     8,     8,     8,     6,
    61,    61,    13,    55,     7,    10,    10,    10,    10,    58,
    59,    51,    39,    62,    12,    12,    10,    10,    10,    53,
    49,    46,    45,    10,    56,    69,    70,    72,    10,    44,
    75,    77,    78,    67,    48,    47,    39,    79,     3,    83,
    84,    39,    12,    86,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    50,    10,     6,
    10,    10,    52,    87,    88,    12,    39,    10,     1,    12,
   nil,    10,   nil,   nil,   nil,   nil,    39,   nil,    10,   nil,
    57,   nil,   nil,   nil,   nil,   nil,    39,   nil,    56,     4,
    56,   nil,   nil,   nil,     4,     4,    45,   nil,   nil,    57,
   nil,    55,    55,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,     2,    65,    39,     2,   nil,   nil,
   nil,   nil,   nil,    39,    32,    38,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,   nil,
   nil,    39,    10,   nil,    40,    10,    10,    10,    89,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,    38,    32,    38,    82,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,    10,    10,    10,   nil,   nil,
   nil,     2,     2,   nil,   nil,   nil,   nil,   nil,    10,     4,
    10,   nil,    10,   nil,    10,   nil,   nil,    52,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,    10,   nil,   nil,   nil,   nil,    65,    10,   nil,
   nil,    10,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,     4,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   108,     0,    68,     2,   nil,    24,   -43,   -53,   nil,
    -8,   nil,   -10,   -72,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -42,   nil,   nil,   nil,   nil,   nil,   -41,  -155,
   -38,   nil,   nil,   nil,   -58,  -103,  -300,  -284,  -289,  -183,
  -211,  -266,   -88,  -141,   nil,   -93,  -182,   -95,  -237,  -152,
   nil,   -78,  -235,   nil,   nil,   -49,  -108,  -301,   nil,  -182,
  -260,   nil,   -76,  -221,   nil,  -240,   nil,  -191,   -91,   -86,
   nil,   nil,   -53,   -82,   -81,   nil,   -78,    40,    40,  -144 ]

racc_goto_default = [
   nil,   nil,   370,   nil,   218,     5,     6,     7,     8,     9,
    11,    10,   307,   nil,    16,    40,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,   nil,
   nil,    41,    42,   117,   nil,   nil,   121,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   198,   nil,
   107,   nil,   199,   203,   201,   128,   nil,   nil,   127,   nil,
   nil,   133,   nil,   134,   135,   227,   146,   148,    57,    58,
    59,    61,   nil,   nil,   nil,   151,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 91, :_reduce_1,
  1, 91, :_reduce_2,
  1, 91, :_reduce_none,
  1, 92, :_reduce_4,
  1, 95, :_reduce_5,
  3, 95, :_reduce_6,
  2, 95, :_reduce_7,
  1, 96, :_reduce_8,
  3, 96, :_reduce_9,
  1, 97, :_reduce_none,
  1, 98, :_reduce_11,
  3, 98, :_reduce_12,
  3, 98, :_reduce_13,
  3, 98, :_reduce_14,
  3, 98, :_reduce_15,
  1, 100, :_reduce_none,
  4, 100, :_reduce_17,
  3, 100, :_reduce_18,
  3, 100, :_reduce_19,
  3, 100, :_reduce_20,
  3, 100, :_reduce_21,
  3, 100, :_reduce_22,
  3, 100, :_reduce_23,
  3, 100, :_reduce_24,
  3, 100, :_reduce_25,
  3, 100, :_reduce_26,
  3, 100, :_reduce_27,
  2, 100, :_reduce_28,
  2, 100, :_reduce_29,
  3, 100, :_reduce_30,
  3, 100, :_reduce_31,
  3, 100, :_reduce_32,
  3, 100, :_reduce_33,
  3, 100, :_reduce_34,
  3, 100, :_reduce_35,
  2, 100, :_reduce_36,
  3, 100, :_reduce_37,
  3, 100, :_reduce_38,
  3, 100, :_reduce_39,
  3, 100, :_reduce_40,
  3, 100, :_reduce_41,
  3, 100, :_reduce_42,
  3, 100, :_reduce_43,
  1, 102, :_reduce_44,
  3, 102, :_reduce_45,
  1, 101, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 123, :_reduce_68,
  1, 123, :_reduce_69,
  5, 104, :_reduce_70,
  3, 104, :_reduce_71,
  6, 104, :_reduce_72,
  4, 104, :_reduce_73,
  1, 104, :_reduce_74,
  1, 108, :_reduce_75,
  2, 108, :_reduce_76,
  4, 131, :_reduce_77,
  3, 131, :_reduce_78,
  1, 131, :_reduce_79,
  3, 132, :_reduce_80,
  2, 130, :_reduce_81,
  3, 134, :_reduce_82,
  2, 134, :_reduce_83,
  2, 133, :_reduce_84,
  4, 133, :_reduce_85,
  2, 111, :_reduce_86,
  5, 136, :_reduce_87,
  4, 136, :_reduce_88,
  0, 137, :_reduce_none,
  2, 137, :_reduce_90,
  4, 137, :_reduce_91,
  3, 137, :_reduce_92,
  6, 112, :_reduce_93,
  5, 112, :_reduce_94,
  0, 138, :_reduce_none,
  4, 138, :_reduce_96,
  3, 138, :_reduce_97,
  5, 110, :_reduce_98,
  1, 139, :_reduce_99,
  2, 139, :_reduce_100,
  5, 140, :_reduce_101,
  4, 140, :_reduce_102,
  1, 141, :_reduce_103,
  1, 103, :_reduce_none,
  4, 103, :_reduce_105,
  1, 143, :_reduce_106,
  3, 143, :_reduce_107,
  3, 142, :_reduce_108,
  1, 99, :_reduce_109,
  6, 99, :_reduce_110,
  6, 99, :_reduce_111,
  5, 99, :_reduce_112,
  5, 99, :_reduce_113,
  6, 99, :_reduce_114,
  5, 99, :_reduce_115,
  4, 148, :_reduce_116,
  1, 149, :_reduce_117,
  1, 145, :_reduce_118,
  3, 145, :_reduce_119,
  1, 144, :_reduce_120,
  2, 144, :_reduce_121,
  1, 144, :_reduce_122,
  6, 109, :_reduce_123,
  2, 109, :_reduce_124,
  3, 150, :_reduce_125,
  3, 150, :_reduce_126,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 147, :_reduce_129,
  1, 147, :_reduce_130,
  3, 147, :_reduce_131,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  3, 152, :_reduce_135,
  3, 152, :_reduce_136,
  6, 113, :_reduce_137,
  7, 114, :_reduce_138,
  1, 158, :_reduce_139,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 159, :_reduce_none,
  2, 159, :_reduce_143,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  6, 115, :_reduce_146,
  5, 115, :_reduce_147,
  1, 161, :_reduce_148,
  3, 161, :_reduce_149,
  1, 163, :_reduce_150,
  1, 163, :_reduce_151,
  1, 163, :_reduce_152,
  1, 163, :_reduce_none,
  1, 164, :_reduce_154,
  3, 164, :_reduce_155,
  1, 162, :_reduce_none,
  2, 162, :_reduce_157,
  1, 117, :_reduce_158,
  1, 155, :_reduce_159,
  1, 155, :_reduce_160,
  1, 156, :_reduce_161,
  2, 156, :_reduce_162,
  4, 156, :_reduce_163,
  1, 135, :_reduce_164,
  3, 135, :_reduce_165,
  3, 165, :_reduce_166,
  1, 165, :_reduce_167,
  1, 107, :_reduce_168,
  3, 118, :_reduce_169,
  4, 118, :_reduce_170,
  2, 118, :_reduce_171,
  3, 118, :_reduce_172,
  4, 118, :_reduce_173,
  2, 118, :_reduce_174,
  3, 121, :_reduce_175,
  4, 121, :_reduce_176,
  2, 121, :_reduce_177,
  1, 166, :_reduce_178,
  3, 166, :_reduce_179,
  3, 167, :_reduce_180,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 168, :_reduce_184,
  2, 169, :_reduce_185,
  1, 171, :_reduce_186,
  1, 173, :_reduce_187,
  1, 174, :_reduce_188,
  2, 172, :_reduce_189,
  1, 175, :_reduce_190,
  1, 176, :_reduce_191,
  2, 176, :_reduce_192,
  2, 170, :_reduce_193,
  2, 177, :_reduce_194,
  2, 177, :_reduce_195,
  3, 93, :_reduce_196,
  0, 178, :_reduce_197,
  2, 178, :_reduce_198,
  4, 178, :_reduce_199,
  1, 116, :_reduce_200,
  3, 116, :_reduce_201,
  5, 116, :_reduce_202,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 124, :_reduce_205,
  1, 127, :_reduce_206,
  1, 125, :_reduce_207,
  1, 126, :_reduce_208,
  1, 120, :_reduce_209,
  1, 119, :_reduce_210,
  1, 122, :_reduce_211,
  0, 129, :_reduce_none,
  1, 129, :_reduce_213,
  0, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  0, 94, :_reduce_230 ]

racc_reduce_n = 231

racc_shift_n = 404

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :DELETES => 17,
  :LESSEQUAL => 18,
  :NOTEQUAL => 19,
  :DOT => 20,
  :COLON => 21,
  :LLCOLLECT => 22,
  :RRCOLLECT => 23,
  :QMARK => 24,
  :LPAREN => 25,
  :RPAREN => 26,
  :ISEQUAL => 27,
  :GREATEREQUAL => 28,
  :GREATERTHAN => 29,
  :LESSTHAN => 30,
  :IF => 31,
  :ELSE => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :ATAT => 45,
  :LCOLLECT => 46,
  :RCOLLECT => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68,
  :UNLESS => 69,
  :PIPE => 70,
  :LAMBDA => 71,
  :SELBRACE => 72,
  :NUMBER => 73,
  :HEREDOC => 74,
  :SUBLOCATE => 75,
  :RENDER_STRING => 76,
  :RENDER_EXPR => 77,
  :EPP_START => 78,
  :EPP_END => 79,
  :EPP_END_TRIM => 80,
  :FUNCTION => 81,
  :LOW => 82,
  :HIGH => 83,
  :CALL => 84,
  :LISTSTART => 85,
  :SPLAT => 86,
  :MODULO => 87,
  :TITLE_COLON => 88,
  :CASE_COLON => 89 }

racc_nt_base = 90

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 78)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_29(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_30(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_31(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_32(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_33(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_34(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_35(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_36(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_37(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_38(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_39(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_40(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_41(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_42(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_43(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 136)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 137)
  def _reduce_45(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'egrammar.ra', 170)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 171)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 183)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 192)
  def _reduce_73(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_75(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_76(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_78(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_79(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_80(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_81(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_82(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_83(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 245)
  def _reduce_86(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_88(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_90(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_91(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 272)
  def _reduce_92(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_94(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_96(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_97(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_98(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 314)
  def _reduce_100(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_102(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 338)
  def _reduce_105(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 343)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 344)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 349)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 361)
  def _reduce_109(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 364)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 379)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 400)
  def _reduce_113(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 421)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_115(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_116(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_117(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 436)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_120(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_121(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_122(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 456)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 460)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 465)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 480)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 497)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 501)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 511)
  def _reduce_137(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 525)
  def _reduce_138(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 535)
  def _reduce_139(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 544)
  def _reduce_143(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 561)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 575)
  def _reduce_148(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_149(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_151(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_152(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_154(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_155(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 156 omitted

module_eval(<<'.,.,', 'egrammar.ra', 593)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 598)
  def _reduce_158(val, _values, result)
     result = Factory.QNAME(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_159(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_160(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_161(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_162(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_163(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_164(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_165(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_166(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_167(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_168(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_169(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_170(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_171(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_172(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_173(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_174(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_175(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_176(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_177(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_178(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_179(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_180(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_184(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_185(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_186(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_187(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_188(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_189(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_190(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_191(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_192(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_193(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_194(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_195(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_196(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_197(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_198(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_199(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_200(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_201(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_202(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 203 omitted

# reduce 204 omitted

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_205(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_206(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_207(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_208(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_209(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_210(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 718)
  def _reduce_211(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 212 omitted

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_213(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

module_eval(<<'.,.,', 'egrammar.ra', 747)
  def _reduce_230(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
