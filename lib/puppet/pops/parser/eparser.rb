#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 805)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'63,66,135,295,64,57,285,59,-248,86,-134,-246,242,144,-132,-244,-235',
'285,134,-247,325,-249,133,109,15,113,382,108,280,281,43,264,50,243,52',
'47,263,51,76,72,292,45,75,48,49,296,145,73,14,112,-248,74,-134,-246',
'12,13,-132,-244,-235,93,92,-247,77,-249,88,89,130,266,44,81,267,87,71',
'67,252,69,70,68,269,268,53,54,56,55,63,66,359,58,64,57,406,59,426,94',
'134,285,242,86,133,242,134,377,134,376,133,262,133,392,15,73,261,109',
'73,113,43,108,50,243,52,47,243,51,76,72,284,45,75,48,49,285,320,73,14',
'340,235,74,361,112,12,13,242,294,242,134,63,66,77,133,64,57,134,59,44',
'73,133,73,71,67,134,69,70,243,133,243,53,54,56,55,15,63,66,58,363,64',
'43,278,50,324,52,47,312,51,76,72,79,45,75,48,49,313,294,73,14,260,377',
'74,376,368,12,13,82,84,83,85,369,370,77,259,256,256,374,314,44,378,380',
'122,71,67,234,69,70,292,294,292,53,54,56,55,63,66,388,58,64,57,389,59',
'424,86,345,320,342,397,225,197,81,399,320,164,401,161,294,109,15,113',
'159,108,339,404,43,122,50,356,52,47,292,51,76,72,321,45,75,48,49,123',
'409,73,14,112,380,74,411,412,12,13,413,90,91,93,92,414,77,415,88,89',
'122,417,44,418,119,87,71,67,242,69,70,81,78,427,53,54,56,55,63,66,428',
'58,64,57,429,59,422,94,430,431,,,,,,,,,,,,,15,,,,,,43,,50,,52,47,,51',
'76,72,,45,75,48,49,,,73,14,,,74,,86,12,13,,,,,,,77,,,,,109,44,113,,108',
'71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59,329,112,,,,,,,,,,,,',
',,15,,,,,,43,87,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13',
',,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,',
'43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77',
',64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115',
',51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,',
',,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45',
'75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70',
',,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,',
',74,,86,12,13,,,,,,,77,,,,,109,44,113,,108,71,67,,69,70,,,,53,54,56',
'55,63,66,,58,64,57,,59,420,112,,,,,,,,,,,,,,,15,,,,,,43,87,50,,52,47',
',51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59',
'44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72',
',45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,129,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,199,220,210,221,52,211,223,212,208,206,,201,218,',
',,,73,14,224,219,217,,,12,13,,,,,,,77,,,,,222,200,,,,71,67,,69,70,,',
',213,214,216,215,63,66,,58,64,57,,59,,86,,,,,,,,,,,,,,109,15,113,,108',
',,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,112,,74,,,12,13,,90,91,93',
'92,,77,,88,89,,,44,,,87,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57',
',59,318,94,,,,86,,,,,,,,,,,15,,,109,,113,43,108,50,,52,47,,51,76,72',
',45,75,48,49,,,73,14,,,74,,112,12,13,,,,,63,66,77,,64,57,148,59,44,',
',,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45',
'75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,150,59,44,,,,71,67,,69',
'70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14',
',,74,,86,12,13,,,,,,,77,,,,,109,44,113,,108,71,67,,69,70,,,,53,54,56',
'55,63,66,,58,64,57,,59,153,112,,,,86,,,,,,,,,,,15,,,109,,113,43,108',
'50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,112,12,13,,,,,63,66,77,',
'64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115',
',51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,349,59,44',
',,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45',
'75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70',
',,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,',
',74,,,12,13,,,,,63,66,77,,64,57,,163,44,,,,71,67,,69,70,,,,53,54,56',
'55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13',
',,,,63,66,77,,64,57,350,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58',
',,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77',
',64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47',
',51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59',
'44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72',
',45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69',
'70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73',
'14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54',
'56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,',
'63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,',
'50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,',
'64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47',
',51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59',
'44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72',
',45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69',
'70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14',
',,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56',
'55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13',
',,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,',
'43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77',
',64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115',
',51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,',
',,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45',
'75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70',
',,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,',
',74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55',
'15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,',
',63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43',
',50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,,,77',
',,,,,44,,,196,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59,352,,',
',,,,,,,,,,,,,15,,,,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,199,220,210,221,52,211,223,212,208,206,,201,218,,,,,73,14,224',
'219,217,,,12,13,,,,,,,77,,,,,222,200,,,,71,67,,69,70,,,,213,214,216',
'215,63,66,,58,64,57,,59,,,,,,,,,,,,,,,,,15,,,,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
'232,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,',
',,,77,,,,,,44,,,,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59,383',
',,,,,,,,,,,,,,,15,,,,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,247,,58,,,43,',
'50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,,,77,,,,,,44,,,,71,67,,69,70,,,,53,54,56,55',
'63,66,,58,64,57,,59,153,,,,,,,,,,,,,,,,15,,,,,,43,,50,,52,47,,51,76',
'72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48',
'49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,',
',,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,',
'74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55',
'15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,',
',63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43',
',50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,,,77,,,,,,44,,,,71,67,,69,70,,,,53,54,56,55,63,66,,58,64',
'57,,59,327,86,,,,,,,,,,,,,,109,15,113,,108,,,43,,50,,52,47,,51,76,72',
',45,75,48,49,,,73,14,112,,74,,,12,13,,,,,,,77,,88,89,,,44,,,87,71,67',
',69,70,,,86,53,54,56,55,,,,58,105,106,107,102,97,109,,113,,108,,,98',
'100,99,101,,,,,,,,,,,,,,,,112,,,,104,103,,86,90,91,93,92,95,96,,88,89',
',,102,97,109,87,113,,108,,86,98,100,99,101,265,,,,105,106,107,102,97',
'109,,113,94,108,,112,98,100,99,101,103,,,90,91,93,92,95,96,,88,89,,',
',112,,87,,104,103,,,90,91,93,92,95,96,,88,89,86,,110,,,87,,94,,105,106',
'107,102,97,109,,113,,108,,,98,100,99,101,,,94,,,,,,,,,,,,,112,,,,104',
'103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113',
',108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95',
'96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101',
',,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87',
'105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112',
',,,104,103,,,90,91,93,92,95,96,,88,89,86,,251,,,87,,,,105,106,107,102',
'97,109,,113,,108,,,98,100,99,101,,,94,,,,,,,,,,,,,112,,,,104,103,,,90',
'91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98',
'100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88',
'89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94',
',,,,,,,,,112,,,,104,103,,86,90,91,93,92,95,96,,88,89,,,,,109,87,113',
',108,,86,,250,,,,280,281,,105,106,107,102,97,109,,113,94,108,,112,98',
'100,99,101,,,,90,91,93,92,95,96,,88,89,,,,112,,87,,104,103,,,90,91,93',
'92,95,96,,88,89,86,,249,,,87,,94,,105,106,107,102,97,109,,113,,108,',
',98,100,99,101,,,94,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,',
'88,89,86,,248,,,87,,,,105,106,107,102,97,109,,113,,108,,,98,100,99,101',
',,94,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87',
'105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112',
',,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109',
',113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93',
'92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100',
'99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89',
',,286,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94',
',,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106',
'107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104',
'103,,,90,91,93,92,95,96,,88,89,,86,,110,,87,265,,,,105,106,107,102,97',
'109,,113,,108,,,98,100,99,101,,94,,,,,,,,,,,,,,112,,,,104,103,,,90,91',
'93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,290,113,86,108,',
',98,100,99,101,,,,,,94,109,,113,,108,,,,,112,,,,104,103,,,90,91,93,92',
'95,96,,88,89,112,,,,,87,,86,90,91,93,92,95,96,,88,89,,,,97,109,87,113',
'86,108,,94,98,,,,,,,,,97,109,,113,,108,,94,98,,112,,,,,,,,90,91,93,92',
'95,96,,88,89,112,,,,,87,,86,90,91,93,92,95,96,,88,89,,,,97,109,87,113',
'86,108,,94,98,,,,,,,,,97,109,,113,,108,,94,98,,112,,,,,,,,90,91,93,92',
'95,96,,88,89,112,,,,,87,,86,90,91,93,92,95,96,,88,89,,,102,97,109,87',
'113,,108,,94,98,100,99,101,,,,,,,,,,,,,94,,,112,,,,,,,,90,91,93,92,95',
'96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,230,98,100,99',
'101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,',
',,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,',
',,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102',
'97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90',
'91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,86,108,',
',98,100,99,101,,,,,,94,109,,113,,108,,,63,66,112,,64,,104,103,,,90,91',
'93,92,95,96,,88,89,112,,,63,66,87,,64,63,66,93,92,64,,,88,89,63,66,',
'144,64,87,141,,,,94,,,,,,,,,,,,,,,144,77,94,141,86,144,,,141,,,145,67',
'86,144,,,141,109,,113,,108,77,,,,109,77,113,,108,,145,67,,,77,145,67',
',,,,112,,,145,67,,,,,112,,,,,,88,89,,,,,,87,,88,89,,304,220,303,221',
'87,301,223,305,299,298,,300,302,,,,,,,224,219,306,304,220,303,221,,301',
'223,305,299,298,,300,302,,,222,307,,,224,219,306,,,,,,,310,311,309,308',
',,,,,222,307,,,,,,,,,,,,310,311,309,308,304,220,303,221,,301,223,305',
'299,298,,300,302,,,,,,,224,219,306,,,,,,,,,,,,,,,,222,307,,,,,,,,,,',
',310,311,309,308' ]
        racc_action_table = arr = ::Array.new(7093, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,48,209,0,0,246,0,213,175,208,215,244,260,206,217,218,330,115,216',
'246,214,115,175,0,175,330,175,356,356,0,149,0,244,0,0,149,0,0,0,202',
'0,0,0,0,209,260,0,0,175,213,0,208,215,0,0,206,217,218,175,175,216,0',
'214,175,175,47,152,0,165,152,175,0,0,129,0,0,0,157,157,0,0,0,0,412,412',
'287,0,412,412,373,412,412,175,47,373,320,172,47,122,339,327,129,327',
'339,147,129,339,412,320,147,172,122,172,412,172,412,320,412,412,122',
'412,412,412,171,412,412,412,412,171,277,412,412,256,122,412,291,172',
'412,412,161,203,256,50,5,5,412,50,5,5,210,5,412,161,210,256,412,412',
'211,412,412,161,211,256,412,412,412,412,5,159,159,412,293,159,5,161',
'5,245,5,5,227,5,5,5,5,5,5,5,5,229,297,5,5,139,374,5,374,315,5,5,8,8',
'8,8,317,319,5,137,136,131,326,231,5,328,329,232,5,5,121,5,5,333,334',
'335,5,5,5,5,411,411,336,5,411,411,337,411,411,180,258,341,257,343,111',
'109,80,355,236,78,358,68,360,180,411,180,67,180,254,367,411,368,411',
'283,411,411,253,411,411,411,242,411,411,411,411,42,377,411,411,180,378',
'411,380,381,411,411,385,180,180,180,180,386,411,387,180,180,41,393,411',
'394,40,180,411,411,243,411,411,6,1,416,411,411,411,411,409,409,419,411',
'409,409,421,409,409,180,423,425,,,,,,,,,,,,,409,,,,,,409,,409,,409,409',
',409,409,409,,409,409,409,409,,,409,409,,,409,,174,409,409,,,,,,,409',
',,,,174,409,174,,174,409,409,,409,409,,,,409,409,409,409,249,249,,409',
'249,249,,249,249,174,,,,,,,,,,,,,,,249,,,,,,249,174,249,,249,249,,249',
'249,249,,249,249,249,249,,,249,249,,,249,,,249,249,,,,,12,12,249,,12',
'12,,12,249,,,,249,249,,249,249,,,,249,249,249,249,12,,,249,,,12,,12',
',12,12,,12,12,12,,12,12,,,,,12,12,,,12,,,12,12,,,,,13,13,12,,13,13,',
'13,12,,,,12,12,,12,12,,,,12,12,12,12,13,,,12,,,13,,13,,13,13,,13,13',
'13,,13,13,,,,,13,13,,,13,,,13,13,,,,,14,14,13,,14,14,,14,13,,,,13,13',
',13,13,,,,13,13,13,13,14,,,13,,,14,,14,,14,14,,14,14,14,,14,14,,,,,14',
'14,,,14,,,14,14,,,,,15,15,14,,15,15,,15,14,,,,14,14,,14,14,,,,14,14',
'14,14,15,,,14,,,15,,15,,15,15,,15,15,15,,15,15,,,,,15,15,,,15,,173,15',
'15,,,,,,,15,,,,,173,15,173,,173,15,15,,15,15,,,,15,15,15,15,397,397',
',15,397,397,,397,397,173,,,,,,,,,,,,,,,397,,,,,,397,173,397,,397,397',
',397,397,397,,397,397,397,397,,,397,397,,,397,,,397,397,,,,,389,389',
'397,,389,389,,389,397,,,,397,397,,397,397,,,,397,397,397,397,389,,,397',
',,389,,389,,389,389,,389,389,389,,389,389,389,389,,,389,389,,,389,,',
'389,389,,,,,376,376,389,,376,376,,376,389,,,,389,389,,389,389,,,,389',
'389,389,389,376,,,389,,,376,,376,,376,376,,376,376,376,,376,376,,,,',
'376,376,,,376,,,376,376,,,,,43,43,376,,43,43,,43,376,,,,376,376,,376',
'376,,,,376,376,376,376,43,,,376,,,43,,43,,43,43,,43,43,43,,43,43,,,',
',43,43,,,43,,,43,43,,,,,44,44,43,,44,44,,44,43,,,,43,43,,43,43,,,,43',
'43,43,43,44,,,43,,,44,,44,,44,44,,44,44,44,,44,44,,,,,44,44,,,44,,,44',
'44,,,,,45,45,44,,45,45,,45,44,,,,44,44,,44,44,,,,44,44,44,44,45,,,44',
',,45,,45,,45,45,,45,45,45,,45,45,,,,,45,45,,,45,,,45,45,,,,,46,46,45',
',46,46,,46,45,,,,45,45,,45,45,,,,45,45,45,45,46,,,45,,,46,,46,,46,46',
',46,46,46,,46,46,,,,,46,46,,,46,,,46,46,,,,,250,250,46,,250,250,,250',
'46,,,,46,46,,46,46,,,,46,46,46,46,250,,,46,,,250,,250,,250,250,,250',
'250,250,,250,250,,,,,250,250,,,250,,,250,250,,,,,251,251,250,,251,251',
',251,250,,,,250,250,,250,250,,,,250,250,250,250,251,,,250,,,251,251',
'251,251,251,251,251,251,251,251,,251,251,,,,,251,251,251,251,251,,,251',
'251,,,,,,,251,,,,,251,251,,,,251,251,,251,251,,,,251,251,251,251,252',
'252,,251,252,252,,252,,181,,,,,,,,,,,,,,181,252,181,,181,,,252,,252',
',252,252,,252,252,252,,252,252,,,,,252,252,181,,252,,,252,252,,181,181',
'181,181,,252,,181,181,,,252,,,181,252,252,,252,252,,,,252,252,252,252',
'234,234,,252,234,234,,234,234,181,,,,117,,,,,,,,,,,234,,,117,,117,234',
'117,234,,234,234,,234,234,234,,234,234,234,234,,,234,234,,,234,,117',
'234,234,,,,,57,57,234,,57,57,57,57,234,,,,234,234,,234,234,,,,234,234',
'234,234,57,,,234,,,57,,57,,57,57,,57,57,57,,57,57,,,,,57,57,,,57,,,57',
'57,,,,,58,58,57,,58,58,58,58,57,,,,57,57,,57,57,,,,57,57,57,57,58,,',
'57,,,58,,58,,58,58,,58,58,58,,58,58,,,,,58,58,,,58,,116,58,58,,,,,,',
'58,,,,,116,58,116,,116,58,58,,58,58,,,,58,58,58,58,59,59,,58,59,59,',
'59,59,116,,,,114,,,,,,,,,,,59,,,114,,114,59,114,59,,59,59,,59,59,59',
',59,59,,,,,59,59,,,59,,114,59,59,,,,,65,65,59,,65,65,,65,59,,,,59,59',
',59,59,,,,59,59,59,59,65,,,59,,,65,,65,,65,65,,65,65,65,,65,65,,,,,65',
'65,,,65,,,65,65,,,,,261,261,65,,261,261,261,261,65,,,,65,65,,65,65,',
',,65,65,65,65,261,,,65,,,261,,261,,261,261,,261,261,261,,261,261,,,',
',261,261,,,261,,,261,261,,,,,359,359,261,,359,359,,359,261,,,,261,261',
',261,261,,,,261,261,261,261,359,,,261,,,359,,359,,359,359,,359,359,359',
',359,359,,,,,359,359,,,359,,,359,359,,,,,70,70,359,,70,70,,70,359,,',
',359,359,,359,359,,,,359,359,359,359,70,,,359,,,70,,70,,70,70,,70,70',
'70,,70,70,,,,,70,70,,,70,,,70,70,,,,,263,263,70,,263,263,263,263,70',
',,,70,70,,70,70,,,,70,70,70,70,263,,,70,,,263,,263,,263,263,,263,263',
'263,,263,263,,,,,263,263,,,263,,,263,263,,,,,79,79,263,,79,79,,79,263',
',,,263,263,,263,263,,,,263,263,263,263,79,,,263,,,79,,79,,79,79,,79',
'79,79,,79,79,79,79,,,79,79,,,79,,,79,79,,,,,265,265,79,,265,265,,265',
'79,,,,79,79,,79,79,,,,79,79,79,79,265,,,79,,,265,,265,,265,265,,265',
'265,265,,265,265,,,,,265,265,,,265,,,265,265,,,,,81,81,265,,81,81,,81',
'265,,,,265,265,,265,265,,,,265,265,265,265,81,,,265,,,81,,81,,81,81',
',81,81,81,,81,81,81,81,,,81,81,,,81,,,81,81,,,,,82,82,81,,82,82,,82',
'81,,,,81,81,,81,81,,,,81,81,81,81,82,,,81,,,82,,82,,82,82,,82,82,82',
',82,82,82,82,,,82,82,,,82,,,82,82,,,,,83,83,82,,83,83,,83,82,,,,82,82',
',82,82,,,,82,82,82,82,83,,,82,,,83,,83,,83,83,,83,83,83,,83,83,83,83',
',,83,83,,,83,,,83,83,,,,,84,84,83,,84,84,,84,83,,,,83,83,,83,83,,,,83',
'83,83,83,84,,,83,,,84,,84,,84,84,,84,84,84,,84,84,84,84,,,84,84,,,84',
',,84,84,,,,,85,85,84,,85,85,,85,84,,,,84,84,,84,84,,,,84,84,84,84,85',
',,84,,,85,,85,,85,85,,85,85,85,,85,85,85,85,,,85,85,,,85,,,85,85,,,',
',86,86,85,,86,86,,86,85,,,,85,85,,85,85,,,,85,85,85,85,86,,,85,,,86',
',86,,86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,,87,87,86,,87',
'87,,87,86,,,,86,86,,86,86,,,,86,86,86,86,87,,,86,,,87,,87,,87,87,,87',
'87,87,,87,87,,,,,87,87,,,87,,,87,87,,,,,88,88,87,,88,88,,88,87,,,,87',
'87,,87,87,,,,87,87,87,87,88,,,87,,,88,,88,,88,88,,88,88,88,,88,88,,',
',,88,88,,,88,,,88,88,,,,,89,89,88,,89,89,,89,88,,,,88,88,,88,88,,,,88',
'88,88,88,89,,,88,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,,,89',
'89,,,,,90,90,89,,90,90,,90,89,,,,89,89,,89,89,,,,89,89,89,89,90,,,89',
',,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,91,91,90',
',91,91,,91,90,,,,90,90,,90,90,,,,90,90,90,90,91,,,90,,,91,,91,,91,91',
',91,91,91,,91,91,,,,,91,91,,,91,,,91,91,,,,,92,92,91,,92,92,,92,91,',
',,91,91,,91,91,,,,91,91,91,91,92,,,91,,,92,,92,,92,92,,92,92,92,,92',
'92,,,,,92,92,,,92,,,92,92,,,,,93,93,92,,93,93,,93,92,,,,92,92,,92,92',
',,,92,92,92,92,93,,,92,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,',
'93,,,93,93,,,,,94,94,93,,94,94,,94,93,,,,93,93,,93,93,,,,93,93,93,93',
'94,,,93,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,',
'95,95,94,,95,95,,95,94,,,,94,94,,94,94,,,,94,94,94,94,95,,,94,,,95,',
'95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,96,96,95,,96,96',
',96,95,,,,95,95,,95,95,,,,95,95,95,95,96,,,95,,,96,,96,,96,96,,96,96',
'96,,96,96,,,,,96,96,,,96,,,96,96,,,,,97,97,96,,97,97,,97,96,,,,96,96',
',96,96,,,,96,96,96,96,97,,,96,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97',
'97,,,97,,,97,97,,,,,98,98,97,,98,98,,98,97,,,,97,97,,97,97,,,,97,97',
'97,97,98,,,97,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98',
',,,,99,99,98,,99,99,,99,98,,,,98,98,,98,98,,,,98,98,98,98,99,,,98,,',
'99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,100,100,99',
',100,100,,100,99,,,,99,99,,99,99,,,,99,99,99,99,100,,,99,,,100,,100',
',100,100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,,101,101',
'100,,101,101,,101,100,,,,100,100,,100,100,,,,100,100,100,100,101,,,100',
',,101,,101,,101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,101',
',,,,102,102,101,,102,102,,102,101,,,,101,101,,101,101,,,,101,101,101',
'101,102,,,101,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102',
',,102,,,102,102,,,,,103,103,102,,103,103,,103,102,,,,102,102,,102,102',
',,,102,102,102,102,103,,,102,,,103,,103,,103,103,,103,103,103,,103,103',
',,,,103,103,,,103,,,103,103,,,,,104,104,103,,104,104,,104,103,,,,103',
'103,,103,103,,,,103,103,103,103,104,,,103,,,104,,104,,104,104,,104,104',
'104,,104,104,,,,,104,104,,,104,,,104,104,,,,,105,105,104,,105,105,,105',
'104,,,,104,104,,104,104,,,,104,104,104,104,105,,,104,,,105,,105,,105',
'105,,105,105,105,,105,105,,,,,105,105,,,105,,,105,105,,,,,106,106,105',
',106,106,,106,105,,,,105,105,,105,105,,,,105,105,105,105,106,,,105,',
',106,,106,,106,106,,106,106,106,,106,106,,,,,106,106,,,106,,,106,106',
',,,,107,107,106,,107,107,,107,106,,,,106,106,,106,106,,,,106,106,106',
'106,107,,,106,,,107,,107,,107,107,,107,107,107,,107,107,,,,,107,107',
',,107,,,107,107,,,,,108,108,107,,108,108,,108,107,,,,107,107,,107,107',
',,,107,107,107,107,108,,,107,,,108,,108,,108,108,,108,108,108,,108,108',
',,,,108,108,,,108,,,108,108,,,,,,,108,,,,,,108,,,108,108,108,,108,108',
',,,108,108,108,108,267,267,,108,267,267,,267,267,,,,,,,,,,,,,,,,267',
',,,,,267,,267,,267,267,,267,267,267,,267,267,,,,,267,267,,,267,,,267',
'267,,,,,110,110,267,,110,110,,110,267,,,,267,267,,267,267,,,,267,267',
'267,267,110,,,267,,,110,110,110,110,110,110,110,110,110,110,,110,110',
',,,,110,110,110,110,110,,,110,110,,,,,,,110,,,,,110,110,,,,110,110,',
'110,110,,,,110,110,110,110,272,272,,110,272,272,,272,,,,,,,,,,,,,,,',
',272,,,,,,272,,272,,272,272,,272,272,272,,272,272,,,,,272,272,,,272',
',,272,272,,,,,112,112,272,,112,112,,112,272,,,,272,272,,272,272,,,,272',
'272,272,272,112,,,272,,,112,,112,,112,112,,112,112,112,,112,112,,,,',
'112,112,,,112,,,112,112,,,,,113,113,112,,113,113,,113,112,,,,112,112',
',112,112,,,,112,112,112,112,113,,,112,,,113,,113,,113,113,,113,113,113',
',113,113,,,,,113,113,,,113,,,113,113,,,,,201,201,113,,201,201,,201,113',
',,,113,113,,113,113,,,,113,113,113,113,201,,,113,,,201,,201,,201,201',
',201,201,201,,201,201,,,,,201,201,,,201,,,201,201,,,,,342,342,201,,342',
'342,,342,201,,,,201,201,,201,201,,,,201,201,201,201,342,,,201,,,342',
',342,,342,342,,342,342,342,,342,342,342,342,,,342,342,,,342,,,342,342',
',,,,200,200,342,,200,200,,200,342,,,,342,342,,342,342,,,,342,342,342',
'342,200,,,342,,,200,,200,,200,200,,200,200,200,,200,200,,,,,200,200',
',,200,,,200,200,,,,,199,199,200,,199,199,,199,200,,,,200,200,,200,200',
',,,200,200,200,200,199,,,200,,,199,,199,,199,199,,199,199,199,,199,199',
',,,,199,199,,,199,,,199,199,,,,,196,196,199,,196,196,,196,199,,,,199',
'199,,199,199,,,,199,199,199,199,196,,,199,,,196,,196,,196,196,,196,196',
'196,,196,196,,,,,196,196,,,196,,,196,196,,,,,119,119,196,,119,119,,119',
'196,,,,196,196,,196,196,,,,196,196,196,196,119,119,,196,,,119,,119,',
'119,119,,119,119,119,,119,119,,,,,119,119,,,119,,,119,119,,,,,,,119',
',,,,,119,,,,119,119,,119,119,,,,119,119,119,119,331,331,,119,331,331',
',331,331,,,,,,,,,,,,,,,,331,,,,,,331,,331,,331,331,,331,331,331,,331',
'331,,,,,331,331,,,331,,,331,331,,,,,296,296,331,,296,296,,296,331,,',
',331,331,,331,331,,,,331,331,331,331,296,,,331,,,296,,296,,296,296,',
'296,296,296,,296,296,,,,,296,296,,,296,,,296,296,,,,,123,123,296,,123',
'123,,123,296,,,,296,296,,296,296,,,,296,296,296,296,123,123,,296,,,123',
',123,,123,123,,123,123,123,,123,123,,,,,123,123,,,123,,,123,123,,,,',
'285,285,123,,285,285,,285,123,,,,123,123,,123,123,,,,123,123,123,123',
'285,,,123,,,285,,285,,285,285,,285,285,285,,285,285,,,,,285,285,,,285',
',,285,285,,,,,286,286,285,,286,286,,286,285,,,,285,285,,285,285,,,,285',
'285,285,285,286,,,285,,,286,,286,,286,286,,286,286,286,,286,286,,,,',
'286,286,,,286,,,286,286,,,,,,,286,,,,,,286,,,,286,286,,286,286,,,,286',
'286,286,286,163,163,,286,163,163,,163,163,,,,,,,,,,,,,,,,163,,,,,,163',
',163,,163,163,,163,163,163,,163,163,163,163,,,163,163,,,163,,,163,163',
',,,,160,160,163,,160,160,,160,163,,,,163,163,,163,163,,,,163,163,163',
'163,160,,,163,,,160,,160,,160,160,,160,160,160,,160,160,160,160,,,160',
'160,,,160,,,160,160,,,,,292,292,160,,292,292,,292,160,,,,160,160,,160',
'160,,,,160,160,160,160,292,,,160,,,292,,292,,292,292,,292,292,292,,292',
'292,,,,,292,292,,,292,,,292,292,,,,,130,130,292,,130,130,,130,292,,',
',292,292,,292,292,,,,292,292,292,292,130,,,292,,,130,,130,,130,130,',
'130,130,130,,130,130,,,,,130,130,,,130,,,130,130,,,,,324,324,130,,324',
'324,,324,130,,,,130,130,,130,130,,,,130,130,130,130,324,,,130,,,324',
',324,,324,324,,324,324,324,,324,324,,,,,324,324,,,324,,,324,324,,,,',
'321,321,324,,321,321,,321,324,,,,324,324,,324,324,,,,324,324,324,324',
'321,,,324,,,321,,321,,321,321,,321,321,321,,321,321,,,,,321,321,,,321',
',,321,321,,,,,295,295,321,,295,295,,295,321,,,,321,321,,321,321,,,,321',
'321,321,321,295,,,321,,,295,,295,,295,295,,295,295,295,,295,295,,,,',
'295,295,,,295,,,295,295,,,,,314,314,295,,314,314,,314,295,,,,295,295',
',295,295,,,,295,295,295,295,314,,,295,,,314,,314,,314,314,,314,314,314',
',314,314,,,,,314,314,,,314,,,314,314,,,,,,,314,,,,,,314,,,,314,314,',
'314,314,,,,314,314,314,314,248,248,,314,248,248,,248,248,177,,,,,,,',
',,,,,,177,248,177,,177,,,248,,248,,248,248,,248,248,248,,248,248,248',
'248,,,248,248,177,,248,,,248,248,,,,,,,248,,177,177,,,248,,,177,248',
'248,,248,248,,,146,248,248,248,248,,,,248,146,146,146,146,146,146,,146',
',146,,,146,146,146,146,,,,,,,,,,,,,,,,146,,,,146,146,,189,146,146,146',
'146,146,146,,146,146,,,189,189,189,146,189,,189,,151,189,189,189,189',
'151,,,,151,151,151,151,151,151,,151,146,151,,189,151,151,151,151,189',
',,189,189,189,189,189,189,,189,189,,,,151,,189,,151,151,,,151,151,151',
'151,151,151,,151,151,11,,11,,,151,,189,,11,11,11,11,11,11,,11,,11,,',
'11,11,11,11,,,151,,,,,,,,,,,,,11,,,,11,11,,,11,11,11,11,11,11,155,11',
'11,,,,,,11,155,155,155,155,155,155,,155,,155,,,155,155,155,155,,,,,',
'11,,,,,,,,,,155,,,,155,155,,,155,155,155,155,155,155,372,155,155,,,',
',,155,372,372,372,372,372,372,,372,,372,,,372,372,372,372,,,,,,155,',
',,,,,,,,372,,,,372,372,,,372,372,372,372,372,372,366,372,372,,,,,,372',
'366,366,366,366,366,366,,366,,366,,,366,366,366,366,,,,,,372,,,,,,,',
',,366,,,,366,366,,,366,366,366,366,366,366,,366,366,128,,128,,,366,',
',,128,128,128,128,128,128,,128,,128,,,128,128,128,128,,,366,,,,,,,,',
',,,,128,,,,128,128,,,128,128,128,128,128,128,365,128,128,,,,,,128,365',
'365,365,365,365,365,,365,,365,,,365,365,365,365,,,,,,128,,,,,,,,,,365',
',,,365,365,,,365,365,365,365,365,365,162,365,365,,,,,,365,162,162,162',
'162,162,162,,162,,162,,,162,162,162,162,,,,,,365,,,,,,,,,,162,,,,162',
'162,,182,162,162,162,162,162,162,,162,162,,,,,182,162,182,,182,,127',
',127,,,,162,162,,127,127,127,127,127,127,,127,162,127,,182,127,127,127',
'127,,,,182,182,182,182,182,182,,182,182,,,,127,,182,,127,127,,,127,127',
'127,127,127,127,,127,127,126,,126,,,127,,182,,126,126,126,126,126,126',
',126,,126,,,126,126,126,126,,,127,,,,,,,,,,,,,126,,,,126,126,,,126,126',
'126,126,126,126,,126,126,124,,124,,,126,,,,124,124,124,124,124,124,',
'124,,124,,,124,124,124,124,,,126,,,,,,,,,,,,,124,,,,124,124,,,124,124',
'124,124,124,124,357,124,124,,,,,,124,357,357,357,357,357,357,,357,,357',
',,357,357,357,357,,,,,,124,,,,,,,,,,357,,,,357,357,,,357,357,357,357',
'357,357,226,357,357,,,,,,357,226,226,226,226,226,226,,226,,226,,,226',
'226,226,226,,,,,,357,,,,,,,,,,226,,,,226,226,,,226,226,226,226,226,226',
'351,226,226,,,,,,226,351,351,351,351,351,351,,351,,351,,,351,351,351',
'351,,,,,,226,,,,,,,,,,351,,,,351,351,,,351,351,351,351,351,351,193,351',
'351,,,193,,,351,193,193,193,193,193,193,,193,,193,,,193,193,193,193',
',,,,,351,,,,,,,,,,193,,,,193,193,,,193,193,193,193,193,193,348,193,193',
',,,,,193,348,348,348,348,348,348,,348,,348,,,348,348,348,348,,,,,,193',
',,,,,,,,,348,,,,348,348,,,348,348,348,348,348,348,,348,348,,282,,282',
',348,282,,,,282,282,282,282,282,282,,282,,282,,,282,282,282,282,,348',
',,,,,,,,,,,,,282,,,,282,282,,,282,282,282,282,282,282,198,282,282,,',
',,,282,198,198,198,198,198,198,198,198,183,198,,,198,198,198,198,,,',
',,282,183,,183,,183,,,,,198,,,,198,198,,,198,198,198,198,198,198,,198',
'198,183,,,,,198,,184,183,183,183,183,183,183,,183,183,,,,184,184,183',
'184,185,184,,198,184,,,,,,,,,185,185,,185,,185,,183,185,,184,,,,,,,',
'184,184,184,184,184,184,,184,184,185,,,,,184,,186,185,185,185,185,185',
'185,,185,185,,,,186,186,185,186,187,186,,184,186,,,,,,,,,187,187,,187',
',187,,185,187,,186,,,,,,,,186,186,186,186,186,186,,186,186,187,,,,,186',
',188,187,187,187,187,187,187,,187,187,,,188,188,188,187,188,,188,,186',
'188,188,188,188,,,,,,,,,,,,,187,,,188,,,,,,,,188,188,188,188,188,188',
'118,188,188,,,,,,188,118,118,118,118,118,118,,118,,118,,118,118,118',
'118,118,,,,,,188,,,,,,,,,,118,,,,118,118,,,118,118,118,118,118,118,190',
'118,118,,,,,,118,190,190,190,190,190,190,,190,,190,,,190,190,190,190',
',,,,,118,,,,,,,,,,190,,,,190,190,,,190,190,190,190,190,190,191,190,190',
',,,,,190,191,191,191,191,191,191,,191,,191,,,191,191,191,191,,,,,,190',
',,,,,,,,,191,,,,191,191,,,191,191,191,191,191,191,192,191,191,,,,,,191',
'192,192,192,192,192,192,,192,176,192,,,192,192,192,192,,,,,,191,176',
',176,,176,,,259,259,192,,259,,192,192,,,192,192,192,192,192,192,,192',
'192,176,,,51,51,192,,51,345,345,176,176,345,,,176,176,212,212,,259,212',
'176,259,,,,192,,,,,,,,,,,,,,,51,259,176,51,178,345,,,345,,,259,259,179',
'212,,,212,178,,178,,178,51,,,,179,345,179,,179,,51,51,,,212,345,345',
',,,,178,,,212,212,,,,,179,,,,,,178,178,,,,,,178,,179,179,,294,294,294',
'294,179,294,294,294,294,294,,294,294,,,,,,,294,294,294,225,225,225,225',
',225,225,225,225,225,,225,225,,,294,294,,,225,225,225,,,,,,,294,294',
'294,294,,,,,,225,225,,,,,,,,,,,,225,225,225,225,289,289,289,289,,289',
'289,289,289,289,,289,289,,,,,,,289,289,289,,,,,,,,,,,,,,,,289,289,,',
',,,,,,,,,289,289,289,289' ]
        racc_action_check = arr = ::Array.new(7093, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   306,   nil,   nil,   nil,   142,   292,   nil,   135,   nil,
   nil,  5488,   454,   514,   574,   634,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   272,   223,   247,   898,   958,  1018,  1078,    57,   -43,   nil,
   106,  6851,   nil,   nil,   nil,   nil,   nil,  1426,  1486,  1570,
   nil,   nil,   nil,   nil,   nil,  1630,   nil,   178,   178,   nil,
  1810,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   247,  1930,
   231,  2050,  2110,  2170,  2230,  2290,  2350,  2410,  2470,  2530,
  2590,  2650,  2710,  2770,  2830,  2890,  2950,  3010,  3070,  3130,
  3190,  3250,  3310,  3370,  3430,  3490,  3550,  3610,  3670,   202,
  3814,   233,  3958,  4018,  1578,   -19,  1534,  1374,  6624,  4378,
   nil,   209,    63,  4582,  5996,   nil,  5939,  5882,  5707,    65,
  4966,   183,   nil,   nil,   nil,   nil,   182,   194,   nil,   172,
   nil,   nil,   nil,   nil,   nil,   nil,  5364,    97,   nil,    23,
   nil,  5431,    57,   nil,   nil,  5542,   nil,    74,   nil,   167,
  4846,   104,  5815,  4786,   nil,    56,   nil,   nil,   nil,   nil,
   nil,   116,    90,   682,   358,     2,  6803,  5294,  6889,  6898,
   230,  1286,  5862,  6395,  6442,  6459,  6506,  6523,  6570,  5411,
  6678,  6732,  6786,  6212,   nil,   nil,  4318,   nil,  6378,  4258,
  4198,  4078,    -2,   128,   nil,   nil,     2,   nil,    -2,    -9,
   113,   121,  6865,    -4,     9,    -1,     7,     3,     4,   nil,
   nil,   nil,   nil,   nil,   nil,  6953,  6104,   132,   nil,   165,
   nil,   198,   144,   nil,  1366,   nil,   233,   nil,   nil,   nil,
   nil,   nil,   252,   266,   -24,   170,    -7,   nil,  5290,   394,
  1138,  1198,  1282,   222,   218,   nil,   106,   231,   200,  6829,
   -28,  1690,   nil,  1870,   nil,  1990,   nil,  3754,   nil,   nil,
   nil,   nil,  3898,   nil,   nil,   nil,   nil,   117,   nil,   nil,
   nil,   nil,  6324,   251,   nil,  4642,  4702,    73,   nil,  7007,
   nil,   126,  4906,   162,  6931,  5146,  4522,   177,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  5206,   170,   nil,   194,   nil,   134,
    60,  5086,   nil,   nil,  5026,   nil,   200,    68,   203,   181,
     4,  4462,   nil,   179,   209,   181,   220,   225,   nil,    63,
   nil,   226,  4138,   232,   nil,  6856,   nil,   nil,  6266,   nil,
   nil,  6158,   nil,   nil,   nil,   174,   -52,  6050,   238,  1750,
   237,   nil,   nil,   nil,   nil,  5761,  5650,   247,   188,   nil,
   nil,   nil,  5596,    82,   161,   nil,   838,   265,   245,   nil,
   271,   272,   nil,   nil,   nil,   274,   279,   281,   nil,   778,
   nil,   nil,   nil,   268,   287,   nil,   nil,   718,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   310,
   nil,   226,    82,   nil,   nil,   nil,   297,   nil,   nil,   304,
   nil,   308,   nil,   312,   nil,   313,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
  -250,  -251,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -109,  -251,  -251,  -251,  -251,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,
   -74,   -75,   -79,  -251,  -251,  -251,  -251,  -251,  -120,  -122,
  -251,  -251,  -177,  -178,  -179,  -180,  -181,  -251,  -251,  -251,
  -194,  -195,  -196,  -197,  -198,  -251,  -200,  -251,  -213,  -216,
  -251,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -251,  -251,
    -7,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,
  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,
  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,
  -129,  -124,  -250,  -250,   -28,  -251,   -29,   -36,  -251,  -251,
   -76,  -251,  -251,  -251,  -251,   -86,  -251,  -251,  -251,  -251,
  -251,  -250,  -139,  -160,  -161,  -121,  -250,  -228,  -148,  -150,
  -151,  -152,  -153,  -154,  -156,  -157,   -44,  -251,  -184,  -251,
  -187,  -251,  -251,  -190,  -191,  -204,  -199,  -251,  -207,  -251,
  -211,  -251,  -251,  -251,   432,    -6,    -9,   -12,   -13,   -14,
   -15,  -251,   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -25,
   -26,   -27,   -30,   -31,   -32,   -33,   -34,   -35,   -37,   -38,
   -39,   -40,   -41,  -251,   -42,  -104,  -251,   -80,  -251,  -239,
  -245,  -233,  -230,  -228,  -118,  -130,  -222,  -133,  -226,  -251,
  -236,  -234,  -242,  -178,  -179,  -180,  -181,  -224,  -225,  -232,
  -237,  -238,  -240,  -241,  -243,  -129,  -128,  -251,  -127,  -251,
   -43,  -228,   -71,   -81,  -251,   -84,  -228,  -165,  -167,  -168,
  -169,  -170,  -172,  -251,  -251,  -175,  -251,   -78,  -251,  -251,
  -251,  -129,  -251,  -230,  -250,  -162,  -251,  -251,  -250,  -229,
  -251,  -251,  -182,  -251,  -185,  -251,  -188,  -251,  -201,  -202,
  -203,  -205,  -251,  -208,  -209,  -210,  -212,  -228,  -214,  -217,
  -219,  -220,  -109,  -251,   -17,  -251,  -251,  -228,  -106,  -129,
  -117,  -251,  -231,  -251,  -229,  -251,  -251,  -228,  -132,  -134,
  -233,  -234,  -235,  -236,  -239,  -242,  -244,  -245,  -246,  -247,
  -248,  -249,  -125,  -126,  -229,  -251,   -73,  -251,   -83,  -251,
  -229,  -251,  -173,  -174,  -251,   -77,  -251,   -89,  -251,   -95,
  -251,  -251,   -99,  -230,  -228,  -230,  -251,  -251,  -142,  -251,
  -163,  -228,  -250,  -251,  -158,  -251,  -149,  -155,   -45,  -183,
  -186,  -193,  -189,  -192,  -206,  -251,  -251,  -108,  -251,  -229,
  -228,  -112,  -119,  -113,  -131,  -135,  -136,  -251,   -70,   -82,
   -85,  -166,  -171,  -251,   -89,   -88,  -251,  -251,   -95,   -94,
  -251,  -251,  -103,   -98,  -100,  -251,  -251,  -251,  -115,  -250,
  -143,  -144,  -145,  -251,  -251,  -140,  -141,  -251,  -159,  -215,
  -218,  -105,  -107,  -116,  -123,   -72,  -176,   -87,   -90,  -251,
   -93,  -251,  -251,  -110,  -111,  -114,  -251,  -164,  -137,  -251,
  -147,  -251,   -92,  -251,   -97,  -251,  -102,  -138,  -146,   -91,
   -96,  -101 ]

racc_goto_table = [
     2,     4,   120,   114,   116,   117,   118,   142,   140,   279,
   136,   156,   245,   236,   346,   203,   379,   195,   194,   291,
   254,   375,   166,   202,   394,   257,   332,   167,   168,   169,
   170,   227,   229,   362,   124,   126,   127,   128,    80,   289,
   147,   149,   381,   253,   364,   331,   408,   287,   146,   146,
   151,   245,   277,   337,   390,   343,   155,   233,   347,   371,
   323,   162,   322,   353,   273,   410,   274,   258,   407,   171,
   336,   416,     3,   271,   272,   270,   158,   146,   172,   173,
   174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
   184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
   398,   198,   231,   226,   226,   288,   246,   384,   160,   275,
   146,     1,   165,   nil,   146,   nil,   nil,   nil,   nil,   nil,
   nil,   198,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   297,   nil,   255,   293,   nil,   nil,   nil,   255,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   245,   341,   nil,   nil,
   385,   nil,   387,   nil,   282,   nil,   334,   nil,   nil,   nil,
   276,   315,   nil,   283,   333,   335,   319,   nil,   142,   140,
   136,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   193,   nil,   nil,
   124,   126,   127,   316,   360,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   400,   nil,   nil,   nil,   355,   nil,   nil,
   245,   nil,   nil,   nil,   nil,   142,   140,   358,   354,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   367,   nil,   nil,
   nil,   nil,   nil,   nil,   317,   nil,   nil,   nil,   nil,   nil,
   nil,   146,   198,   198,   nil,   nil,   nil,   nil,   326,   328,
   nil,   nil,   348,   nil,   348,   338,   351,   nil,   151,   344,
   nil,   nil,   nil,   155,   386,   nil,   nil,   nil,   402,   nil,
   nil,   393,   nil,   nil,   nil,   nil,   348,   357,   nil,   nil,
   nil,   nil,   nil,   198,   nil,   nil,   365,   366,   nil,   nil,
   403,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   391,
   nil,   142,   140,   nil,   nil,   348,   nil,   373,   nil,   nil,
   nil,   nil,   372,   nil,   nil,   146,   nil,   nil,   nil,   nil,
   nil,   nil,   146,   nil,   nil,   nil,   nil,   nil,   nil,   405,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   396,   nil,   nil,   nil,   nil,   nil,   nil,
   193,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   124,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   396,   nil,   nil,   nil,   nil,   nil,   nil,   419,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   421,
   nil,   423,   425 ]

racc_goto_check = [
     2,     4,    40,    10,    10,    10,    10,    32,    38,    96,
    65,    88,    35,    45,    73,    57,    48,    52,    13,    56,
    66,    47,     7,    55,    67,    66,    50,     8,     8,     8,
     8,    61,    61,    58,    10,    10,    10,    10,     6,    59,
    12,    12,    51,    55,    62,    49,    46,    53,    10,    10,
    10,    35,    45,    69,    70,    72,    10,    44,    75,    76,
    77,    10,    79,    83,    84,    48,    85,    39,    47,    12,
    56,    67,     3,    89,    90,    92,    93,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    73,    10,    12,    10,    10,    52,    12,    50,    94,    95,
    10,     1,     6,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    57,   nil,     4,    39,   nil,   nil,   nil,     4,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    35,    45,   nil,   nil,
    56,   nil,    56,   nil,    10,   nil,    57,   nil,   nil,   nil,
     2,    39,   nil,     2,    55,    55,    39,   nil,    32,    38,
    65,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
    10,    10,    10,    40,    57,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    96,   nil,   nil,   nil,    39,   nil,   nil,
    35,   nil,   nil,   nil,   nil,    32,    38,    39,    88,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,    10,    10,    10,   nil,   nil,   nil,   nil,     2,     2,
   nil,   nil,    10,   nil,    10,     4,    10,   nil,    10,     4,
   nil,   nil,   nil,    10,    39,   nil,   nil,   nil,    52,   nil,
   nil,    39,   nil,   nil,   nil,   nil,    10,    10,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,    10,    10,   nil,   nil,
    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,
   nil,    32,    38,   nil,   nil,    10,   nil,    12,   nil,   nil,
   nil,   nil,    10,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,    40,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   111,     0,    72,     1,   nil,    33,   -59,   -55,   nil,
    -9,   nil,   -17,   -90,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -44,   nil,   nil,  -110,   nil,   nil,   -43,   -70,
   -39,   nil,   nil,   nil,   -64,  -109,  -330,  -306,  -313,  -205,
  -224,  -288,   -91,  -149,   nil,   -87,  -183,   -95,  -259,  -159,
   nil,   -81,  -250,   nil,   nil,   -40,  -111,  -318,   nil,  -201,
  -285,   nil,  -203,  -245,   nil,  -202,  -261,  -184,   nil,  -181,
   nil,   nil,   nil,  -204,   -95,   -93,   nil,   nil,   -54,   -84,
   -83,   nil,   -82,     9,    40,   -51,  -153 ]

racc_goto_default = [
   nil,   nil,   395,   nil,   228,     5,     6,     7,     8,     9,
    11,    10,   330,   nil,    16,    40,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,   nil,
   nil,    41,    42,   121,   nil,   nil,   125,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   204,   nil,
   111,   nil,   205,   209,   207,   132,   nil,   nil,   131,   nil,
   nil,   137,   nil,   138,   139,   143,   237,   238,   239,   240,
   241,   244,   152,   154,    60,    61,    62,    65,   nil,   nil,
   nil,   157,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 95, :_reduce_1,
  1, 95, :_reduce_2,
  1, 95, :_reduce_none,
  1, 96, :_reduce_4,
  1, 99, :_reduce_5,
  3, 99, :_reduce_6,
  2, 99, :_reduce_7,
  1, 100, :_reduce_8,
  3, 100, :_reduce_9,
  1, 101, :_reduce_none,
  1, 102, :_reduce_11,
  3, 102, :_reduce_12,
  3, 102, :_reduce_13,
  3, 102, :_reduce_14,
  3, 102, :_reduce_15,
  1, 104, :_reduce_none,
  4, 104, :_reduce_17,
  3, 104, :_reduce_18,
  3, 104, :_reduce_19,
  3, 104, :_reduce_20,
  3, 104, :_reduce_21,
  3, 104, :_reduce_22,
  3, 104, :_reduce_23,
  3, 104, :_reduce_24,
  3, 104, :_reduce_25,
  3, 104, :_reduce_26,
  3, 104, :_reduce_27,
  2, 104, :_reduce_28,
  2, 104, :_reduce_29,
  3, 104, :_reduce_30,
  3, 104, :_reduce_31,
  3, 104, :_reduce_32,
  3, 104, :_reduce_33,
  3, 104, :_reduce_34,
  3, 104, :_reduce_35,
  2, 104, :_reduce_36,
  3, 104, :_reduce_37,
  3, 104, :_reduce_38,
  3, 104, :_reduce_39,
  3, 104, :_reduce_40,
  3, 104, :_reduce_41,
  3, 104, :_reduce_42,
  3, 104, :_reduce_43,
  1, 106, :_reduce_44,
  3, 106, :_reduce_45,
  1, 105, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 127, :_reduce_68,
  1, 127, :_reduce_69,
  5, 108, :_reduce_70,
  3, 108, :_reduce_71,
  6, 108, :_reduce_72,
  4, 108, :_reduce_73,
  1, 108, :_reduce_74,
  1, 112, :_reduce_75,
  2, 112, :_reduce_76,
  4, 135, :_reduce_77,
  3, 135, :_reduce_78,
  1, 135, :_reduce_79,
  3, 136, :_reduce_80,
  2, 134, :_reduce_81,
  3, 138, :_reduce_82,
  2, 138, :_reduce_83,
  2, 137, :_reduce_84,
  4, 137, :_reduce_85,
  2, 115, :_reduce_86,
  5, 140, :_reduce_87,
  4, 140, :_reduce_88,
  0, 141, :_reduce_none,
  2, 141, :_reduce_90,
  4, 141, :_reduce_91,
  3, 141, :_reduce_92,
  6, 116, :_reduce_93,
  5, 116, :_reduce_94,
  0, 142, :_reduce_none,
  4, 142, :_reduce_96,
  3, 142, :_reduce_97,
  5, 114, :_reduce_98,
  1, 143, :_reduce_99,
  2, 143, :_reduce_100,
  5, 144, :_reduce_101,
  4, 144, :_reduce_102,
  1, 145, :_reduce_103,
  1, 107, :_reduce_none,
  4, 107, :_reduce_105,
  1, 147, :_reduce_106,
  3, 147, :_reduce_107,
  3, 146, :_reduce_108,
  1, 103, :_reduce_109,
  6, 103, :_reduce_110,
  6, 103, :_reduce_111,
  5, 103, :_reduce_112,
  5, 103, :_reduce_113,
  6, 103, :_reduce_114,
  5, 103, :_reduce_115,
  4, 152, :_reduce_116,
  1, 153, :_reduce_117,
  1, 149, :_reduce_118,
  3, 149, :_reduce_119,
  1, 148, :_reduce_120,
  2, 148, :_reduce_121,
  1, 148, :_reduce_122,
  6, 113, :_reduce_123,
  2, 113, :_reduce_124,
  3, 154, :_reduce_125,
  3, 154, :_reduce_126,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 151, :_reduce_129,
  1, 151, :_reduce_130,
  3, 151, :_reduce_131,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  3, 156, :_reduce_135,
  3, 156, :_reduce_136,
  6, 117, :_reduce_137,
  7, 118, :_reduce_138,
  1, 162, :_reduce_139,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 163, :_reduce_none,
  2, 163, :_reduce_143,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  7, 119, :_reduce_146,
  6, 119, :_reduce_147,
  1, 165, :_reduce_148,
  3, 165, :_reduce_149,
  1, 167, :_reduce_150,
  1, 167, :_reduce_151,
  1, 167, :_reduce_152,
  1, 167, :_reduce_none,
  1, 168, :_reduce_154,
  3, 168, :_reduce_155,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 166, :_reduce_none,
  2, 166, :_reduce_159,
  1, 159, :_reduce_160,
  1, 159, :_reduce_161,
  1, 160, :_reduce_162,
  2, 160, :_reduce_163,
  4, 160, :_reduce_164,
  1, 139, :_reduce_165,
  3, 139, :_reduce_166,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  3, 173, :_reduce_171,
  1, 173, :_reduce_172,
  2, 174, :_reduce_173,
  2, 172, :_reduce_174,
  1, 175, :_reduce_175,
  4, 175, :_reduce_176,
  1, 111, :_reduce_177,
  1, 121, :_reduce_178,
  1, 121, :_reduce_179,
  1, 121, :_reduce_180,
  1, 121, :_reduce_181,
  3, 122, :_reduce_182,
  4, 122, :_reduce_183,
  2, 122, :_reduce_184,
  3, 122, :_reduce_185,
  4, 122, :_reduce_186,
  2, 122, :_reduce_187,
  3, 125, :_reduce_188,
  4, 125, :_reduce_189,
  2, 125, :_reduce_190,
  1, 176, :_reduce_191,
  3, 176, :_reduce_192,
  3, 177, :_reduce_193,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 178, :_reduce_197,
  1, 178, :_reduce_198,
  2, 179, :_reduce_199,
  1, 181, :_reduce_200,
  1, 183, :_reduce_201,
  1, 184, :_reduce_202,
  2, 182, :_reduce_203,
  1, 185, :_reduce_204,
  1, 186, :_reduce_205,
  2, 186, :_reduce_206,
  2, 180, :_reduce_207,
  2, 187, :_reduce_208,
  2, 187, :_reduce_209,
  3, 97, :_reduce_210,
  0, 189, :_reduce_none,
  1, 189, :_reduce_none,
  0, 188, :_reduce_213,
  2, 188, :_reduce_214,
  4, 188, :_reduce_215,
  1, 120, :_reduce_216,
  3, 120, :_reduce_217,
  5, 120, :_reduce_218,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 128, :_reduce_221,
  1, 131, :_reduce_222,
  1, 129, :_reduce_223,
  1, 130, :_reduce_224,
  1, 124, :_reduce_225,
  1, 123, :_reduce_226,
  1, 126, :_reduce_227,
  0, 133, :_reduce_none,
  1, 133, :_reduce_229,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  0, 98, :_reduce_250 ]

racc_reduce_n = 251

racc_shift_n = 432

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :HIGH => 87,
  :CALL => 88,
  :LISTSTART => 89,
  :SPLAT => 90,
  :MODULO => 91,
  :TITLE_COLON => 92,
  :CASE_COLON => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 87)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_29(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_30(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_31(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_32(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_33(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_34(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_35(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_36(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_37(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_38(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_39(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_40(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_41(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_42(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 130)
  def _reduce_43(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_45(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 173)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_73(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_75(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_76(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_78(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_79(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_80(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_81(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_82(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 232)
  def _reduce_83(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 236)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 237)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 247)
  def _reduce_86(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_88(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_90(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_91(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_92(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_94(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'egrammar.ra', 297)
  def _reduce_96(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_97(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_98(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_100(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_102(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_105(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_109(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 381)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 402)
  def _reduce_113(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 428)
  def _reduce_115(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_116(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_117(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_120(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_121(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_122(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 458)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 499)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 503)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 513)
  def _reduce_137(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 527)
  def _reduce_138(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 537)
  def _reduce_139(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_143(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_148(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_149(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_151(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_152(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_154(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_155(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_160(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_161(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_162(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_164(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_165(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_166(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_171(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_172(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_173(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_174(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_175(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_176(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_177(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_178(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_179(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_180(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_182(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_183(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_184(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_185(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_186(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_187(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_188(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_189(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_190(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_191(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_192(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_193(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_197(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_198(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_199(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_200(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_202(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_203(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_204(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_205(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_206(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_207(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_208(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_209(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_210(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 211 omitted

# reduce 212 omitted

module_eval(<<'.,.,', 'egrammar.ra', 731)
  def _reduce_213(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 732)
  def _reduce_214(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 733)
  def _reduce_215(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 736)
  def _reduce_216(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_217(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 738)
  def _reduce_218(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'egrammar.ra', 744)
  def _reduce_221(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 745)
  def _reduce_222(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 746)
  def _reduce_223(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 747)
  def _reduce_224(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 748)
  def _reduce_225(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 753)
  def _reduce_226(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 756)
  def _reduce_227(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 228 omitted

module_eval(<<'.,.,', 'egrammar.ra', 762)
  def _reduce_229(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

module_eval(<<'.,.,', 'egrammar.ra', 789)
  def _reduce_250(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
