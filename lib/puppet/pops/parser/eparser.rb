#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 805)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'62,65,134,294,63,56,284,58,-248,85,-134,-246,241,143,-132,-244,-235',
'284,133,-247,324,-249,132,108,14,112,381,107,279,280,42,263,49,242,51',
'46,262,50,75,71,291,44,74,47,48,295,144,72,13,111,-248,73,-134,-246',
'11,12,-132,-244,-235,92,91,-247,76,-249,87,88,129,265,43,80,266,86,70',
'66,251,68,69,67,268,267,52,53,55,54,62,65,358,57,63,56,405,58,425,93',
'133,284,241,85,132,241,133,376,133,375,132,261,132,391,14,72,260,108',
'72,112,42,107,49,242,51,46,242,50,75,71,283,44,74,47,48,284,319,72,13',
'339,234,73,360,111,11,12,241,293,241,133,62,65,76,132,63,56,133,58,43',
'72,132,72,70,66,133,68,69,242,132,242,52,53,55,54,14,62,65,57,362,63',
'42,277,49,323,51,46,311,50,75,71,78,44,74,47,48,312,293,72,13,259,376',
'73,375,367,11,12,81,83,82,84,368,369,76,258,255,255,373,313,43,377,379',
'121,70,66,233,68,69,291,293,291,52,53,55,54,62,65,387,57,63,56,388,58',
'423,85,344,319,341,396,224,196,80,398,319,163,400,160,293,108,14,112',
'158,107,338,403,42,121,49,355,51,46,291,50,75,71,320,44,74,47,48,122',
'408,72,13,111,379,73,410,411,11,12,412,89,90,92,91,413,76,414,87,88',
'121,416,43,417,118,86,70,66,241,68,69,80,77,426,52,53,55,54,62,65,427',
'57,63,56,428,58,421,93,429,430,,,,,,,,,,,,,14,,,,,,42,,49,,51,46,,50',
'75,71,,44,74,47,48,,,72,13,,,73,,85,11,12,,,,,,,76,,,,,108,43,112,,107',
'70,66,,68,69,,,,52,53,55,54,62,65,,57,63,56,,58,328,111,,,,,,,,,,,,',
',,14,,,,,,42,86,49,,51,46,,50,75,71,,44,74,47,48,,,72,13,,,73,,,11,12',
',,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,',
'42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76',
',63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114',
',50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,',
',,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44',
'74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69',
',,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,',
',73,,85,11,12,,,,,,,76,,,,,108,43,112,,107,70,66,,68,69,,,,52,53,55',
'54,62,65,,57,63,56,,58,419,111,,,,,,,,,,,,,,,14,,,,,,42,86,49,,51,46',
',50,75,71,,44,74,47,48,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58',
'43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,46,,50,75,71',
',44,74,47,48,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66',
',68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,',
'72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52',
'53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,',
'11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,',
',57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62',
'65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49',
',51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56',
',58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,128,,50,75',
'71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66',
',68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,',
'72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52',
'53,55,54,14,,,57,,,198,219,209,220,51,210,222,211,207,205,,200,217,',
',,,72,13,223,218,216,,,11,12,,,,,,,76,,,,,221,199,,,,70,66,,68,69,,',
',212,213,215,214,62,65,,57,63,56,,58,,85,,,,,,,,,,,,,,108,14,112,,107',
',,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,111,,73,,,11,12,,89,90,92',
'91,,76,,87,88,,,43,,,86,70,66,,68,69,,,,52,53,55,54,62,65,,57,63,56',
',58,317,93,,,,85,,,,,,,,,,,14,,,108,,112,42,107,49,,51,46,,50,75,71',
',44,74,47,48,,,72,13,,,73,,111,11,12,,,,,62,65,76,,63,56,147,58,43,',
',,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44',
'74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,149,58,43,,,,70,66,,68',
'69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13',
',,73,,85,11,12,,,,,,,76,,,,,108,43,112,,107,70,66,,68,69,,,,52,53,55',
'54,62,65,,57,63,56,,58,152,111,,,,85,,,,,,,,,,,14,,,108,,112,42,107',
'49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,111,11,12,,,,,62,65,76,',
'63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114',
',50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,348,58,43',
',,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44',
'74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69',
',,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,',
',73,,,11,12,,,,,62,65,76,,63,56,,162,43,,,,70,66,,68,69,,,,52,53,55',
'54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12',
',,,,62,65,76,,63,56,349,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57',
',,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76',
',63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,46',
',50,75,71,,44,74,47,48,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58',
'43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71',
',44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68',
'69,,,,52,53,55,54,14,,,57,,,42,,49,,51,46,,50,75,71,,44,74,47,48,,,72',
'13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53',
'55,54,14,,,57,,,42,,49,,51,46,,50,75,71,,44,74,47,48,,,72,13,,,73,,',
'11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,',
',57,,,42,,49,,51,46,,50,75,71,,44,74,47,48,,,72,13,,,73,,,11,12,,,,',
'62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,',
'49,,51,46,,50,75,71,,44,74,47,48,,,72,13,,,73,,,11,12,,,,,62,65,76,',
'63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,46',
',50,75,71,,44,74,47,48,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58',
'43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71',
',44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68',
'69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13',
',,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55',
'54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12',
',,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,',
'42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76',
',63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114',
',50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,',
',,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44',
'74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69',
',,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,',
',73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54',
'14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,',
',62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42',
',49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63',
'56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50',
'75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70',
'66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,',
',,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,',
'52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73',
',,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14',
',,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62',
'65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49',
',51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56',
',58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75',
'71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66',
',68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,',
'72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52',
'53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,',
'11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,',
',57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62',
'65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49',
',51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56',
',58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75',
'71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66',
',68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,',
'72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52',
'53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,',
'11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,',
',57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,,,76',
',,,,,43,,,195,70,66,,68,69,,,,52,53,55,54,62,65,,57,63,56,,58,351,,',
',,,,,,,,,,,,,14,,,,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73',
',,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14',
',,57,,,198,219,209,220,51,210,222,211,207,205,,200,217,,,,,72,13,223',
'218,216,,,11,12,,,,,,,76,,,,,221,199,,,,70,66,,68,69,,,,212,213,215',
'214,62,65,,57,63,56,,58,,,,,,,,,,,,,,,,,14,,,,,,42,,49,,51,114,,50,75',
'71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66',
',68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,',
'72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52',
'53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,',
'11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,',
',57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62',
'65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49',
',51,46,,50,75,71,,44,74,47,48,,,72,13,,,73,,,11,12,,,,,62,65,76,,63',
'56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50',
'75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70',
'66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,',
',,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,',
'52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73',
',,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14',
'231,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,',
',,,76,,,,,,43,,,,70,66,,68,69,,,,52,53,55,54,62,65,,57,63,56,,58,382',
',,,,,,,,,,,,,,,14,,,,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73',
',,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14',
',,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62',
'65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,246,,57,,,42,',
'49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63',
'56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50',
'75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70',
'66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,',
',,,72,13,,,73,,,11,12,,,,,,,76,,,,,,43,,,,70,66,,68,69,,,,52,53,55,54',
'62,65,,57,63,56,,58,152,,,,,,,,,,,,,,,,14,,,,,,42,,49,,51,46,,50,75',
'71,,44,74,47,48,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70',
'66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,46,,50,75,71,,44,74,47',
'48,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,',
',,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,',
'73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54',
'14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,',
',62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42',
',49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63',
'56,,58,43,,,,70,66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50',
'75,71,,44,74,,,,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70',
'66,,68,69,,,,52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,',
',,,72,13,,,73,,,11,12,,,,,62,65,76,,63,56,,58,43,,,,70,66,,68,69,,,',
'52,53,55,54,14,,,57,,,42,,49,,51,114,,50,75,71,,44,74,,,,,72,13,,,73',
',,11,12,,,,,,,76,,,,,,43,,,,70,66,,68,69,,,,52,53,55,54,62,65,,57,63',
'56,,58,326,85,,,,,,,,,,,,,,108,14,112,,107,,,42,,49,,51,46,,50,75,71',
',44,74,47,48,,,72,13,111,,73,,,11,12,,,,,,,76,,87,88,,,43,,,86,70,66',
',68,69,,,85,52,53,55,54,,,,57,104,105,106,101,96,108,,112,,107,,,97',
'99,98,100,,,,,,,,,,,,,,,,111,,,,103,102,,85,89,90,92,91,94,95,,87,88',
',,101,96,108,86,112,,107,,85,97,99,98,100,264,,,,104,105,106,101,96',
'108,,112,93,107,,111,97,99,98,100,102,,,89,90,92,91,94,95,,87,88,,,',
'111,,86,,103,102,,,89,90,92,91,94,95,,87,88,85,,109,,,86,,93,,104,105',
'106,101,96,108,,112,,107,,,97,99,98,100,,,93,,,,,,,,,,,,,111,,,,103',
'102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104,105,106,101,96,108,,112',
',107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94',
'95,85,87,88,,,,,,86,104,105,106,101,96,108,,112,,107,,,97,99,98,100',
',,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86',
'104,105,106,101,96,108,,112,,107,,,97,99,98,100,,,,,,93,,,,,,,,,,111',
',,,103,102,,,89,90,92,91,94,95,,87,88,85,,250,,,86,,,,104,105,106,101',
'96,108,,112,,107,,,97,99,98,100,,,93,,,,,,,,,,,,,111,,,,103,102,,,89',
'90,92,91,94,95,85,87,88,,,,,,86,104,105,106,101,96,108,,112,,107,,,97',
'99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87',
'88,,,,,,86,104,105,106,101,96,108,,112,,107,,,97,99,98,100,,,,,,93,',
',,,,,,,,111,,,,103,102,,85,89,90,92,91,94,95,,87,88,,,,,108,86,112,',
'107,,85,,249,,,,279,280,,104,105,106,101,96,108,,112,93,107,,111,97',
'99,98,100,,,,89,90,92,91,94,95,,87,88,,,,111,,86,,103,102,,,89,90,92',
'91,94,95,,87,88,85,,248,,,86,,93,,104,105,106,101,96,108,,112,,107,',
',97,99,98,100,,,93,,,,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,,87',
'88,85,,247,,,86,,,,104,105,106,101,96,108,,112,,107,,,97,99,98,100,',
',93,,,,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86',
'104,105,106,101,96,108,,112,,107,,,97,99,98,100,,,,,,93,,,,,,,,,,111',
',,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104,105,106,101,96,108',
',112,,107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92',
'91,94,95,85,87,88,,,,,,86,104,105,106,101,96,108,,112,,107,,,97,99,98',
'100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,285',
',,86,104,105,106,101,96,108,,112,,107,,,97,99,98,100,,,,,,93,,,,,,,',
',,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104,105,106,101',
'96,108,,112,,107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89',
'90,92,91,94,95,,87,88,,85,,109,,86,264,,,,104,105,106,101,96,108,,112',
',107,,,97,99,98,100,,93,,,,,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94',
'95,85,87,88,,,,,,86,104,105,106,101,96,108,289,112,85,107,,,97,99,98',
'100,,,,,,93,108,,112,,107,,,,,111,,,,103,102,,,89,90,92,91,94,95,,87',
'88,111,,,,,86,,85,89,90,92,91,94,95,,87,88,,,,96,108,86,112,85,107,',
'93,97,,,,,,,,,96,108,,112,,107,,93,97,,111,,,,,,,,89,90,92,91,94,95',
',87,88,111,,,,,86,,85,89,90,92,91,94,95,,87,88,,,,96,108,86,112,85,107',
',93,97,,,,,,,,,96,108,,112,,107,,93,97,,111,,,,,,,,89,90,92,91,94,95',
',87,88,111,,,,,86,,85,89,90,92,91,94,95,,87,88,,,101,96,108,86,112,',
'107,,93,97,99,98,100,,,,,,,,,,,,,93,,,111,,,,,,,,89,90,92,91,94,95,85',
'87,88,,,,,,86,104,105,106,101,96,108,,112,,107,,229,97,99,98,100,,,',
',,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104',
'105,106,101,96,108,,112,,107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,',
'103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104,105,106,101,96,108',
',112,,107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92',
'91,94,95,85,87,88,,,,,,86,104,105,106,101,96,108,,112,85,107,,,97,99',
'98,100,,,,,,93,108,,112,,107,,,62,65,111,,63,,103,102,,,89,90,92,91',
'94,95,,87,88,111,,,62,65,86,,63,62,65,92,91,63,,,87,88,62,65,,143,63',
'86,140,,,,93,,,,,,,,,,,,,,,143,76,93,140,85,143,,,140,,,144,66,85,143',
',,140,108,,112,,107,76,,,,108,76,112,,107,,144,66,,,76,144,66,,,,,111',
',,144,66,,,,,111,,,,,,87,88,,,,,,86,,87,88,,303,219,302,220,86,300,222',
'304,298,297,,299,301,,,,,,,223,218,305,303,219,302,220,,300,222,304',
'298,297,,299,301,,,221,306,,,223,218,305,,,,,,,309,310,308,307,,,,,',
'221,306,,,,,,,,,,,,309,310,308,307,303,219,302,220,,300,222,304,298',
'297,,299,301,,,,,,,223,218,305,,,,,,,,,,,,,,,,221,306,,,,,,,,,,,,309',
'310,308,307' ]
        racc_action_table = arr = ::Array.new(7093, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,47,208,0,0,245,0,212,174,207,214,243,259,205,216,217,329,114,215',
'245,213,114,174,0,174,329,174,355,355,0,148,0,243,0,0,148,0,0,0,201',
'0,0,0,0,208,259,0,0,174,212,0,207,214,0,0,205,216,217,174,174,215,0',
'213,174,174,46,151,0,164,151,174,0,0,128,0,0,0,156,156,0,0,0,0,411,411',
'286,0,411,411,372,411,411,174,46,372,319,171,46,121,338,326,128,326',
'338,146,128,338,411,319,146,171,121,171,411,171,411,319,411,411,121',
'411,411,411,170,411,411,411,411,170,276,411,411,255,121,411,290,171',
'411,411,160,202,255,49,4,4,411,49,4,4,209,4,411,160,209,255,411,411',
'210,411,411,160,210,255,411,411,411,411,4,158,158,411,292,158,4,160',
'4,244,4,4,226,4,4,4,4,4,4,4,4,228,296,4,4,138,373,4,373,314,4,4,7,7',
'7,7,316,318,4,136,135,130,325,230,4,327,328,231,4,4,120,4,4,332,333',
'334,4,4,4,4,410,410,335,4,410,410,336,410,410,179,257,340,256,342,110',
'108,79,354,235,77,357,67,359,179,410,179,66,179,253,366,410,367,410',
'282,410,410,252,410,410,410,241,410,410,410,410,41,376,410,410,179,377',
'410,379,380,410,410,384,179,179,179,179,385,410,386,179,179,40,392,410',
'393,39,179,410,410,242,410,410,5,1,415,410,410,410,410,408,408,418,410',
'408,408,420,408,408,179,422,424,,,,,,,,,,,,,408,,,,,,408,,408,,408,408',
',408,408,408,,408,408,408,408,,,408,408,,,408,,173,408,408,,,,,,,408',
',,,,173,408,173,,173,408,408,,408,408,,,,408,408,408,408,248,248,,408',
'248,248,,248,248,173,,,,,,,,,,,,,,,248,,,,,,248,173,248,,248,248,,248',
'248,248,,248,248,248,248,,,248,248,,,248,,,248,248,,,,,11,11,248,,11',
'11,,11,248,,,,248,248,,248,248,,,,248,248,248,248,11,,,248,,,11,,11',
',11,11,,11,11,11,,11,11,,,,,11,11,,,11,,,11,11,,,,,12,12,11,,12,12,',
'12,11,,,,11,11,,11,11,,,,11,11,11,11,12,,,11,,,12,,12,,12,12,,12,12',
'12,,12,12,,,,,12,12,,,12,,,12,12,,,,,13,13,12,,13,13,,13,12,,,,12,12',
',12,12,,,,12,12,12,12,13,,,12,,,13,,13,,13,13,,13,13,13,,13,13,,,,,13',
'13,,,13,,,13,13,,,,,14,14,13,,14,14,,14,13,,,,13,13,,13,13,,,,13,13',
'13,13,14,,,13,,,14,,14,,14,14,,14,14,14,,14,14,,,,,14,14,,,14,,172,14',
'14,,,,,,,14,,,,,172,14,172,,172,14,14,,14,14,,,,14,14,14,14,396,396',
',14,396,396,,396,396,172,,,,,,,,,,,,,,,396,,,,,,396,172,396,,396,396',
',396,396,396,,396,396,396,396,,,396,396,,,396,,,396,396,,,,,388,388',
'396,,388,388,,388,396,,,,396,396,,396,396,,,,396,396,396,396,388,,,396',
',,388,,388,,388,388,,388,388,388,,388,388,388,388,,,388,388,,,388,,',
'388,388,,,,,375,375,388,,375,375,,375,388,,,,388,388,,388,388,,,,388',
'388,388,388,375,,,388,,,375,,375,,375,375,,375,375,375,,375,375,,,,',
'375,375,,,375,,,375,375,,,,,42,42,375,,42,42,,42,375,,,,375,375,,375',
'375,,,,375,375,375,375,42,,,375,,,42,,42,,42,42,,42,42,42,,42,42,,,',
',42,42,,,42,,,42,42,,,,,43,43,42,,43,43,,43,42,,,,42,42,,42,42,,,,42',
'42,42,42,43,,,42,,,43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43',
'43,,,,,44,44,43,,44,44,,44,43,,,,43,43,,43,43,,,,43,43,43,43,44,,,43',
',,44,,44,,44,44,,44,44,44,,44,44,,,,,44,44,,,44,,,44,44,,,,,45,45,44',
',45,45,,45,44,,,,44,44,,44,44,,,,44,44,44,44,45,,,44,,,45,,45,,45,45',
',45,45,45,,45,45,,,,,45,45,,,45,,,45,45,,,,,249,249,45,,249,249,,249',
'45,,,,45,45,,45,45,,,,45,45,45,45,249,,,45,,,249,,249,,249,249,,249',
'249,249,,249,249,,,,,249,249,,,249,,,249,249,,,,,250,250,249,,250,250',
',250,249,,,,249,249,,249,249,,,,249,249,249,249,250,,,249,,,250,250',
'250,250,250,250,250,250,250,250,,250,250,,,,,250,250,250,250,250,,,250',
'250,,,,,,,250,,,,,250,250,,,,250,250,,250,250,,,,250,250,250,250,251',
'251,,250,251,251,,251,,180,,,,,,,,,,,,,,180,251,180,,180,,,251,,251',
',251,251,,251,251,251,,251,251,,,,,251,251,180,,251,,,251,251,,180,180',
'180,180,,251,,180,180,,,251,,,180,251,251,,251,251,,,,251,251,251,251',
'233,233,,251,233,233,,233,233,180,,,,116,,,,,,,,,,,233,,,116,,116,233',
'116,233,,233,233,,233,233,233,,233,233,233,233,,,233,233,,,233,,116',
'233,233,,,,,56,56,233,,56,56,56,56,233,,,,233,233,,233,233,,,,233,233',
'233,233,56,,,233,,,56,,56,,56,56,,56,56,56,,56,56,,,,,56,56,,,56,,,56',
'56,,,,,57,57,56,,57,57,57,57,56,,,,56,56,,56,56,,,,56,56,56,56,57,,',
'56,,,57,,57,,57,57,,57,57,57,,57,57,,,,,57,57,,,57,,115,57,57,,,,,,',
'57,,,,,115,57,115,,115,57,57,,57,57,,,,57,57,57,57,58,58,,57,58,58,',
'58,58,115,,,,113,,,,,,,,,,,58,,,113,,113,58,113,58,,58,58,,58,58,58',
',58,58,,,,,58,58,,,58,,113,58,58,,,,,64,64,58,,64,64,,64,58,,,,58,58',
',58,58,,,,58,58,58,58,64,,,58,,,64,,64,,64,64,,64,64,64,,64,64,,,,,64',
'64,,,64,,,64,64,,,,,260,260,64,,260,260,260,260,64,,,,64,64,,64,64,',
',,64,64,64,64,260,,,64,,,260,,260,,260,260,,260,260,260,,260,260,,,',
',260,260,,,260,,,260,260,,,,,358,358,260,,358,358,,358,260,,,,260,260',
',260,260,,,,260,260,260,260,358,,,260,,,358,,358,,358,358,,358,358,358',
',358,358,,,,,358,358,,,358,,,358,358,,,,,69,69,358,,69,69,,69,358,,',
',358,358,,358,358,,,,358,358,358,358,69,,,358,,,69,,69,,69,69,,69,69',
'69,,69,69,,,,,69,69,,,69,,,69,69,,,,,262,262,69,,262,262,262,262,69',
',,,69,69,,69,69,,,,69,69,69,69,262,,,69,,,262,,262,,262,262,,262,262',
'262,,262,262,,,,,262,262,,,262,,,262,262,,,,,78,78,262,,78,78,,78,262',
',,,262,262,,262,262,,,,262,262,262,262,78,,,262,,,78,,78,,78,78,,78',
'78,78,,78,78,78,78,,,78,78,,,78,,,78,78,,,,,264,264,78,,264,264,,264',
'78,,,,78,78,,78,78,,,,78,78,78,78,264,,,78,,,264,,264,,264,264,,264',
'264,264,,264,264,,,,,264,264,,,264,,,264,264,,,,,80,80,264,,80,80,,80',
'264,,,,264,264,,264,264,,,,264,264,264,264,80,,,264,,,80,,80,,80,80',
',80,80,80,,80,80,80,80,,,80,80,,,80,,,80,80,,,,,81,81,80,,81,81,,81',
'80,,,,80,80,,80,80,,,,80,80,80,80,81,,,80,,,81,,81,,81,81,,81,81,81',
',81,81,81,81,,,81,81,,,81,,,81,81,,,,,82,82,81,,82,82,,82,81,,,,81,81',
',81,81,,,,81,81,81,81,82,,,81,,,82,,82,,82,82,,82,82,82,,82,82,82,82',
',,82,82,,,82,,,82,82,,,,,83,83,82,,83,83,,83,82,,,,82,82,,82,82,,,,82',
'82,82,82,83,,,82,,,83,,83,,83,83,,83,83,83,,83,83,83,83,,,83,83,,,83',
',,83,83,,,,,84,84,83,,84,84,,84,83,,,,83,83,,83,83,,,,83,83,83,83,84',
',,83,,,84,,84,,84,84,,84,84,84,,84,84,84,84,,,84,84,,,84,,,84,84,,,',
',85,85,84,,85,85,,85,84,,,,84,84,,84,84,,,,84,84,84,84,85,,,84,,,85',
',85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85,,,85,85,,,,,86,86,85,,86',
'86,,86,85,,,,85,85,,85,85,,,,85,85,85,85,86,,,85,,,86,,86,,86,86,,86',
'86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,,87,87,86,,87,87,,87,86,,,,86',
'86,,86,86,,,,86,86,86,86,87,,,86,,,87,,87,,87,87,,87,87,87,,87,87,,',
',,87,87,,,87,,,87,87,,,,,88,88,87,,88,88,,88,87,,,,87,87,,87,87,,,,87',
'87,87,87,88,,,87,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88',
'88,,,,,89,89,88,,89,89,,89,88,,,,88,88,,88,88,,,,88,88,88,88,89,,,88',
',,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,,90,90,89',
',90,90,,90,89,,,,89,89,,89,89,,,,89,89,89,89,90,,,89,,,90,,90,,90,90',
',90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,91,91,90,,91,91,,91,90,',
',,90,90,,90,90,,,,90,90,90,90,91,,,90,,,91,,91,,91,91,,91,91,91,,91',
'91,,,,,91,91,,,91,,,91,91,,,,,92,92,91,,92,92,,92,91,,,,91,91,,91,91',
',,,91,91,91,91,92,,,91,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,',
'92,,,92,92,,,,,93,93,92,,93,93,,93,92,,,,92,92,,92,92,,,,92,92,92,92',
'93,,,92,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,',
'94,94,93,,94,94,,94,93,,,,93,93,,93,93,,,,93,93,93,93,94,,,93,,,94,',
'94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,95,95,94,,95,95',
',95,94,,,,94,94,,94,94,,,,94,94,94,94,95,,,94,,,95,,95,,95,95,,95,95',
'95,,95,95,,,,,95,95,,,95,,,95,95,,,,,96,96,95,,96,96,,96,95,,,,95,95',
',95,95,,,,95,95,95,95,96,,,95,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96',
'96,,,96,,,96,96,,,,,97,97,96,,97,97,,97,96,,,,96,96,,96,96,,,,96,96',
'96,96,97,,,96,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97',
',,,,98,98,97,,98,98,,98,97,,,,97,97,,97,97,,,,97,97,97,97,98,,,97,,',
'98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,99,99,98,',
'99,99,,99,98,,,,98,98,,98,98,,,,98,98,98,98,99,,,98,,,99,,99,,99,99',
',99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,100,100,99,,100,100,,100',
'99,,,,99,99,,99,99,,,,99,99,99,99,100,,,99,,,100,,100,,100,100,,100',
'100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,,101,101,100,,101,101',
',101,100,,,,100,100,,100,100,,,,100,100,100,100,101,,,100,,,101,,101',
',101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,101,,,,,102,102',
'101,,102,102,,102,101,,,,101,101,,101,101,,,,101,101,101,101,102,,,101',
',,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,,,102,,,102,102',
',,,,103,103,102,,103,103,,103,102,,,,102,102,,102,102,,,,102,102,102',
'102,103,,,102,,,103,,103,,103,103,,103,103,103,,103,103,,,,,103,103',
',,103,,,103,103,,,,,104,104,103,,104,104,,104,103,,,,103,103,,103,103',
',,,103,103,103,103,104,,,103,,,104,,104,,104,104,,104,104,104,,104,104',
',,,,104,104,,,104,,,104,104,,,,,105,105,104,,105,105,,105,104,,,,104',
'104,,104,104,,,,104,104,104,104,105,,,104,,,105,,105,,105,105,,105,105',
'105,,105,105,,,,,105,105,,,105,,,105,105,,,,,106,106,105,,106,106,,106',
'105,,,,105,105,,105,105,,,,105,105,105,105,106,,,105,,,106,,106,,106',
'106,,106,106,106,,106,106,,,,,106,106,,,106,,,106,106,,,,,107,107,106',
',107,107,,107,106,,,,106,106,,106,106,,,,106,106,106,106,107,,,106,',
',107,,107,,107,107,,107,107,107,,107,107,,,,,107,107,,,107,,,107,107',
',,,,,,107,,,,,,107,,,107,107,107,,107,107,,,,107,107,107,107,266,266',
',107,266,266,,266,266,,,,,,,,,,,,,,,,266,,,,,,266,,266,,266,266,,266',
'266,266,,266,266,,,,,266,266,,,266,,,266,266,,,,,109,109,266,,109,109',
',109,266,,,,266,266,,266,266,,,,266,266,266,266,109,,,266,,,109,109',
'109,109,109,109,109,109,109,109,,109,109,,,,,109,109,109,109,109,,,109',
'109,,,,,,,109,,,,,109,109,,,,109,109,,109,109,,,,109,109,109,109,271',
'271,,109,271,271,,271,,,,,,,,,,,,,,,,,271,,,,,,271,,271,,271,271,,271',
'271,271,,271,271,,,,,271,271,,,271,,,271,271,,,,,111,111,271,,111,111',
',111,271,,,,271,271,,271,271,,,,271,271,271,271,111,,,271,,,111,,111',
',111,111,,111,111,111,,111,111,,,,,111,111,,,111,,,111,111,,,,,112,112',
'111,,112,112,,112,111,,,,111,111,,111,111,,,,111,111,111,111,112,,,111',
',,112,,112,,112,112,,112,112,112,,112,112,,,,,112,112,,,112,,,112,112',
',,,,200,200,112,,200,200,,200,112,,,,112,112,,112,112,,,,112,112,112',
'112,200,,,112,,,200,,200,,200,200,,200,200,200,,200,200,,,,,200,200',
',,200,,,200,200,,,,,341,341,200,,341,341,,341,200,,,,200,200,,200,200',
',,,200,200,200,200,341,,,200,,,341,,341,,341,341,,341,341,341,,341,341',
'341,341,,,341,341,,,341,,,341,341,,,,,199,199,341,,199,199,,199,341',
',,,341,341,,341,341,,,,341,341,341,341,199,,,341,,,199,,199,,199,199',
',199,199,199,,199,199,,,,,199,199,,,199,,,199,199,,,,,198,198,199,,198',
'198,,198,199,,,,199,199,,199,199,,,,199,199,199,199,198,,,199,,,198',
',198,,198,198,,198,198,198,,198,198,,,,,198,198,,,198,,,198,198,,,,',
'195,195,198,,195,195,,195,198,,,,198,198,,198,198,,,,198,198,198,198',
'195,,,198,,,195,,195,,195,195,,195,195,195,,195,195,,,,,195,195,,,195',
',,195,195,,,,,118,118,195,,118,118,,118,195,,,,195,195,,195,195,,,,195',
'195,195,195,118,118,,195,,,118,,118,,118,118,,118,118,118,,118,118,',
',,,118,118,,,118,,,118,118,,,,,,,118,,,,,,118,,,,118,118,,118,118,,',
',118,118,118,118,330,330,,118,330,330,,330,330,,,,,,,,,,,,,,,,330,,',
',,,330,,330,,330,330,,330,330,330,,330,330,,,,,330,330,,,330,,,330,330',
',,,,295,295,330,,295,295,,295,330,,,,330,330,,330,330,,,,330,330,330',
'330,295,,,330,,,295,,295,,295,295,,295,295,295,,295,295,,,,,295,295',
',,295,,,295,295,,,,,122,122,295,,122,122,,122,295,,,,295,295,,295,295',
',,,295,295,295,295,122,122,,295,,,122,,122,,122,122,,122,122,122,,122',
'122,,,,,122,122,,,122,,,122,122,,,,,284,284,122,,284,284,,284,122,,',
',122,122,,122,122,,,,122,122,122,122,284,,,122,,,284,,284,,284,284,',
'284,284,284,,284,284,,,,,284,284,,,284,,,284,284,,,,,285,285,284,,285',
'285,,285,284,,,,284,284,,284,284,,,,284,284,284,284,285,,,284,,,285',
',285,,285,285,,285,285,285,,285,285,,,,,285,285,,,285,,,285,285,,,,',
',,285,,,,,,285,,,,285,285,,285,285,,,,285,285,285,285,162,162,,285,162',
'162,,162,162,,,,,,,,,,,,,,,,162,,,,,,162,,162,,162,162,,162,162,162',
',162,162,162,162,,,162,162,,,162,,,162,162,,,,,159,159,162,,159,159',
',159,162,,,,162,162,,162,162,,,,162,162,162,162,159,,,162,,,159,,159',
',159,159,,159,159,159,,159,159,159,159,,,159,159,,,159,,,159,159,,,',
',291,291,159,,291,291,,291,159,,,,159,159,,159,159,,,,159,159,159,159',
'291,,,159,,,291,,291,,291,291,,291,291,291,,291,291,,,,,291,291,,,291',
',,291,291,,,,,129,129,291,,129,129,,129,291,,,,291,291,,291,291,,,,291',
'291,291,291,129,,,291,,,129,,129,,129,129,,129,129,129,,129,129,,,,',
'129,129,,,129,,,129,129,,,,,323,323,129,,323,323,,323,129,,,,129,129',
',129,129,,,,129,129,129,129,323,,,129,,,323,,323,,323,323,,323,323,323',
',323,323,,,,,323,323,,,323,,,323,323,,,,,320,320,323,,320,320,,320,323',
',,,323,323,,323,323,,,,323,323,323,323,320,,,323,,,320,,320,,320,320',
',320,320,320,,320,320,,,,,320,320,,,320,,,320,320,,,,,294,294,320,,294',
'294,,294,320,,,,320,320,,320,320,,,,320,320,320,320,294,,,320,,,294',
',294,,294,294,,294,294,294,,294,294,,,,,294,294,,,294,,,294,294,,,,',
'313,313,294,,313,313,,313,294,,,,294,294,,294,294,,,,294,294,294,294',
'313,,,294,,,313,,313,,313,313,,313,313,313,,313,313,,,,,313,313,,,313',
',,313,313,,,,,,,313,,,,,,313,,,,313,313,,313,313,,,,313,313,313,313',
'247,247,,313,247,247,,247,247,176,,,,,,,,,,,,,,176,247,176,,176,,,247',
',247,,247,247,,247,247,247,,247,247,247,247,,,247,247,176,,247,,,247',
'247,,,,,,,247,,176,176,,,247,,,176,247,247,,247,247,,,145,247,247,247',
'247,,,,247,145,145,145,145,145,145,,145,,145,,,145,145,145,145,,,,,',
',,,,,,,,,,145,,,,145,145,,188,145,145,145,145,145,145,,145,145,,,188',
'188,188,145,188,,188,,150,188,188,188,188,150,,,,150,150,150,150,150',
'150,,150,145,150,,188,150,150,150,150,188,,,188,188,188,188,188,188',
',188,188,,,,150,,188,,150,150,,,150,150,150,150,150,150,,150,150,10',
',10,,,150,,188,,10,10,10,10,10,10,,10,,10,,,10,10,10,10,,,150,,,,,,',
',,,,,,10,,,,10,10,,,10,10,10,10,10,10,154,10,10,,,,,,10,154,154,154',
'154,154,154,,154,,154,,,154,154,154,154,,,,,,10,,,,,,,,,,154,,,,154',
'154,,,154,154,154,154,154,154,371,154,154,,,,,,154,371,371,371,371,371',
'371,,371,,371,,,371,371,371,371,,,,,,154,,,,,,,,,,371,,,,371,371,,,371',
'371,371,371,371,371,365,371,371,,,,,,371,365,365,365,365,365,365,,365',
',365,,,365,365,365,365,,,,,,371,,,,,,,,,,365,,,,365,365,,,365,365,365',
'365,365,365,,365,365,127,,127,,,365,,,,127,127,127,127,127,127,,127',
',127,,,127,127,127,127,,,365,,,,,,,,,,,,,127,,,,127,127,,,127,127,127',
'127,127,127,364,127,127,,,,,,127,364,364,364,364,364,364,,364,,364,',
',364,364,364,364,,,,,,127,,,,,,,,,,364,,,,364,364,,,364,364,364,364',
'364,364,161,364,364,,,,,,364,161,161,161,161,161,161,,161,,161,,,161',
'161,161,161,,,,,,364,,,,,,,,,,161,,,,161,161,,181,161,161,161,161,161',
'161,,161,161,,,,,181,161,181,,181,,126,,126,,,,161,161,,126,126,126',
'126,126,126,,126,161,126,,181,126,126,126,126,,,,181,181,181,181,181',
'181,,181,181,,,,126,,181,,126,126,,,126,126,126,126,126,126,,126,126',
'125,,125,,,126,,181,,125,125,125,125,125,125,,125,,125,,,125,125,125',
'125,,,126,,,,,,,,,,,,,125,,,,125,125,,,125,125,125,125,125,125,,125',
'125,123,,123,,,125,,,,123,123,123,123,123,123,,123,,123,,,123,123,123',
'123,,,125,,,,,,,,,,,,,123,,,,123,123,,,123,123,123,123,123,123,356,123',
'123,,,,,,123,356,356,356,356,356,356,,356,,356,,,356,356,356,356,,,',
',,123,,,,,,,,,,356,,,,356,356,,,356,356,356,356,356,356,225,356,356',
',,,,,356,225,225,225,225,225,225,,225,,225,,,225,225,225,225,,,,,,356',
',,,,,,,,,225,,,,225,225,,,225,225,225,225,225,225,350,225,225,,,,,,225',
'350,350,350,350,350,350,,350,,350,,,350,350,350,350,,,,,,225,,,,,,,',
',,350,,,,350,350,,,350,350,350,350,350,350,192,350,350,,,192,,,350,192',
'192,192,192,192,192,,192,,192,,,192,192,192,192,,,,,,350,,,,,,,,,,192',
',,,192,192,,,192,192,192,192,192,192,347,192,192,,,,,,192,347,347,347',
'347,347,347,,347,,347,,,347,347,347,347,,,,,,192,,,,,,,,,,347,,,,347',
'347,,,347,347,347,347,347,347,,347,347,,281,,281,,347,281,,,,281,281',
'281,281,281,281,,281,,281,,,281,281,281,281,,347,,,,,,,,,,,,,,281,,',
',281,281,,,281,281,281,281,281,281,197,281,281,,,,,,281,197,197,197',
'197,197,197,197,197,182,197,,,197,197,197,197,,,,,,281,182,,182,,182',
',,,,197,,,,197,197,,,197,197,197,197,197,197,,197,197,182,,,,,197,,183',
'182,182,182,182,182,182,,182,182,,,,183,183,182,183,184,183,,197,183',
',,,,,,,,184,184,,184,,184,,182,184,,183,,,,,,,,183,183,183,183,183,183',
',183,183,184,,,,,183,,185,184,184,184,184,184,184,,184,184,,,,185,185',
'184,185,186,185,,183,185,,,,,,,,,186,186,,186,,186,,184,186,,185,,,',
',,,,185,185,185,185,185,185,,185,185,186,,,,,185,,187,186,186,186,186',
'186,186,,186,186,,,187,187,187,186,187,,187,,185,187,187,187,187,,,',
',,,,,,,,,186,,,187,,,,,,,,187,187,187,187,187,187,117,187,187,,,,,,187',
'117,117,117,117,117,117,,117,,117,,117,117,117,117,117,,,,,,187,,,,',
',,,,,117,,,,117,117,,,117,117,117,117,117,117,189,117,117,,,,,,117,189',
'189,189,189,189,189,,189,,189,,,189,189,189,189,,,,,,117,,,,,,,,,,189',
',,,189,189,,,189,189,189,189,189,189,190,189,189,,,,,,189,190,190,190',
'190,190,190,,190,,190,,,190,190,190,190,,,,,,189,,,,,,,,,,190,,,,190',
'190,,,190,190,190,190,190,190,191,190,190,,,,,,190,191,191,191,191,191',
'191,,191,175,191,,,191,191,191,191,,,,,,190,175,,175,,175,,,258,258',
'191,,258,,191,191,,,191,191,191,191,191,191,,191,191,175,,,50,50,191',
',50,344,344,175,175,344,,,175,175,211,211,,258,211,175,258,,,,191,,',
',,,,,,,,,,,,50,258,175,50,177,344,,,344,,,258,258,178,211,,,211,177',
',177,,177,50,,,,178,344,178,,178,,50,50,,,211,344,344,,,,,177,,,211',
'211,,,,,178,,,,,,177,177,,,,,,177,,178,178,,293,293,293,293,178,293',
'293,293,293,293,,293,293,,,,,,,293,293,293,224,224,224,224,,224,224',
'224,224,224,,224,224,,,293,293,,,224,224,224,,,,,,,293,293,293,293,',
',,,,224,224,,,,,,,,,,,,224,224,224,224,288,288,288,288,,288,288,288',
'288,288,,288,288,,,,,,,288,288,288,,,,,,,,,,,,,,,,288,288,,,,,,,,,,',
',288,288,288,288' ]
        racc_action_check = arr = ::Array.new(7093, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   306,   nil,   nil,   142,   292,   nil,   135,   nil,   nil,
  5488,   454,   514,   574,   634,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   272,
   223,   247,   898,   958,  1018,  1078,    57,   -43,   nil,   106,
  6851,   nil,   nil,   nil,   nil,   nil,  1426,  1486,  1570,   nil,
   nil,   nil,   nil,   nil,  1630,   nil,   178,   178,   nil,  1810,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   247,  1930,   231,
  2050,  2110,  2170,  2230,  2290,  2350,  2410,  2470,  2530,  2590,
  2650,  2710,  2770,  2830,  2890,  2950,  3010,  3070,  3130,  3190,
  3250,  3310,  3370,  3430,  3490,  3550,  3610,  3670,   202,  3814,
   233,  3958,  4018,  1578,   -19,  1534,  1374,  6624,  4378,   nil,
   209,    63,  4582,  5996,   nil,  5939,  5882,  5707,    65,  4966,
   183,   nil,   nil,   nil,   nil,   182,   194,   nil,   172,   nil,
   nil,   nil,   nil,   nil,   nil,  5364,    97,   nil,    23,   nil,
  5431,    57,   nil,   nil,  5542,   nil,    74,   nil,   167,  4846,
   104,  5815,  4786,   nil,    56,   nil,   nil,   nil,   nil,   nil,
   116,    90,   682,   358,     2,  6803,  5294,  6889,  6898,   230,
  1286,  5862,  6395,  6442,  6459,  6506,  6523,  6570,  5411,  6678,
  6732,  6786,  6212,   nil,   nil,  4318,   nil,  6378,  4258,  4198,
  4078,    -2,   128,   nil,   nil,     2,   nil,    -2,    -9,   113,
   121,  6865,    -4,     9,    -1,     7,     3,     4,   nil,   nil,
   nil,   nil,   nil,   nil,  6953,  6104,   132,   nil,   165,   nil,
   198,   144,   nil,  1366,   nil,   233,   nil,   nil,   nil,   nil,
   nil,   252,   266,   -24,   170,    -7,   nil,  5290,   394,  1138,
  1198,  1282,   222,   218,   nil,   106,   231,   200,  6829,   -28,
  1690,   nil,  1870,   nil,  1990,   nil,  3754,   nil,   nil,   nil,
   nil,  3898,   nil,   nil,   nil,   nil,   117,   nil,   nil,   nil,
   nil,  6324,   251,   nil,  4642,  4702,    73,   nil,  7007,   nil,
   126,  4906,   162,  6931,  5146,  4522,   177,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  5206,   170,   nil,   194,   nil,   134,    60,
  5086,   nil,   nil,  5026,   nil,   200,    68,   203,   181,     4,
  4462,   nil,   179,   209,   181,   220,   225,   nil,    63,   nil,
   226,  4138,   232,   nil,  6856,   nil,   nil,  6266,   nil,   nil,
  6158,   nil,   nil,   nil,   174,   -52,  6050,   238,  1750,   237,
   nil,   nil,   nil,   nil,  5761,  5650,   247,   188,   nil,   nil,
   nil,  5596,    82,   161,   nil,   838,   265,   245,   nil,   271,
   272,   nil,   nil,   nil,   274,   279,   281,   nil,   778,   nil,
   nil,   nil,   268,   287,   nil,   nil,   718,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   310,   nil,
   226,    82,   nil,   nil,   nil,   297,   nil,   nil,   304,   nil,
   308,   nil,   312,   nil,   313,   nil,   nil,   nil,   nil,   nil,
   nil ]

racc_action_default = [
    -3,  -251,    -1,    -2,    -4,    -5,    -8,   -10,   -11,   -16,
  -109,  -251,  -251,  -251,  -251,   -46,   -47,   -48,   -49,   -50,
   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,   -60,
   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -74,
   -75,   -79,  -251,  -251,  -251,  -251,  -251,  -120,  -122,  -251,
  -251,  -177,  -178,  -179,  -180,  -181,  -251,  -251,  -251,  -194,
  -195,  -196,  -197,  -198,  -251,  -200,  -251,  -213,  -216,  -251,
  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -251,  -251,    -7,
  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,
  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,
  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -129,
  -124,  -250,  -250,   -28,  -251,   -29,   -36,  -251,  -251,   -76,
  -251,  -251,  -251,  -251,   -86,  -251,  -251,  -251,  -251,  -251,
  -250,  -139,  -160,  -161,  -121,  -250,  -228,  -148,  -150,  -151,
  -152,  -153,  -154,  -156,  -157,   -44,  -251,  -184,  -251,  -187,
  -251,  -251,  -190,  -191,  -204,  -199,  -251,  -207,  -251,  -211,
  -251,  -251,  -251,   431,    -6,    -9,   -12,   -13,   -14,   -15,
  -251,   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -25,   -26,
   -27,   -30,   -31,   -32,   -33,   -34,   -35,   -37,   -38,   -39,
   -40,   -41,  -251,   -42,  -104,  -251,   -80,  -251,  -239,  -245,
  -233,  -230,  -228,  -118,  -130,  -222,  -133,  -226,  -251,  -236,
  -234,  -242,  -178,  -179,  -180,  -181,  -224,  -225,  -232,  -237,
  -238,  -240,  -241,  -243,  -129,  -128,  -251,  -127,  -251,   -43,
  -228,   -71,   -81,  -251,   -84,  -228,  -165,  -167,  -168,  -169,
  -170,  -172,  -251,  -251,  -175,  -251,   -78,  -251,  -251,  -251,
  -129,  -251,  -230,  -250,  -162,  -251,  -251,  -250,  -229,  -251,
  -251,  -182,  -251,  -185,  -251,  -188,  -251,  -201,  -202,  -203,
  -205,  -251,  -208,  -209,  -210,  -212,  -228,  -214,  -217,  -219,
  -220,  -109,  -251,   -17,  -251,  -251,  -228,  -106,  -129,  -117,
  -251,  -231,  -251,  -229,  -251,  -251,  -228,  -132,  -134,  -233,
  -234,  -235,  -236,  -239,  -242,  -244,  -245,  -246,  -247,  -248,
  -249,  -125,  -126,  -229,  -251,   -73,  -251,   -83,  -251,  -229,
  -251,  -173,  -174,  -251,   -77,  -251,   -89,  -251,   -95,  -251,
  -251,   -99,  -230,  -228,  -230,  -251,  -251,  -142,  -251,  -163,
  -228,  -250,  -251,  -158,  -251,  -149,  -155,   -45,  -183,  -186,
  -193,  -189,  -192,  -206,  -251,  -251,  -108,  -251,  -229,  -228,
  -112,  -119,  -113,  -131,  -135,  -136,  -251,   -70,   -82,   -85,
  -166,  -171,  -251,   -89,   -88,  -251,  -251,   -95,   -94,  -251,
  -251,  -103,   -98,  -100,  -251,  -251,  -251,  -115,  -250,  -143,
  -144,  -145,  -251,  -251,  -140,  -141,  -251,  -159,  -215,  -218,
  -105,  -107,  -116,  -123,   -72,  -176,   -87,   -90,  -251,   -93,
  -251,  -251,  -110,  -111,  -114,  -251,  -164,  -137,  -251,  -147,
  -251,   -92,  -251,   -97,  -251,  -102,  -138,  -146,   -91,   -96,
  -101 ]

racc_goto_table = [
     2,   113,   115,   116,   117,   119,   139,   141,   254,   135,
   155,   244,   202,   254,   278,   378,   201,   194,   290,   361,
   345,   235,   331,   393,    79,   374,   253,   166,   167,   168,
   169,   256,   123,   125,   126,   127,   252,   286,   146,   148,
   226,   228,   288,   380,   330,   363,   145,   145,   150,   407,
   244,   232,   193,   336,   154,   389,   342,   165,   346,   161,
   276,   370,   322,   321,   409,   352,   257,   170,   272,   335,
   415,   273,   406,     3,   270,   145,   171,   172,   173,   174,
   175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
   185,   186,   187,   188,   189,   190,   191,   192,   164,   197,
   230,   225,   225,   383,   245,   287,   397,   271,   145,   269,
   157,   159,   145,   274,     1,   nil,   nil,   nil,   nil,   197,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   296,   nil,   nil,
   nil,   337,   292,   nil,   nil,   343,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   244,   nil,   nil,   nil,   384,
   nil,   386,   281,   333,   nil,   340,   nil,   332,   334,   275,
   314,   nil,   282,   nil,   nil,   318,   nil,   139,   141,   135,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   192,   nil,   nil,   123,   125,
   126,   359,   nil,   nil,   nil,   nil,   315,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   354,   nil,   399,   244,
   nil,   nil,   nil,   nil,   139,   141,   357,   353,   nil,   395,
   nil,   nil,   nil,   nil,   nil,   nil,   366,   nil,   nil,   nil,
   nil,   nil,   nil,   316,   nil,   nil,   nil,   nil,   nil,   145,
   197,   197,   nil,   nil,   nil,   nil,   nil,   325,   327,   nil,
   347,   nil,   347,   nil,   350,   nil,   150,   nil,   nil,   nil,
   nil,   154,   nil,   385,   nil,   nil,   395,   nil,   401,   nil,
   392,   nil,   nil,   nil,   347,   356,   nil,   nil,   nil,   nil,
   nil,   197,   nil,   nil,   364,   365,   nil,   nil,   nil,   402,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   390,   nil,
   139,   141,   nil,   347,   nil,   372,   nil,   nil,   nil,   nil,
   371,   nil,   nil,   145,   nil,   nil,   nil,   nil,   nil,   nil,
   145,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   404,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   192,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   123,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   418,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   420,   nil,
   422,   424 ]

racc_goto_check = [
     2,     9,     9,     9,     9,    39,    37,    31,    61,    65,
    88,    34,    56,    61,    96,    47,    54,    51,    55,    57,
    73,    44,    49,    67,     5,    46,    66,     7,     7,     7,
     7,    66,     9,     9,     9,     9,    54,    52,    11,    11,
    60,    60,    58,    50,    48,    62,     9,     9,     9,    45,
    34,    43,    12,    69,     9,    70,    72,     6,    75,     9,
    44,    76,    77,    79,    47,    83,    38,    11,    84,    55,
    67,    85,    46,     3,    89,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     5,     9,
    11,     9,     9,    49,    11,    51,    73,    90,     9,    92,
    93,    94,     9,    95,     1,   nil,   nil,   nil,   nil,     9,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    56,   nil,   nil,
   nil,    61,    38,   nil,   nil,    61,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    34,   nil,   nil,   nil,    55,
   nil,    55,     9,    56,   nil,    44,   nil,    54,    54,     2,
    38,   nil,     2,   nil,   nil,    38,   nil,    37,    31,    65,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,     9,     9,
     9,    56,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,    96,    34,
   nil,   nil,   nil,   nil,    37,    31,    38,    88,   nil,    61,
   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,     9,
     9,     9,   nil,   nil,   nil,   nil,   nil,     2,     2,   nil,
     9,   nil,     9,   nil,     9,   nil,     9,   nil,   nil,   nil,
   nil,     9,   nil,    38,   nil,   nil,    61,   nil,    51,   nil,
    38,   nil,   nil,   nil,     9,     9,   nil,   nil,   nil,   nil,
   nil,     9,   nil,   nil,     9,     9,   nil,   nil,   nil,    38,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,   nil,
    37,    31,   nil,     9,   nil,    11,   nil,   nil,   nil,   nil,
     9,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,
     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
     2,     2 ]

racc_goto_pointer = [
   nil,   114,     0,    73,   nil,    20,   -23,   -54,   nil,   -10,
   nil,   -18,   -55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -43,   nil,   nil,  -110,   nil,   nil,   -44,   -70,   -35,
   nil,   nil,   nil,   -69,  -100,  -326,  -301,  -313,  -205,  -227,
  -286,   -90,  -158,   nil,   -93,  -183,   -97,  -272,  -155,   nil,
   -71,  -122,  -248,   nil,   nil,   -40,  -104,  -318,   nil,  -200,
  -283,   nil,  -201,  -238,   nil,  -201,  -258,  -181,   nil,  -179,
   nil,   nil,   nil,  -201,   -90,   -87,   nil,   nil,   -54,   -82,
   -49,   nil,   -47,    44,    44,   -46,  -147 ]

racc_goto_default = [
   nil,   nil,   394,   nil,     4,     5,     6,     7,     8,    10,
     9,   329,   nil,    15,    39,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,   nil,   nil,
    40,    41,   120,   nil,   nil,   124,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,   nil,   nil,   nil,   203,   nil,   110,
   nil,   227,   204,   208,   206,   131,   nil,   nil,   130,   nil,
   nil,   136,   nil,   137,   138,   142,   236,   237,   238,   239,
   240,   243,   151,   153,    59,    60,    61,    64,   nil,   nil,
   nil,   156,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 95, :_reduce_1,
  1, 95, :_reduce_2,
  0, 95, :_reduce_3,
  1, 96, :_reduce_4,
  1, 98, :_reduce_5,
  3, 98, :_reduce_6,
  2, 98, :_reduce_7,
  1, 99, :_reduce_8,
  3, 99, :_reduce_9,
  1, 100, :_reduce_none,
  1, 101, :_reduce_11,
  3, 101, :_reduce_12,
  3, 101, :_reduce_13,
  3, 101, :_reduce_14,
  3, 101, :_reduce_15,
  1, 103, :_reduce_none,
  4, 103, :_reduce_17,
  3, 103, :_reduce_18,
  3, 103, :_reduce_19,
  3, 103, :_reduce_20,
  3, 103, :_reduce_21,
  3, 103, :_reduce_22,
  3, 103, :_reduce_23,
  3, 103, :_reduce_24,
  3, 103, :_reduce_25,
  3, 103, :_reduce_26,
  3, 103, :_reduce_27,
  2, 103, :_reduce_28,
  2, 103, :_reduce_29,
  3, 103, :_reduce_30,
  3, 103, :_reduce_31,
  3, 103, :_reduce_32,
  3, 103, :_reduce_33,
  3, 103, :_reduce_34,
  3, 103, :_reduce_35,
  2, 103, :_reduce_36,
  3, 103, :_reduce_37,
  3, 103, :_reduce_38,
  3, 103, :_reduce_39,
  3, 103, :_reduce_40,
  3, 103, :_reduce_41,
  3, 103, :_reduce_42,
  3, 103, :_reduce_43,
  1, 105, :_reduce_44,
  3, 105, :_reduce_45,
  1, 104, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 126, :_reduce_68,
  1, 126, :_reduce_69,
  5, 107, :_reduce_70,
  3, 107, :_reduce_71,
  6, 107, :_reduce_72,
  4, 107, :_reduce_73,
  1, 107, :_reduce_74,
  1, 111, :_reduce_75,
  2, 111, :_reduce_76,
  4, 134, :_reduce_77,
  3, 134, :_reduce_78,
  1, 134, :_reduce_79,
  3, 135, :_reduce_80,
  2, 133, :_reduce_81,
  3, 137, :_reduce_82,
  2, 137, :_reduce_83,
  2, 136, :_reduce_84,
  4, 136, :_reduce_85,
  2, 114, :_reduce_86,
  5, 139, :_reduce_87,
  4, 139, :_reduce_88,
  0, 140, :_reduce_none,
  2, 140, :_reduce_90,
  4, 140, :_reduce_91,
  3, 140, :_reduce_92,
  6, 115, :_reduce_93,
  5, 115, :_reduce_94,
  0, 141, :_reduce_none,
  4, 141, :_reduce_96,
  3, 141, :_reduce_97,
  5, 113, :_reduce_98,
  1, 142, :_reduce_99,
  2, 142, :_reduce_100,
  5, 143, :_reduce_101,
  4, 143, :_reduce_102,
  1, 144, :_reduce_103,
  1, 106, :_reduce_none,
  4, 106, :_reduce_105,
  1, 146, :_reduce_106,
  3, 146, :_reduce_107,
  3, 145, :_reduce_108,
  1, 102, :_reduce_109,
  6, 102, :_reduce_110,
  6, 102, :_reduce_111,
  5, 102, :_reduce_112,
  5, 102, :_reduce_113,
  6, 102, :_reduce_114,
  5, 102, :_reduce_115,
  4, 151, :_reduce_116,
  1, 152, :_reduce_117,
  1, 148, :_reduce_118,
  3, 148, :_reduce_119,
  1, 147, :_reduce_120,
  2, 147, :_reduce_121,
  1, 147, :_reduce_122,
  6, 112, :_reduce_123,
  2, 112, :_reduce_124,
  3, 153, :_reduce_125,
  3, 153, :_reduce_126,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  0, 150, :_reduce_129,
  1, 150, :_reduce_130,
  3, 150, :_reduce_131,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  3, 156, :_reduce_135,
  3, 156, :_reduce_136,
  6, 116, :_reduce_137,
  7, 117, :_reduce_138,
  1, 162, :_reduce_139,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 163, :_reduce_none,
  2, 163, :_reduce_143,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  7, 118, :_reduce_146,
  6, 118, :_reduce_147,
  1, 165, :_reduce_148,
  3, 165, :_reduce_149,
  1, 167, :_reduce_150,
  1, 167, :_reduce_151,
  1, 167, :_reduce_152,
  1, 167, :_reduce_none,
  1, 168, :_reduce_154,
  3, 168, :_reduce_155,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 166, :_reduce_none,
  2, 166, :_reduce_159,
  1, 159, :_reduce_160,
  1, 159, :_reduce_161,
  1, 160, :_reduce_162,
  2, 160, :_reduce_163,
  4, 160, :_reduce_164,
  1, 138, :_reduce_165,
  3, 138, :_reduce_166,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  3, 173, :_reduce_171,
  1, 173, :_reduce_172,
  2, 174, :_reduce_173,
  2, 172, :_reduce_174,
  1, 175, :_reduce_175,
  4, 175, :_reduce_176,
  1, 110, :_reduce_177,
  1, 120, :_reduce_178,
  1, 120, :_reduce_179,
  1, 120, :_reduce_180,
  1, 120, :_reduce_181,
  3, 121, :_reduce_182,
  4, 121, :_reduce_183,
  2, 121, :_reduce_184,
  3, 121, :_reduce_185,
  4, 121, :_reduce_186,
  2, 121, :_reduce_187,
  3, 124, :_reduce_188,
  4, 124, :_reduce_189,
  2, 124, :_reduce_190,
  1, 176, :_reduce_191,
  3, 176, :_reduce_192,
  3, 177, :_reduce_193,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 178, :_reduce_197,
  1, 178, :_reduce_198,
  2, 179, :_reduce_199,
  1, 181, :_reduce_200,
  1, 183, :_reduce_201,
  1, 184, :_reduce_202,
  2, 182, :_reduce_203,
  1, 185, :_reduce_204,
  1, 186, :_reduce_205,
  2, 186, :_reduce_206,
  2, 180, :_reduce_207,
  2, 187, :_reduce_208,
  2, 187, :_reduce_209,
  3, 97, :_reduce_210,
  0, 189, :_reduce_none,
  1, 189, :_reduce_none,
  0, 188, :_reduce_213,
  2, 188, :_reduce_214,
  4, 188, :_reduce_215,
  1, 119, :_reduce_216,
  3, 119, :_reduce_217,
  5, 119, :_reduce_218,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 127, :_reduce_221,
  1, 130, :_reduce_222,
  1, 128, :_reduce_223,
  1, 129, :_reduce_224,
  1, 123, :_reduce_225,
  1, 122, :_reduce_226,
  1, 125, :_reduce_227,
  0, 132, :_reduce_none,
  1, 132, :_reduce_229,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  0, 155, :_reduce_250 ]

racc_reduce_n = 251

racc_shift_n = 431

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :HIGH => 87,
  :CALL => 88,
  :LISTSTART => 89,
  :SPLAT => 90,
  :MODULO => 91,
  :TITLE_COLON => 92,
  :CASE_COLON => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "nil",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 87)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_29(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_30(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_31(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_32(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_33(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_34(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_35(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_36(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_37(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_38(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_39(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_40(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_41(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_42(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 130)
  def _reduce_43(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_45(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 173)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_73(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_75(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_76(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_78(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_79(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_80(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_81(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_82(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 232)
  def _reduce_83(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 236)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 237)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 247)
  def _reduce_86(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_88(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_90(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_91(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_92(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_94(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'egrammar.ra', 297)
  def _reduce_96(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_97(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_98(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_100(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_102(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_105(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_109(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 381)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 402)
  def _reduce_113(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 428)
  def _reduce_115(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_116(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_117(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_120(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_121(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_122(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 458)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 499)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 503)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 513)
  def _reduce_137(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 527)
  def _reduce_138(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 537)
  def _reduce_139(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_143(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_148(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_149(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_151(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_152(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_154(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_155(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_160(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_161(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_162(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_164(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_165(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_166(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_171(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_172(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_173(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_174(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_175(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_176(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_177(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_178(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_179(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_180(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_182(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_183(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_184(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_185(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_186(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_187(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_188(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_189(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_190(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_191(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_192(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_193(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_197(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_198(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_199(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_200(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_202(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_203(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_204(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_205(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_206(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_207(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_208(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_209(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_210(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 211 omitted

# reduce 212 omitted

module_eval(<<'.,.,', 'egrammar.ra', 731)
  def _reduce_213(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 732)
  def _reduce_214(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 733)
  def _reduce_215(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 736)
  def _reduce_216(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_217(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 738)
  def _reduce_218(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'egrammar.ra', 744)
  def _reduce_221(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 745)
  def _reduce_222(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 746)
  def _reduce_223(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 747)
  def _reduce_224(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 748)
  def _reduce_225(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 753)
  def _reduce_226(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 756)
  def _reduce_227(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 228 omitted

module_eval(<<'.,.,', 'egrammar.ra', 762)
  def _reduce_229(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

module_eval(<<'.,.,', 'egrammar.ra', 789)
  def _reduce_250(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
